{"/home/travis/build/npmtest/node-npmtest-eris/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":33}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_eris */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-eris/lib.npmtest_eris.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/lib.npmtest_eris.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":49}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":55}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_eris */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_eris = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_eris = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-eris/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":48}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":62},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-eris && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_eris */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_eris","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_eris.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_eris.rollup.js'] =","            local.assetsDict['/assets.npmtest_eris.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_eris.__dirname + '/lib.npmtest_eris.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/index.js","s":{"1":1,"2":1,"3":0,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"Eris","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":39}},"2":{"start":{"line":5,"column":0},"end":{"line":7,"column":1}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":38}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":43}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":45}},"6":{"start":{"line":11,"column":0},"end":{"line":11,"column":51}},"7":{"start":{"line":12,"column":0},"end":{"line":12,"column":21}},"8":{"start":{"line":13,"column":0},"end":{"line":13,"column":51}},"9":{"start":{"line":14,"column":0},"end":{"line":14,"column":48}},"10":{"start":{"line":15,"column":0},"end":{"line":15,"column":60}},"11":{"start":{"line":16,"column":0},"end":{"line":16,"column":44}},"12":{"start":{"line":17,"column":0},"end":{"line":17,"column":61}},"13":{"start":{"line":18,"column":0},"end":{"line":18,"column":61}},"14":{"start":{"line":19,"column":0},"end":{"line":19,"column":47}},"15":{"start":{"line":20,"column":0},"end":{"line":20,"column":61}},"16":{"start":{"line":21,"column":0},"end":{"line":21,"column":69}},"17":{"start":{"line":22,"column":0},"end":{"line":22,"column":49}},"18":{"start":{"line":23,"column":0},"end":{"line":23,"column":49}},"19":{"start":{"line":24,"column":0},"end":{"line":24,"column":51}},"20":{"start":{"line":25,"column":0},"end":{"line":25,"column":57}},"21":{"start":{"line":26,"column":0},"end":{"line":26,"column":75}},"22":{"start":{"line":27,"column":0},"end":{"line":27,"column":65}},"23":{"start":{"line":28,"column":0},"end":{"line":28,"column":61}},"24":{"start":{"line":29,"column":0},"end":{"line":29,"column":45}},"25":{"start":{"line":30,"column":0},"end":{"line":30,"column":44}},"26":{"start":{"line":31,"column":0},"end":{"line":31,"column":56}},"27":{"start":{"line":32,"column":0},"end":{"line":32,"column":45}},"28":{"start":{"line":33,"column":0},"end":{"line":33,"column":62}},"29":{"start":{"line":34,"column":0},"end":{"line":34,"column":76}},"30":{"start":{"line":35,"column":0},"end":{"line":35,"column":57}},"31":{"start":{"line":37,"column":0},"end":{"line":37,"column":22}}},"branchMap":{},"code":["\"use strict\";","","const Client = require(\"./lib/Client\");","","function Eris(token, options) {","    return new Client(token, options);","}","","Eris.Bucket = require(\"./lib/util/Bucket\");","Eris.Call = require(\"./lib/structures/Call\");","Eris.Channel = require(\"./lib/structures/Channel\");","Eris.Client = Client;","Eris.Collection = require(\"./lib/util/Collection\");","Eris.Command = require(\"./lib/command/Command\");","Eris.CommandClient = require(\"./lib/command/CommandClient\");","Eris.Constants = require(\"./lib/Constants\");","Eris.ExtendedUser = require(\"./lib/structures/ExtendedUser\");","Eris.GroupChannel = require(\"./lib/structures/GroupChannel\");","Eris.Guild = require(\"./lib/structures/Guild\");","Eris.GuildChannel = require(\"./lib/structures/GuildChannel\");","Eris.GuildIntegration = require(\"./lib/structures/GuildIntegration\");","Eris.Invite = require(\"./lib/structures/Invite\");","Eris.Member = require(\"./lib/structures/Member\");","Eris.Message = require(\"./lib/structures/Message\");","Eris.Permission = require(\"./lib/structures/Permission\");","Eris.PermissionOverwrite = require(\"./lib/structures/PermissionOverwrite\");","Eris.PrivateChannel = require(\"./lib/structures/PrivateChannel\");","Eris.Relationship = require(\"./lib/structures/Relationship\");","Eris.Role = require(\"./lib/structures/Role\");","Eris.Shard = require(\"./lib/gateway/Shard\");","Eris.SharedStream = require(\"./lib/voice/SharedStream\");","Eris.User = require(\"./lib/structures/User\");","Eris.VoiceConnection = require(\"./lib/voice/VoiceConnection\");","Eris.VoiceConnectionManager = require(\"./lib/voice/VoiceConnectionManager\");","Eris.VoiceState = require(\"./lib/structures/VoiceState\");","","module.exports = Eris;",""],"l":{"3":1,"5":1,"6":0,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"37":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/Client.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/Client.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0,0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0,0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0,0],"113":[0,0],"114":[0,0],"115":[0,0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[0,0],"125":[0,0],"126":[0,0],"127":[0,0],"128":[0,0],"129":[0,0],"130":[0,0],"131":[0,0],"132":[0,0],"133":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0},"fnMap":{"1":{"name":"(anonymous_1)","line":85,"loc":{"start":{"line":85,"column":15},"end":{"line":85,"column":32}}},"2":{"name":"(anonymous_2)","line":160,"loc":{"start":{"line":160,"column":14},"end":{"line":160,"column":17}}},"3":{"name":"(anonymous_3)","line":168,"loc":{"start":{"line":168,"column":11},"end":{"line":168,"column":14}}},"4":{"name":"(anonymous_4)","line":193,"loc":{"start":{"line":193,"column":14},"end":{"line":193,"column":17}}},"5":{"name":"(anonymous_5)","line":201,"loc":{"start":{"line":201,"column":17},"end":{"line":201,"column":20}}},"6":{"name":"(anonymous_6)","line":213,"loc":{"start":{"line":213,"column":14},"end":{"line":213,"column":24}}},"7":{"name":"(anonymous_7)","line":229,"loc":{"start":{"line":229,"column":20},"end":{"line":229,"column":41}}},"8":{"name":"(anonymous_8)","line":254,"loc":{"start":{"line":254,"column":21},"end":{"line":254,"column":33}}},"9":{"name":"(anonymous_9)","line":276,"loc":{"start":{"line":276,"column":14},"end":{"line":276,"column":29}}},"10":{"name":"(anonymous_10)","line":298,"loc":{"start":{"line":298,"column":14},"end":{"line":298,"column":26}}},"11":{"name":"(anonymous_11)","line":309,"loc":{"start":{"line":309,"column":17},"end":{"line":309,"column":39}}},"12":{"name":"(anonymous_12)","line":332,"loc":{"start":{"line":332,"column":15},"end":{"line":332,"column":36}}},"13":{"name":"(anonymous_13)","line":360,"loc":{"start":{"line":360,"column":23},"end":{"line":360,"column":45}}},"14":{"name":"(anonymous_14)","line":388,"loc":{"start":{"line":388,"column":17},"end":{"line":388,"column":29}}},"15":{"name":"(anonymous_15)","line":397,"loc":{"start":{"line":397,"column":21},"end":{"line":397,"column":33}}},"16":{"name":"(anonymous_16)","line":410,"loc":{"start":{"line":410,"column":25},"end":{"line":410,"column":69}}},"17":{"name":"(anonymous_17)","line":424,"loc":{"start":{"line":424,"column":27},"end":{"line":424,"column":52}}},"18":{"name":"(anonymous_18)","line":433,"loc":{"start":{"line":433,"column":21},"end":{"line":433,"column":33}}},"19":{"name":"(anonymous_19)","line":447,"loc":{"start":{"line":447,"column":23},"end":{"line":447,"column":44}}},"20":{"name":"(anonymous_20)","line":462,"loc":{"start":{"line":462,"column":22},"end":{"line":462,"column":34}}},"21":{"name":"(anonymous_21)","line":472,"loc":{"start":{"line":472,"column":14},"end":{"line":472,"column":33}}},"22":{"name":"(anonymous_22)","line":484,"loc":{"start":{"line":484,"column":24},"end":{"line":484,"column":45}}},"23":{"name":"(anonymous_23)","line":497,"loc":{"start":{"line":497,"column":15},"end":{"line":497,"column":43}}},"24":{"name":"(anonymous_24)","line":518,"loc":{"start":{"line":518,"column":18},"end":{"line":518,"column":46}}},"25":{"name":"(anonymous_25)","line":542,"loc":{"start":{"line":542,"column":23},"end":{"line":542,"column":51}}},"26":{"name":"(anonymous_26)","line":554,"loc":{"start":{"line":554,"column":17},"end":{"line":554,"column":36}}},"27":{"name":"(anonymous_27)","line":563,"loc":{"start":{"line":563,"column":20},"end":{"line":563,"column":30}}},"28":{"name":"(anonymous_28)","line":576,"loc":{"start":{"line":576,"column":20},"end":{"line":576,"column":39}}},"29":{"name":"(anonymous_29)","line":588,"loc":{"start":{"line":588,"column":18},"end":{"line":588,"column":46}}},"30":{"name":"(anonymous_30)","line":597,"loc":{"start":{"line":597,"column":20},"end":{"line":597,"column":39}}},"31":{"name":"(anonymous_31)","line":611,"loc":{"start":{"line":611,"column":14},"end":{"line":611,"column":33}}},"32":{"name":"(anonymous_32)","line":627,"loc":{"start":{"line":627,"column":12},"end":{"line":627,"column":39}}},"33":{"name":"(anonymous_33)","line":638,"loc":{"start":{"line":638,"column":20},"end":{"line":638,"column":48}}},"34":{"name":"(anonymous_34)","line":670,"loc":{"start":{"line":670,"column":14},"end":{"line":670,"column":32}}},"35":{"name":"(anonymous_35)","line":680,"loc":{"start":{"line":680,"column":17},"end":{"line":680,"column":33}}},"36":{"name":"(anonymous_36)","line":692,"loc":{"start":{"line":692,"column":16},"end":{"line":692,"column":32}}},"37":{"name":"(anonymous_37)","line":703,"loc":{"start":{"line":703,"column":19},"end":{"line":703,"column":29}}},"38":{"name":"(anonymous_38)","line":712,"loc":{"start":{"line":712,"column":13},"end":{"line":712,"column":24}}},"39":{"name":"(anonymous_39)","line":728,"loc":{"start":{"line":728,"column":16},"end":{"line":728,"column":27}}},"40":{"name":"(anonymous_40)","line":737,"loc":{"start":{"line":737,"column":16},"end":{"line":737,"column":27}}},"41":{"name":"(anonymous_41)","line":745,"loc":{"start":{"line":745,"column":11},"end":{"line":745,"column":14}}},"42":{"name":"(anonymous_42)","line":756,"loc":{"start":{"line":756,"column":12},"end":{"line":756,"column":22}}},"43":{"name":"(anonymous_43)","line":765,"loc":{"start":{"line":765,"column":16},"end":{"line":765,"column":25}}},"44":{"name":"(anonymous_44)","line":780,"loc":{"start":{"line":780,"column":22},"end":{"line":780,"column":32}}},"45":{"name":"(anonymous_45)","line":793,"loc":{"start":{"line":793,"column":14},"end":{"line":793,"column":37}}},"46":{"name":"(anonymous_46)","line":806,"loc":{"start":{"line":806,"column":15},"end":{"line":806,"column":57}}},"47":{"name":"(anonymous_47)","line":851,"loc":{"start":{"line":851,"column":11},"end":{"line":851,"column":23}}},"48":{"name":"(anonymous_48)","line":869,"loc":{"start":{"line":869,"column":17},"end":{"line":869,"column":44}}},"49":{"name":"(anonymous_49)","line":900,"loc":{"start":{"line":900,"column":15},"end":{"line":900,"column":47}}},"50":{"name":"(anonymous_50)","line":927,"loc":{"start":{"line":927,"column":14},"end":{"line":927,"column":37}}},"51":{"name":"(anonymous_51)","line":937,"loc":{"start":{"line":937,"column":16},"end":{"line":937,"column":39}}},"52":{"name":"(anonymous_52)","line":949,"loc":{"start":{"line":949,"column":22},"end":{"line":949,"column":62}}},"53":{"name":"(anonymous_53)","line":966,"loc":{"start":{"line":966,"column":22},"end":{"line":966,"column":63}}},"54":{"name":"(anonymous_54)","line":981,"loc":{"start":{"line":981,"column":25},"end":{"line":981,"column":66}}},"55":{"name":"(anonymous_55)","line":994,"loc":{"start":{"line":994,"column":26},"end":{"line":994,"column":49}}},"56":{"name":"(anonymous_56)","line":1004,"loc":{"start":{"line":1004,"column":17},"end":{"line":1004,"column":40}}},"57":{"name":"(anonymous_57)","line":1014,"loc":{"start":{"line":1014,"column":18},"end":{"line":1014,"column":42}}},"58":{"name":"(anonymous_58)","line":1047,"loc":{"start":{"line":1047,"column":16},"end":{"line":1047,"column":58}}},"59":{"name":"(anonymous_59)","line":1111,"loc":{"start":{"line":1111,"column":17},"end":{"line":1111,"column":27}}},"60":{"name":"(anonymous_60)","line":1120,"loc":{"start":{"line":1120,"column":24},"end":{"line":1120,"column":34}}},"61":{"name":"(anonymous_61)","line":1135,"loc":{"start":{"line":1135,"column":24},"end":{"line":1135,"column":58}}},"62":{"name":"(anonymous_62)","line":1149,"loc":{"start":{"line":1149,"column":26},"end":{"line":1149,"column":51}}},"63":{"name":"(anonymous_63)","line":1159,"loc":{"start":{"line":1159,"column":24},"end":{"line":1159,"column":49}}},"64":{"name":"(anonymous_64)","line":1168,"loc":{"start":{"line":1168,"column":19},"end":{"line":1168,"column":29}}},"65":{"name":"(anonymous_65)","line":1179,"loc":{"start":{"line":1179,"column":18},"end":{"line":1179,"column":55}}},"66":{"name":"(anonymous_66)","line":1194,"loc":{"start":{"line":1194,"column":20},"end":{"line":1194,"column":38}}},"67":{"name":"(anonymous_67)","line":1205,"loc":{"start":{"line":1205,"column":15},"end":{"line":1205,"column":36}}},"68":{"name":"(anonymous_68)","line":1229,"loc":{"start":{"line":1229,"column":13},"end":{"line":1229,"column":32}}},"69":{"name":"(anonymous_69)","line":1248,"loc":{"start":{"line":1248,"column":16},"end":{"line":1248,"column":26}}},"70":{"name":"(anonymous_70)","line":1264,"loc":{"start":{"line":1264,"column":19},"end":{"line":1264,"column":48}}},"71":{"name":"(anonymous_71)","line":1281,"loc":{"start":{"line":1281,"column":22},"end":{"line":1281,"column":50}}},"72":{"name":"(anonymous_72)","line":1292,"loc":{"start":{"line":1292,"column":25},"end":{"line":1292,"column":53}}},"73":{"name":"(anonymous_73)","line":1302,"loc":{"start":{"line":1302,"column":16},"end":{"line":1302,"column":32}}},"74":{"name":"(anonymous_74)","line":1314,"loc":{"start":{"line":1314,"column":19},"end":{"line":1314,"column":37}}},"75":{"name":"(anonymous_75)","line":1323,"loc":{"start":{"line":1323,"column":15},"end":{"line":1323,"column":25}}},"76":{"name":"(anonymous_76)","line":1332,"loc":{"start":{"line":1332,"column":14},"end":{"line":1332,"column":24}}},"77":{"name":"(anonymous_77)","line":1341,"loc":{"start":{"line":1341,"column":23},"end":{"line":1341,"column":31}}},"78":{"name":"(anonymous_78)","line":1349,"loc":{"start":{"line":1349,"column":19},"end":{"line":1349,"column":22}}},"79":{"name":"(anonymous_79)","line":1359,"loc":{"start":{"line":1359,"column":19},"end":{"line":1359,"column":35}}},"80":{"name":"(anonymous_80)","line":1370,"loc":{"start":{"line":1370,"column":22},"end":{"line":1370,"column":31}}},"81":{"name":"(anonymous_81)","line":1380,"loc":{"start":{"line":1380,"column":21},"end":{"line":1380,"column":39}}},"82":{"name":"(anonymous_82)","line":1390,"loc":{"start":{"line":1390,"column":24},"end":{"line":1390,"column":42}}},"83":{"name":"(anonymous_83)","line":1399,"loc":{"start":{"line":1399,"column":18},"end":{"line":1399,"column":27}}},"84":{"name":"(anonymous_84)","line":1408,"loc":{"start":{"line":1408,"column":16},"end":{"line":1408,"column":31}}},"85":{"name":"(anonymous_85)","line":1418,"loc":{"start":{"line":1418,"column":18},"end":{"line":1418,"column":27}}},"86":{"name":"(anonymous_86)","line":1427,"loc":{"start":{"line":1427,"column":18},"end":{"line":1427,"column":30}}},"87":{"name":"(anonymous_87)","line":1449,"loc":{"start":{"line":1449,"column":16},"end":{"line":1449,"column":26}}},"88":{"name":"(anonymous_88)","line":1463,"loc":{"start":{"line":1463,"column":17},"end":{"line":1463,"column":40}}},"89":{"name":"(anonymous_89)","line":1479,"loc":{"start":{"line":1479,"column":24},"end":{"line":1479,"column":34}}},"90":{"name":"(anonymous_90)","line":1491,"loc":{"start":{"line":1491,"column":22},"end":{"line":1491,"column":32}}},"91":{"name":"(anonymous_91)","line":1504,"loc":{"start":{"line":1504,"column":21},"end":{"line":1504,"column":40}}},"92":{"name":"(anonymous_92)","line":1518,"loc":{"start":{"line":1518,"column":23},"end":{"line":1518,"column":47}}},"93":{"name":"(anonymous_93)","line":1534,"loc":{"start":{"line":1534,"column":22},"end":{"line":1534,"column":42}}},"94":{"name":"(anonymous_94)","line":1546,"loc":{"start":{"line":1546,"column":21},"end":{"line":1546,"column":31}}},"95":{"name":"(anonymous_95)","line":1558,"loc":{"start":{"line":1558,"column":15},"end":{"line":1558,"column":24}}},"96":{"name":"(anonymous_96)","line":1597,"loc":{"start":{"line":1597,"column":25},"end":{"line":1597,"column":44}}},"97":{"name":"(anonymous_97)","line":1652,"loc":{"start":{"line":1652,"column":23},"end":{"line":1652,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":58}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":48}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":41}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":46}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":58}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":58}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":44}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":66}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":46}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":46}},"11":{"start":{"line":13,"column":0},"end":{"line":13,"column":48}},"12":{"start":{"line":14,"column":0},"end":{"line":14,"column":62}},"13":{"start":{"line":15,"column":0},"end":{"line":15,"column":58}},"14":{"start":{"line":16,"column":0},"end":{"line":16,"column":56}},"15":{"start":{"line":17,"column":0},"end":{"line":17,"column":42}},"16":{"start":{"line":18,"column":0},"end":{"line":18,"column":55}},"17":{"start":{"line":19,"column":0},"end":{"line":19,"column":66}},"18":{"start":{"line":20,"column":0},"end":{"line":20,"column":42}},"19":{"start":{"line":21,"column":0},"end":{"line":21,"column":73}},"20":{"start":{"line":23,"column":0},"end":{"line":23,"column":17}},"21":{"start":{"line":24,"column":0},"end":{"line":28,"column":1}},"22":{"start":{"line":25,"column":4},"end":{"line":25,"column":44}},"23":{"start":{"line":27,"column":4},"end":{"line":27,"column":50}},"24":{"start":{"line":29,"column":0},"end":{"line":29,"column":12}},"25":{"start":{"line":30,"column":0},"end":{"line":33,"column":1}},"26":{"start":{"line":31,"column":4},"end":{"line":31,"column":33}},"27":{"start":{"line":86,"column":8},"end":{"line":86,"column":16}},"28":{"start":{"line":88,"column":8},"end":{"line":106,"column":10}},"29":{"start":{"line":107,"column":8},"end":{"line":111,"column":9}},"30":{"start":{"line":108,"column":12},"end":{"line":110,"column":13}},"31":{"start":{"line":109,"column":16},"end":{"line":109,"column":59}},"32":{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},"33":{"start":{"line":113,"column":12},"end":{"line":113,"column":66}},"34":{"start":{"line":115,"column":8},"end":{"line":121,"column":9}},"35":{"start":{"line":116,"column":12},"end":{"line":120,"column":13}},"36":{"start":{"line":117,"column":16},"end":{"line":117,"column":32}},"37":{"start":{"line":119,"column":16},"end":{"line":119,"column":46}},"38":{"start":{"line":122,"column":8},"end":{"line":124,"column":9}},"39":{"start":{"line":123,"column":12},"end":{"line":123,"column":52}},"40":{"start":{"line":125,"column":8},"end":{"line":127,"column":9}},"41":{"start":{"line":126,"column":12},"end":{"line":126,"column":48}},"42":{"start":{"line":129,"column":8},"end":{"line":129,"column":27}},"43":{"start":{"line":131,"column":8},"end":{"line":131,"column":55}},"44":{"start":{"line":133,"column":8},"end":{"line":133,"column":27}},"45":{"start":{"line":134,"column":8},"end":{"line":134,"column":80}},"46":{"start":{"line":135,"column":8},"end":{"line":135,"column":27}},"47":{"start":{"line":136,"column":8},"end":{"line":136,"column":29}},"48":{"start":{"line":137,"column":8},"end":{"line":137,"column":31}},"49":{"start":{"line":138,"column":8},"end":{"line":138,"column":34}},"50":{"start":{"line":139,"column":8},"end":{"line":139,"column":45}},"51":{"start":{"line":140,"column":8},"end":{"line":140,"column":58}},"52":{"start":{"line":141,"column":8},"end":{"line":141,"column":44}},"53":{"start":{"line":142,"column":8},"end":{"line":142,"column":36}},"54":{"start":{"line":143,"column":8},"end":{"line":143,"column":62}},"55":{"start":{"line":144,"column":8},"end":{"line":144,"column":30}},"56":{"start":{"line":145,"column":8},"end":{"line":145,"column":32}},"57":{"start":{"line":146,"column":8},"end":{"line":146,"column":32}},"58":{"start":{"line":147,"column":8},"end":{"line":147,"column":66}},"59":{"start":{"line":148,"column":8},"end":{"line":148,"column":58}},"60":{"start":{"line":149,"column":8},"end":{"line":149,"column":42}},"61":{"start":{"line":150,"column":8},"end":{"line":153,"column":10}},"62":{"start":{"line":154,"column":8},"end":{"line":154,"column":36}},"63":{"start":{"line":155,"column":8},"end":{"line":155,"column":31}},"64":{"start":{"line":156,"column":8},"end":{"line":156,"column":24}},"65":{"start":{"line":157,"column":8},"end":{"line":157,"column":61}},"66":{"start":{"line":161,"column":8},"end":{"line":161,"column":64}},"67":{"start":{"line":169,"column":8},"end":{"line":186,"column":11}},"68":{"start":{"line":170,"column":12},"end":{"line":172,"column":13}},"69":{"start":{"line":171,"column":16},"end":{"line":171,"column":92}},"70":{"start":{"line":173,"column":12},"end":{"line":175,"column":13}},"71":{"start":{"line":174,"column":16},"end":{"line":174,"column":72}},"72":{"start":{"line":176,"column":12},"end":{"line":178,"column":13}},"73":{"start":{"line":177,"column":16},"end":{"line":177,"column":32}},"74":{"start":{"line":179,"column":12},"end":{"line":179,"column":119}},"75":{"start":{"line":180,"column":12},"end":{"line":182,"column":13}},"76":{"start":{"line":181,"column":16},"end":{"line":181,"column":37}},"77":{"start":{"line":184,"column":12},"end":{"line":184,"column":36}},"78":{"start":{"line":185,"column":12},"end":{"line":185,"column":51}},"79":{"start":{"line":185,"column":29},"end":{"line":185,"column":43}},"80":{"start":{"line":194,"column":8},"end":{"line":194,"column":69}},"81":{"start":{"line":202,"column":8},"end":{"line":204,"column":9}},"82":{"start":{"line":203,"column":12},"end":{"line":203,"column":45}},"83":{"start":{"line":205,"column":8},"end":{"line":205,"column":79}},"84":{"start":{"line":214,"column":8},"end":{"line":214,"column":27}},"85":{"start":{"line":215,"column":8},"end":{"line":217,"column":11}},"86":{"start":{"line":216,"column":12},"end":{"line":216,"column":38}},"87":{"start":{"line":218,"column":8},"end":{"line":218,"column":31}},"88":{"start":{"line":230,"column":8},"end":{"line":230,"column":49}},"89":{"start":{"line":231,"column":8},"end":{"line":233,"column":9}},"90":{"start":{"line":232,"column":12},"end":{"line":232,"column":66}},"91":{"start":{"line":234,"column":8},"end":{"line":236,"column":9}},"92":{"start":{"line":235,"column":12},"end":{"line":235,"column":100}},"93":{"start":{"line":237,"column":8},"end":{"line":242,"column":11}},"94":{"start":{"line":243,"column":8},"end":{"line":243,"column":32}},"95":{"start":{"line":244,"column":8},"end":{"line":246,"column":9}},"96":{"start":{"line":245,"column":12},"end":{"line":245,"column":53}},"97":{"start":{"line":247,"column":8},"end":{"line":247,"column":105}},"98":{"start":{"line":255,"column":8},"end":{"line":255,"column":49}},"99":{"start":{"line":256,"column":8},"end":{"line":258,"column":9}},"100":{"start":{"line":257,"column":12},"end":{"line":257,"column":19}},"101":{"start":{"line":259,"column":8},"end":{"line":264,"column":11}},"102":{"start":{"line":265,"column":8},"end":{"line":265,"column":79}},"103":{"start":{"line":277,"column":8},"end":{"line":279,"column":11}},"104":{"start":{"line":278,"column":12},"end":{"line":278,"column":43}},"105":{"start":{"line":281,"column":8},"end":{"line":284,"column":9}},"106":{"start":{"line":282,"column":12},"end":{"line":282,"column":26}},"107":{"start":{"line":283,"column":12},"end":{"line":283,"column":31}},"108":{"start":{"line":285,"column":8},"end":{"line":287,"column":9}},"109":{"start":{"line":286,"column":12},"end":{"line":286,"column":42}},"110":{"start":{"line":288,"column":8},"end":{"line":290,"column":9}},"111":{"start":{"line":289,"column":12},"end":{"line":289,"column":38}},"112":{"start":{"line":299,"column":8},"end":{"line":299,"column":197}},"113":{"start":{"line":310,"column":8},"end":{"line":310,"column":45}},"114":{"start":{"line":311,"column":8},"end":{"line":313,"column":9}},"115":{"start":{"line":312,"column":12},"end":{"line":312,"column":75}},"116":{"start":{"line":314,"column":8},"end":{"line":317,"column":63}},"117":{"start":{"line":317,"column":29},"end":{"line":317,"column":61}},"118":{"start":{"line":333,"column":8},"end":{"line":333,"column":49}},"119":{"start":{"line":334,"column":8},"end":{"line":336,"column":9}},"120":{"start":{"line":335,"column":12},"end":{"line":335,"column":79}},"121":{"start":{"line":338,"column":8},"end":{"line":351,"column":11}},"122":{"start":{"line":346,"column":12},"end":{"line":350,"column":13}},"123":{"start":{"line":347,"column":16},"end":{"line":347,"column":61}},"124":{"start":{"line":349,"column":16},"end":{"line":349,"column":52}},"125":{"start":{"line":361,"column":8},"end":{"line":361,"column":81}},"126":{"start":{"line":362,"column":8},"end":{"line":362,"column":46}},"127":{"start":{"line":363,"column":8},"end":{"line":365,"column":9}},"128":{"start":{"line":364,"column":12},"end":{"line":364,"column":79}},"129":{"start":{"line":366,"column":8},"end":{"line":368,"column":9}},"130":{"start":{"line":367,"column":12},"end":{"line":367,"column":37}},"131":{"start":{"line":369,"column":8},"end":{"line":369,"column":55}},"132":{"start":{"line":370,"column":8},"end":{"line":370,"column":55}},"133":{"start":{"line":371,"column":8},"end":{"line":371,"column":186}},"134":{"start":{"line":371,"column":45},"end":{"line":371,"column":144}},"135":{"start":{"line":371,"column":161},"end":{"line":371,"column":184}},"136":{"start":{"line":372,"column":8},"end":{"line":376,"column":9}},"137":{"start":{"line":373,"column":12},"end":{"line":373,"column":35}},"138":{"start":{"line":375,"column":12},"end":{"line":375,"column":38}},"139":{"start":{"line":377,"column":8},"end":{"line":380,"column":13}},"140":{"start":{"line":377,"column":151},"end":{"line":380,"column":9}},"141":{"start":{"line":389,"column":8},"end":{"line":389,"column":89}},"142":{"start":{"line":398,"column":8},"end":{"line":398,"column":94}},"143":{"start":{"line":411,"column":8},"end":{"line":415,"column":11}},"144":{"start":{"line":425,"column":8},"end":{"line":425,"column":113}},"145":{"start":{"line":434,"column":8},"end":{"line":434,"column":163}},"146":{"start":{"line":434,"column":112},"end":{"line":434,"column":161}},"147":{"start":{"line":434,"column":136},"end":{"line":434,"column":160}},"148":{"start":{"line":448,"column":8},"end":{"line":448,"column":32}},"149":{"start":{"line":449,"column":8},"end":{"line":454,"column":52}},"150":{"start":{"line":454,"column":26},"end":{"line":454,"column":50}},"151":{"start":{"line":463,"column":8},"end":{"line":463,"column":95}},"152":{"start":{"line":473,"column":8},"end":{"line":473,"column":140}},"153":{"start":{"line":485,"column":8},"end":{"line":485,"column":105}},"154":{"start":{"line":498,"column":8},"end":{"line":498,"column":151}},"155":{"start":{"line":519,"column":8},"end":{"line":521,"column":9}},"156":{"start":{"line":520,"column":12},"end":{"line":520,"column":76}},"157":{"start":{"line":522,"column":8},"end":{"line":524,"column":9}},"158":{"start":{"line":523,"column":12},"end":{"line":523,"column":120}},"159":{"start":{"line":525,"column":8},"end":{"line":531,"column":25}},"160":{"start":{"line":543,"column":8},"end":{"line":543,"column":34}},"161":{"start":{"line":544,"column":8},"end":{"line":544,"column":33}},"162":{"start":{"line":545,"column":8},"end":{"line":545,"column":144}},"163":{"start":{"line":555,"column":8},"end":{"line":555,"column":143}},"164":{"start":{"line":564,"column":8},"end":{"line":564,"column":91}},"165":{"start":{"line":577,"column":6},"end":{"line":577,"column":97}},"166":{"start":{"line":589,"column":6},"end":{"line":589,"column":106}},"167":{"start":{"line":598,"column":6},"end":{"line":598,"column":98}},"168":{"start":{"line":612,"column":8},"end":{"line":612,"column":155}},"169":{"start":{"line":612,"column":113},"end":{"line":612,"column":153}},"170":{"start":{"line":628,"column":8},"end":{"line":628,"column":163}},"171":{"start":{"line":628,"column":121},"end":{"line":628,"column":161}},"172":{"start":{"line":639,"column":8},"end":{"line":641,"column":9}},"173":{"start":{"line":640,"column":12},"end":{"line":640,"column":73}},"174":{"start":{"line":642,"column":8},"end":{"line":642,"column":51}},"175":{"start":{"line":643,"column":8},"end":{"line":643,"column":37}},"176":{"start":{"line":644,"column":8},"end":{"line":646,"column":9}},"177":{"start":{"line":645,"column":12},"end":{"line":645,"column":73}},"178":{"start":{"line":647,"column":8},"end":{"line":649,"column":9}},"179":{"start":{"line":648,"column":12},"end":{"line":648,"column":37}},"180":{"start":{"line":650,"column":8},"end":{"line":650,"column":52}},"181":{"start":{"line":651,"column":8},"end":{"line":651,"column":52}},"182":{"start":{"line":652,"column":8},"end":{"line":652,"column":147}},"183":{"start":{"line":652,"column":39},"end":{"line":652,"column":105}},"184":{"start":{"line":652,"column":122},"end":{"line":652,"column":145}},"185":{"start":{"line":653,"column":8},"end":{"line":657,"column":9}},"186":{"start":{"line":654,"column":12},"end":{"line":654,"column":29}},"187":{"start":{"line":656,"column":12},"end":{"line":656,"column":32}},"188":{"start":{"line":658,"column":8},"end":{"line":661,"column":13}},"189":{"start":{"line":658,"column":118},"end":{"line":661,"column":9}},"190":{"start":{"line":671,"column":8},"end":{"line":671,"column":98}},"191":{"start":{"line":681,"column":8},"end":{"line":683,"column":39}},"192":{"start":{"line":683,"column":26},"end":{"line":683,"column":37}},"193":{"start":{"line":693,"column":8},"end":{"line":695,"column":39}},"194":{"start":{"line":695,"column":26},"end":{"line":695,"column":37}},"195":{"start":{"line":704,"column":8},"end":{"line":704,"column":174}},"196":{"start":{"line":713,"column":8},"end":{"line":720,"column":11}},"197":{"start":{"line":714,"column":12},"end":{"line":718,"column":13}},"198":{"start":{"line":715,"column":16},"end":{"line":717,"column":78}},"199":{"start":{"line":717,"column":44},"end":{"line":717,"column":76}},"200":{"start":{"line":719,"column":12},"end":{"line":719,"column":44}},"201":{"start":{"line":729,"column":8},"end":{"line":729,"column":128}},"202":{"start":{"line":729,"column":102},"end":{"line":729,"column":126}},"203":{"start":{"line":738,"column":8},"end":{"line":738,"column":87}},"204":{"start":{"line":746,"column":8},"end":{"line":746,"column":124}},"205":{"start":{"line":746,"column":94},"end":{"line":746,"column":122}},"206":{"start":{"line":757,"column":8},"end":{"line":757,"column":135}},"207":{"start":{"line":757,"column":105},"end":{"line":757,"column":133}},"208":{"start":{"line":766,"column":8},"end":{"line":768,"column":9}},"209":{"start":{"line":767,"column":12},"end":{"line":767,"column":93}},"210":{"start":{"line":769,"column":8},"end":{"line":772,"column":78}},"211":{"start":{"line":772,"column":36},"end":{"line":772,"column":76}},"212":{"start":{"line":781,"column":8},"end":{"line":784,"column":76}},"213":{"start":{"line":784,"column":36},"end":{"line":784,"column":74}},"214":{"start":{"line":794,"column":8},"end":{"line":794,"column":151}},"215":{"start":{"line":794,"column":123},"end":{"line":794,"column":149}},"216":{"start":{"line":807,"column":8},"end":{"line":830,"column":9}},"217":{"start":{"line":808,"column":12},"end":{"line":829,"column":15}},"218":{"start":{"line":809,"column":16},"end":{"line":809,"column":30}},"219":{"start":{"line":810,"column":16},"end":{"line":827,"column":18}},"220":{"start":{"line":811,"column":20},"end":{"line":826,"column":37}},"221":{"start":{"line":816,"column":24},"end":{"line":818,"column":25}},"222":{"start":{"line":817,"column":28},"end":{"line":817,"column":255}},"223":{"start":{"line":817,"column":127},"end":{"line":817,"column":153}},"224":{"start":{"line":817,"column":224},"end":{"line":817,"column":250}},"225":{"start":{"line":819,"column":24},"end":{"line":819,"column":49}},"226":{"start":{"line":820,"column":24},"end":{"line":820,"column":178}},"227":{"start":{"line":820,"column":67},"end":{"line":820,"column":93}},"228":{"start":{"line":820,"column":148},"end":{"line":820,"column":174}},"229":{"start":{"line":821,"column":24},"end":{"line":823,"column":25}},"230":{"start":{"line":822,"column":28},"end":{"line":822,"column":49}},"231":{"start":{"line":824,"column":24},"end":{"line":824,"column":139}},"232":{"start":{"line":825,"column":24},"end":{"line":825,"column":112}},"233":{"start":{"line":828,"column":16},"end":{"line":828,"column":35}},"234":{"start":{"line":831,"column":8},"end":{"line":843,"column":12}},"235":{"start":{"line":836,"column":30},"end":{"line":843,"column":10}},"236":{"start":{"line":837,"column":12},"end":{"line":842,"column":13}},"237":{"start":{"line":838,"column":16},"end":{"line":838,"column":50}},"238":{"start":{"line":840,"column":16},"end":{"line":840,"column":112}},"239":{"start":{"line":841,"column":16},"end":{"line":841,"column":28}},"240":{"start":{"line":852,"column":8},"end":{"line":852,"column":165}},"241":{"start":{"line":852,"column":110},"end":{"line":852,"column":163}},"242":{"start":{"line":852,"column":136},"end":{"line":852,"column":162}},"243":{"start":{"line":870,"column":8},"end":{"line":880,"column":9}},"244":{"start":{"line":871,"column":12},"end":{"line":873,"column":14}},"245":{"start":{"line":874,"column":15},"end":{"line":880,"column":9}},"246":{"start":{"line":875,"column":12},"end":{"line":877,"column":14}},"247":{"start":{"line":878,"column":15},"end":{"line":880,"column":9}},"248":{"start":{"line":879,"column":12},"end":{"line":879,"column":74}},"249":{"start":{"line":881,"column":8},"end":{"line":883,"column":9}},"250":{"start":{"line":882,"column":12},"end":{"line":882,"column":75}},"251":{"start":{"line":884,"column":8},"end":{"line":886,"column":9}},"252":{"start":{"line":885,"column":12},"end":{"line":885,"column":120}},"253":{"start":{"line":887,"column":8},"end":{"line":887,"column":157}},"254":{"start":{"line":887,"column":129},"end":{"line":887,"column":155}},"255":{"start":{"line":901,"column":8},"end":{"line":911,"column":9}},"256":{"start":{"line":902,"column":12},"end":{"line":904,"column":14}},"257":{"start":{"line":905,"column":15},"end":{"line":911,"column":9}},"258":{"start":{"line":906,"column":12},"end":{"line":908,"column":14}},"259":{"start":{"line":909,"column":15},"end":{"line":911,"column":9}},"260":{"start":{"line":910,"column":12},"end":{"line":910,"column":74}},"261":{"start":{"line":912,"column":8},"end":{"line":914,"column":9}},"262":{"start":{"line":913,"column":12},"end":{"line":913,"column":68}},"263":{"start":{"line":915,"column":8},"end":{"line":917,"column":9}},"264":{"start":{"line":916,"column":12},"end":{"line":916,"column":120}},"265":{"start":{"line":918,"column":8},"end":{"line":918,"column":162}},"266":{"start":{"line":918,"column":134},"end":{"line":918,"column":160}},"267":{"start":{"line":928,"column":8},"end":{"line":928,"column":101}},"268":{"start":{"line":938,"column":8},"end":{"line":938,"column":104}},"269":{"start":{"line":950,"column":8},"end":{"line":952,"column":9}},"270":{"start":{"line":951,"column":12},"end":{"line":951,"column":52}},"271":{"start":{"line":953,"column":8},"end":{"line":955,"column":70}},"272":{"start":{"line":955,"column":27},"end":{"line":955,"column":68}},"273":{"start":{"line":955,"column":47},"end":{"line":955,"column":67}},"274":{"start":{"line":967,"column":8},"end":{"line":969,"column":9}},"275":{"start":{"line":968,"column":12},"end":{"line":968,"column":52}},"276":{"start":{"line":970,"column":8},"end":{"line":970,"column":146}},"277":{"start":{"line":982,"column":8},"end":{"line":984,"column":9}},"278":{"start":{"line":983,"column":12},"end":{"line":983,"column":52}},"279":{"start":{"line":985,"column":8},"end":{"line":985,"column":149}},"280":{"start":{"line":995,"column":8},"end":{"line":995,"column":118}},"281":{"start":{"line":1005,"column":8},"end":{"line":1005,"column":108}},"282":{"start":{"line":1015,"column":8},"end":{"line":1017,"column":9}},"283":{"start":{"line":1016,"column":12},"end":{"line":1016,"column":37}},"284":{"start":{"line":1018,"column":8},"end":{"line":1020,"column":9}},"285":{"start":{"line":1019,"column":12},"end":{"line":1019,"column":64}},"286":{"start":{"line":1022,"column":8},"end":{"line":1022,"column":76}},"287":{"start":{"line":1023,"column":8},"end":{"line":1023,"column":96}},"288":{"start":{"line":1023,"column":60},"end":{"line":1023,"column":94}},"289":{"start":{"line":1024,"column":8},"end":{"line":1026,"column":9}},"290":{"start":{"line":1025,"column":12},"end":{"line":1025,"column":100}},"291":{"start":{"line":1028,"column":8},"end":{"line":1032,"column":9}},"292":{"start":{"line":1029,"column":12},"end":{"line":1031,"column":70}},"293":{"start":{"line":1031,"column":26},"end":{"line":1031,"column":68}},"294":{"start":{"line":1033,"column":8},"end":{"line":1035,"column":11}},"295":{"start":{"line":1048,"column":8},"end":{"line":1050,"column":9}},"296":{"start":{"line":1049,"column":12},"end":{"line":1049,"column":59}},"297":{"start":{"line":1049,"column":30},"end":{"line":1049,"column":58}},"298":{"start":{"line":1051,"column":8},"end":{"line":1103,"column":11}},"299":{"start":{"line":1052,"column":12},"end":{"line":1052,"column":30}},"300":{"start":{"line":1053,"column":12},"end":{"line":1053,"column":28}},"301":{"start":{"line":1054,"column":12},"end":{"line":1054,"column":29}},"302":{"start":{"line":1055,"column":12},"end":{"line":1074,"column":14}},"303":{"start":{"line":1056,"column":16},"end":{"line":1056,"column":107}},"304":{"start":{"line":1057,"column":16},"end":{"line":1073,"column":17}},"305":{"start":{"line":1058,"column":20},"end":{"line":1058,"column":49}},"306":{"start":{"line":1059,"column":20},"end":{"line":1066,"column":37}},"307":{"start":{"line":1060,"column":24},"end":{"line":1062,"column":25}},"308":{"start":{"line":1061,"column":28},"end":{"line":1061,"column":52}},"309":{"start":{"line":1063,"column":24},"end":{"line":1065,"column":33}},"310":{"start":{"line":1064,"column":28},"end":{"line":1064,"column":44}},"311":{"start":{"line":1067,"column":23},"end":{"line":1073,"column":17}},"312":{"start":{"line":1068,"column":20},"end":{"line":1068,"column":44}},"313":{"start":{"line":1070,"column":20},"end":{"line":1072,"column":28}},"314":{"start":{"line":1071,"column":24},"end":{"line":1071,"column":40}},"315":{"start":{"line":1075,"column":12},"end":{"line":1100,"column":14}},"316":{"start":{"line":1076,"column":16},"end":{"line":1099,"column":33}},"317":{"start":{"line":1077,"column":20},"end":{"line":1080,"column":21}},"318":{"start":{"line":1078,"column":24},"end":{"line":1078,"column":36}},"319":{"start":{"line":1079,"column":24},"end":{"line":1079,"column":31}},"320":{"start":{"line":1081,"column":20},"end":{"line":1093,"column":21}},"321":{"start":{"line":1082,"column":24},"end":{"line":1084,"column":25}},"322":{"start":{"line":1083,"column":28},"end":{"line":1083,"column":34}},"323":{"start":{"line":1085,"column":24},"end":{"line":1088,"column":25}},"324":{"start":{"line":1086,"column":28},"end":{"line":1086,"column":40}},"325":{"start":{"line":1087,"column":28},"end":{"line":1087,"column":35}},"326":{"start":{"line":1089,"column":24},"end":{"line":1091,"column":25}},"327":{"start":{"line":1090,"column":28},"end":{"line":1090,"column":54}},"328":{"start":{"line":1092,"column":24},"end":{"line":1092,"column":32}},"329":{"start":{"line":1094,"column":20},"end":{"line":1097,"column":21}},"330":{"start":{"line":1095,"column":24},"end":{"line":1095,"column":36}},"331":{"start":{"line":1096,"column":24},"end":{"line":1096,"column":31}},"332":{"start":{"line":1098,"column":20},"end":{"line":1098,"column":108}},"333":{"start":{"line":1101,"column":12},"end":{"line":1101,"column":31}},"334":{"start":{"line":1102,"column":12},"end":{"line":1102,"column":28}},"335":{"start":{"line":1112,"column":8},"end":{"line":1112,"column":88}},"336":{"start":{"line":1121,"column":8},"end":{"line":1121,"column":45}},"337":{"start":{"line":1122,"column":8},"end":{"line":1122,"column":195}},"338":{"start":{"line":1122,"column":118},"end":{"line":1122,"column":193}},"339":{"start":{"line":1122,"column":152},"end":{"line":1122,"column":192}},"340":{"start":{"line":1136,"column":8},"end":{"line":1140,"column":11}},"341":{"start":{"line":1150,"column":8},"end":{"line":1150,"column":112}},"342":{"start":{"line":1160,"column":8},"end":{"line":1160,"column":115}},"343":{"start":{"line":1169,"column":8},"end":{"line":1169,"column":159}},"344":{"start":{"line":1169,"column":108},"end":{"line":1169,"column":157}},"345":{"start":{"line":1169,"column":132},"end":{"line":1169,"column":156}},"346":{"start":{"line":1180,"column":8},"end":{"line":1182,"column":9}},"347":{"start":{"line":1181,"column":12},"end":{"line":1181,"column":145}},"348":{"start":{"line":1183,"column":8},"end":{"line":1185,"column":11}},"349":{"start":{"line":1195,"column":8},"end":{"line":1195,"column":97}},"350":{"start":{"line":1206,"column":8},"end":{"line":1206,"column":28}},"351":{"start":{"line":1207,"column":8},"end":{"line":1211,"column":51}},"352":{"start":{"line":1211,"column":27},"end":{"line":1211,"column":49}},"353":{"start":{"line":1230,"column":8},"end":{"line":1240,"column":51}},"354":{"start":{"line":1240,"column":27},"end":{"line":1240,"column":49}},"355":{"start":{"line":1249,"column":8},"end":{"line":1249,"column":147}},"356":{"start":{"line":1249,"column":102},"end":{"line":1249,"column":145}},"357":{"start":{"line":1249,"column":120},"end":{"line":1249,"column":144}},"358":{"start":{"line":1265,"column":8},"end":{"line":1271,"column":11}},"359":{"start":{"line":1282,"column":8},"end":{"line":1282,"column":112}},"360":{"start":{"line":1293,"column":8},"end":{"line":1293,"column":115}},"361":{"start":{"line":1303,"column":8},"end":{"line":1305,"column":11}},"362":{"start":{"line":1315,"column":8},"end":{"line":1315,"column":100}},"363":{"start":{"line":1324,"column":8},"end":{"line":1324,"column":85}},"364":{"start":{"line":1333,"column":8},"end":{"line":1333,"column":97}},"365":{"start":{"line":1342,"column":8},"end":{"line":1342,"column":102}},"366":{"start":{"line":1350,"column":8},"end":{"line":1350,"column":88}},"367":{"start":{"line":1360,"column":8},"end":{"line":1362,"column":11}},"368":{"start":{"line":1371,"column":8},"end":{"line":1371,"column":103}},"369":{"start":{"line":1381,"column":8},"end":{"line":1381,"column":102}},"370":{"start":{"line":1391,"column":8},"end":{"line":1391,"column":105}},"371":{"start":{"line":1400,"column":8},"end":{"line":1400,"column":88}},"372":{"start":{"line":1409,"column":8},"end":{"line":1411,"column":11}},"373":{"start":{"line":1419,"column":8},"end":{"line":1419,"column":95}},"374":{"start":{"line":1428,"column":8},"end":{"line":1430,"column":9}},"375":{"start":{"line":1429,"column":12},"end":{"line":1429,"column":78}},"376":{"start":{"line":1431,"column":8},"end":{"line":1441,"column":11}},"377":{"start":{"line":1432,"column":12},"end":{"line":1440,"column":13}},"378":{"start":{"line":1433,"column":16},"end":{"line":1433,"column":82}},"379":{"start":{"line":1434,"column":19},"end":{"line":1440,"column":13}},"380":{"start":{"line":1435,"column":16},"end":{"line":1435,"column":57}},"381":{"start":{"line":1436,"column":19},"end":{"line":1440,"column":13}},"382":{"start":{"line":1437,"column":16},"end":{"line":1437,"column":55}},"383":{"start":{"line":1439,"column":16},"end":{"line":1439,"column":31}},"384":{"start":{"line":1450,"column":8},"end":{"line":1452,"column":9}},"385":{"start":{"line":1451,"column":12},"end":{"line":1451,"column":78}},"386":{"start":{"line":1453,"column":8},"end":{"line":1453,"column":122}},"387":{"start":{"line":1453,"column":98},"end":{"line":1453,"column":120}},"388":{"start":{"line":1464,"column":8},"end":{"line":1466,"column":9}},"389":{"start":{"line":1465,"column":12},"end":{"line":1465,"column":78}},"390":{"start":{"line":1467,"column":8},"end":{"line":1471,"column":75}},"391":{"start":{"line":1471,"column":28},"end":{"line":1471,"column":73}},"392":{"start":{"line":1471,"column":50},"end":{"line":1471,"column":72}},"393":{"start":{"line":1480,"column":8},"end":{"line":1482,"column":9}},"394":{"start":{"line":1481,"column":12},"end":{"line":1481,"column":78}},"395":{"start":{"line":1483,"column":8},"end":{"line":1483,"column":197}},"396":{"start":{"line":1483,"column":110},"end":{"line":1483,"column":195}},"397":{"start":{"line":1483,"column":136},"end":{"line":1483,"column":194}},"398":{"start":{"line":1492,"column":8},"end":{"line":1494,"column":9}},"399":{"start":{"line":1493,"column":12},"end":{"line":1493,"column":78}},"400":{"start":{"line":1495,"column":8},"end":{"line":1495,"column":89}},"401":{"start":{"line":1505,"column":8},"end":{"line":1507,"column":9}},"402":{"start":{"line":1506,"column":12},"end":{"line":1506,"column":78}},"403":{"start":{"line":1508,"column":8},"end":{"line":1508,"column":97}},"404":{"start":{"line":1519,"column":8},"end":{"line":1521,"column":9}},"405":{"start":{"line":1520,"column":12},"end":{"line":1520,"column":78}},"406":{"start":{"line":1522,"column":8},"end":{"line":1525,"column":80}},"407":{"start":{"line":1525,"column":29},"end":{"line":1525,"column":78}},"408":{"start":{"line":1525,"column":53},"end":{"line":1525,"column":77}},"409":{"start":{"line":1535,"column":8},"end":{"line":1537,"column":9}},"410":{"start":{"line":1536,"column":12},"end":{"line":1536,"column":78}},"411":{"start":{"line":1538,"column":8},"end":{"line":1538,"column":142}},"412":{"start":{"line":1538,"column":116},"end":{"line":1538,"column":140}},"413":{"start":{"line":1547,"column":8},"end":{"line":1549,"column":9}},"414":{"start":{"line":1548,"column":12},"end":{"line":1548,"column":78}},"415":{"start":{"line":1550,"column":8},"end":{"line":1550,"column":147}},"416":{"start":{"line":1550,"column":104},"end":{"line":1550,"column":145}},"417":{"start":{"line":1550,"column":124},"end":{"line":1550,"column":144}},"418":{"start":{"line":1559,"column":8},"end":{"line":1561,"column":9}},"419":{"start":{"line":1560,"column":12},"end":{"line":1560,"column":78}},"420":{"start":{"line":1562,"column":8},"end":{"line":1562,"column":117}},"421":{"start":{"line":1562,"column":95},"end":{"line":1562,"column":115}},"422":{"start":{"line":1598,"column":8},"end":{"line":1616,"column":12}},"423":{"start":{"line":1613,"column":30},"end":{"line":1616,"column":9}},"424":{"start":{"line":1615,"column":54},"end":{"line":1615,"column":105}},"425":{"start":{"line":1615,"column":78},"end":{"line":1615,"column":104}},"426":{"start":{"line":1653,"column":8},"end":{"line":1672,"column":12}},"427":{"start":{"line":1669,"column":30},"end":{"line":1672,"column":9}},"428":{"start":{"line":1671,"column":54},"end":{"line":1671,"column":105}},"429":{"start":{"line":1671,"column":78},"end":{"line":1671,"column":104}},"430":{"start":{"line":1676,"column":0},"end":{"line":1676,"column":24}}},"branchMap":{"1":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":8},"end":{"line":107,"column":8}},{"start":{"line":107,"column":8},"end":{"line":107,"column":8}}]},"2":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":8},"end":{"line":112,"column":8}},{"start":{"line":112,"column":8},"end":{"line":112,"column":8}}]},"3":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":8},"end":{"line":115,"column":8}},{"start":{"line":115,"column":8},"end":{"line":115,"column":8}}]},"4":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":8},"end":{"line":122,"column":8}},{"start":{"line":122,"column":8},"end":{"line":122,"column":8}}]},"5":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":8},"end":{"line":125,"column":8}},{"start":{"line":125,"column":8},"end":{"line":125,"column":8}}]},"6":{"line":134,"type":"cond-expr","locations":[{"start":{"line":134,"column":43},"end":{"line":134,"column":72}},{"start":{"line":134,"column":75},"end":{"line":134,"column":79}}]},"7":{"line":161,"type":"cond-expr","locations":[{"start":{"line":161,"column":32},"end":{"line":161,"column":59}},{"start":{"line":161,"column":62},"end":{"line":161,"column":63}}]},"8":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":12},"end":{"line":170,"column":12}},{"start":{"line":170,"column":12},"end":{"line":170,"column":12}}]},"9":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":12},"end":{"line":173,"column":12}},{"start":{"line":173,"column":12},"end":{"line":173,"column":12}}]},"10":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":12},"end":{"line":176,"column":12}},{"start":{"line":176,"column":12},"end":{"line":176,"column":12}}]},"11":{"line":179,"type":"cond-expr","locations":[{"start":{"line":179,"column":103},"end":{"line":179,"column":108}},{"start":{"line":179,"column":111},"end":{"line":179,"column":117}}]},"12":{"line":202,"type":"if","locations":[{"start":{"line":202,"column":8},"end":{"line":202,"column":8}},{"start":{"line":202,"column":8},"end":{"line":202,"column":8}}]},"13":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":8},"end":{"line":231,"column":8}},{"start":{"line":231,"column":8},"end":{"line":231,"column":8}}]},"14":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":8},"end":{"line":234,"column":8}},{"start":{"line":234,"column":8},"end":{"line":234,"column":8}}]},"15":{"line":234,"type":"binary-expr","locations":[{"start":{"line":234,"column":11},"end":{"line":234,"column":24}},{"start":{"line":234,"column":28},"end":{"line":234,"column":107}}]},"16":{"line":237,"type":"binary-expr","locations":[{"start":{"line":237,"column":24},"end":{"line":237,"column":75}},{"start":{"line":237,"column":79},"end":{"line":237,"column":80}}]},"17":{"line":238,"type":"binary-expr","locations":[{"start":{"line":238,"column":22},"end":{"line":238,"column":53}},{"start":{"line":238,"column":57},"end":{"line":238,"column":61}}]},"18":{"line":239,"type":"binary-expr","locations":[{"start":{"line":239,"column":24},"end":{"line":239,"column":33}},{"start":{"line":239,"column":37},"end":{"line":239,"column":41}}]},"19":{"line":243,"type":"binary-expr","locations":[{"start":{"line":243,"column":18},"end":{"line":243,"column":25}},{"start":{"line":243,"column":29},"end":{"line":243,"column":31}}]},"20":{"line":244,"type":"if","locations":[{"start":{"line":244,"column":8},"end":{"line":244,"column":8}},{"start":{"line":244,"column":8},"end":{"line":244,"column":8}}]},"21":{"line":247,"type":"binary-expr","locations":[{"start":{"line":247,"column":42},"end":{"line":247,"column":73}},{"start":{"line":247,"column":77},"end":{"line":247,"column":83}}]},"22":{"line":256,"type":"if","locations":[{"start":{"line":256,"column":8},"end":{"line":256,"column":8}},{"start":{"line":256,"column":8},"end":{"line":256,"column":8}}]},"23":{"line":259,"type":"binary-expr","locations":[{"start":{"line":259,"column":24},"end":{"line":259,"column":75}},{"start":{"line":259,"column":79},"end":{"line":259,"column":80}}]},"24":{"line":260,"type":"binary-expr","locations":[{"start":{"line":260,"column":22},"end":{"line":260,"column":53}},{"start":{"line":260,"column":57},"end":{"line":260,"column":61}}]},"25":{"line":265,"type":"binary-expr","locations":[{"start":{"line":265,"column":36},"end":{"line":265,"column":67}},{"start":{"line":265,"column":71},"end":{"line":265,"column":77}}]},"26":{"line":281,"type":"if","locations":[{"start":{"line":281,"column":8},"end":{"line":281,"column":8}},{"start":{"line":281,"column":8},"end":{"line":281,"column":8}}]},"27":{"line":281,"type":"binary-expr","locations":[{"start":{"line":281,"column":11},"end":{"line":281,"column":29}},{"start":{"line":281,"column":33},"end":{"line":281,"column":59}}]},"28":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":8},"end":{"line":285,"column":8}},{"start":{"line":285,"column":8},"end":{"line":285,"column":8}}]},"29":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8}},{"start":{"line":288,"column":8},"end":{"line":288,"column":8}}]},"30":{"line":299,"type":"cond-expr","locations":[{"start":{"line":299,"column":49},"end":{"line":299,"column":121}},{"start":{"line":299,"column":124},"end":{"line":299,"column":196}}]},"31":{"line":299,"type":"binary-expr","locations":[{"start":{"line":299,"column":124},"end":{"line":299,"column":159}},{"start":{"line":299,"column":163},"end":{"line":299,"column":196}}]},"32":{"line":311,"type":"if","locations":[{"start":{"line":311,"column":8},"end":{"line":311,"column":8}},{"start":{"line":311,"column":8},"end":{"line":311,"column":8}}]},"33":{"line":334,"type":"if","locations":[{"start":{"line":334,"column":8},"end":{"line":334,"column":8}},{"start":{"line":334,"column":8},"end":{"line":334,"column":8}}]},"34":{"line":346,"type":"if","locations":[{"start":{"line":346,"column":12},"end":{"line":346,"column":12}},{"start":{"line":346,"column":12},"end":{"line":346,"column":12}}]},"35":{"line":363,"type":"if","locations":[{"start":{"line":363,"column":8},"end":{"line":363,"column":8}},{"start":{"line":363,"column":8},"end":{"line":363,"column":8}}]},"36":{"line":366,"type":"if","locations":[{"start":{"line":366,"column":8},"end":{"line":366,"column":8}},{"start":{"line":366,"column":8},"end":{"line":366,"column":8}}]},"37":{"line":371,"type":"binary-expr","locations":[{"start":{"line":371,"column":45},"end":{"line":371,"column":71}},{"start":{"line":371,"column":75},"end":{"line":371,"column":95}},{"start":{"line":371,"column":99},"end":{"line":371,"column":119}},{"start":{"line":371,"column":123},"end":{"line":371,"column":144}}]},"38":{"line":372,"type":"if","locations":[{"start":{"line":372,"column":8},"end":{"line":372,"column":8}},{"start":{"line":372,"column":8},"end":{"line":372,"column":8}}]},"39":{"line":448,"type":"binary-expr","locations":[{"start":{"line":448,"column":18},"end":{"line":448,"column":25}},{"start":{"line":448,"column":29},"end":{"line":448,"column":31}}]},"40":{"line":473,"type":"cond-expr","locations":[{"start":{"line":473,"column":58},"end":{"line":473,"column":99}},{"start":{"line":473,"column":102},"end":{"line":473,"column":130}}]},"41":{"line":498,"type":"cond-expr","locations":[{"start":{"line":498,"column":60},"end":{"line":498,"column":101}},{"start":{"line":498,"column":104},"end":{"line":498,"column":132}}]},"42":{"line":519,"type":"if","locations":[{"start":{"line":519,"column":8},"end":{"line":519,"column":8}},{"start":{"line":519,"column":8},"end":{"line":519,"column":8}}]},"43":{"line":519,"type":"binary-expr","locations":[{"start":{"line":519,"column":11},"end":{"line":519,"column":27}},{"start":{"line":519,"column":31},"end":{"line":519,"column":44}},{"start":{"line":519,"column":48},"end":{"line":519,"column":63}}]},"44":{"line":522,"type":"if","locations":[{"start":{"line":522,"column":8},"end":{"line":522,"column":8}},{"start":{"line":522,"column":8},"end":{"line":522,"column":8}}]},"45":{"line":522,"type":"binary-expr","locations":[{"start":{"line":522,"column":11},"end":{"line":522,"column":26}},{"start":{"line":522,"column":31},"end":{"line":522,"column":125}}]},"46":{"line":522,"type":"cond-expr","locations":[{"start":{"line":522,"column":71},"end":{"line":522,"column":94}},{"start":{"line":522,"column":97},"end":{"line":522,"column":125}}]},"47":{"line":525,"type":"cond-expr","locations":[{"start":{"line":525,"column":111},"end":{"line":525,"column":123}},{"start":{"line":525,"column":126},"end":{"line":525,"column":128}}]},"48":{"line":545,"type":"cond-expr","locations":[{"start":{"line":545,"column":109},"end":{"line":545,"column":121}},{"start":{"line":545,"column":124},"end":{"line":545,"column":126}}]},"49":{"line":555,"type":"cond-expr","locations":[{"start":{"line":555,"column":61},"end":{"line":555,"column":102}},{"start":{"line":555,"column":105},"end":{"line":555,"column":133}}]},"50":{"line":639,"type":"if","locations":[{"start":{"line":639,"column":8},"end":{"line":639,"column":8}},{"start":{"line":639,"column":8},"end":{"line":639,"column":8}}]},"51":{"line":644,"type":"if","locations":[{"start":{"line":644,"column":8},"end":{"line":644,"column":8}},{"start":{"line":644,"column":8},"end":{"line":644,"column":8}}]},"52":{"line":647,"type":"if","locations":[{"start":{"line":647,"column":8},"end":{"line":647,"column":8}},{"start":{"line":647,"column":8},"end":{"line":647,"column":8}}]},"53":{"line":652,"type":"binary-expr","locations":[{"start":{"line":652,"column":39},"end":{"line":652,"column":59}},{"start":{"line":652,"column":63},"end":{"line":652,"column":83}},{"start":{"line":652,"column":87},"end":{"line":652,"column":105}}]},"54":{"line":653,"type":"if","locations":[{"start":{"line":653,"column":8},"end":{"line":653,"column":8}},{"start":{"line":653,"column":8},"end":{"line":653,"column":8}}]},"55":{"line":704,"type":"cond-expr","locations":[{"start":{"line":704,"column":25},"end":{"line":704,"column":105}},{"start":{"line":704,"column":108},"end":{"line":704,"column":173}}]},"56":{"line":714,"type":"if","locations":[{"start":{"line":714,"column":12},"end":{"line":714,"column":12}},{"start":{"line":714,"column":12},"end":{"line":714,"column":12}}]},"57":{"line":714,"type":"binary-expr","locations":[{"start":{"line":714,"column":15},"end":{"line":714,"column":54}},{"start":{"line":714,"column":58},"end":{"line":714,"column":140}}]},"58":{"line":766,"type":"if","locations":[{"start":{"line":766,"column":8},"end":{"line":766,"column":8}},{"start":{"line":766,"column":8},"end":{"line":766,"column":8}}]},"59":{"line":807,"type":"if","locations":[{"start":{"line":807,"column":8},"end":{"line":807,"column":8}},{"start":{"line":807,"column":8},"end":{"line":807,"column":8}}]},"60":{"line":807,"type":"binary-expr","locations":[{"start":{"line":807,"column":11},"end":{"line":807,"column":16}},{"start":{"line":807,"column":20},"end":{"line":807,"column":31}}]},"61":{"line":813,"type":"binary-expr","locations":[{"start":{"line":813,"column":32},"end":{"line":813,"column":39}},{"start":{"line":813,"column":43},"end":{"line":813,"column":52}}]},"62":{"line":814,"type":"binary-expr","locations":[{"start":{"line":814,"column":31},"end":{"line":814,"column":37}},{"start":{"line":814,"column":41},"end":{"line":814,"column":50}}]},"63":{"line":816,"type":"if","locations":[{"start":{"line":816,"column":24},"end":{"line":816,"column":24}},{"start":{"line":816,"column":24},"end":{"line":816,"column":24}}]},"64":{"line":817,"type":"cond-expr","locations":[{"start":{"line":817,"column":53},"end":{"line":817,"column":167}},{"start":{"line":817,"column":170},"end":{"line":817,"column":252}}]},"65":{"line":820,"type":"cond-expr","locations":[{"start":{"line":820,"column":41},"end":{"line":820,"column":107}},{"start":{"line":820,"column":110},"end":{"line":820,"column":176}}]},"66":{"line":821,"type":"if","locations":[{"start":{"line":821,"column":24},"end":{"line":821,"column":24}},{"start":{"line":821,"column":24},"end":{"line":821,"column":24}}]},"67":{"line":825,"type":"binary-expr","locations":[{"start":{"line":825,"column":29},"end":{"line":825,"column":36}},{"start":{"line":825,"column":40},"end":{"line":825,"column":47}},{"start":{"line":825,"column":52},"end":{"line":825,"column":84}}]},"68":{"line":825,"type":"binary-expr","locations":[{"start":{"line":825,"column":86},"end":{"line":825,"column":92}},{"start":{"line":825,"column":96},"end":{"line":825,"column":110}}]},"69":{"line":832,"type":"binary-expr","locations":[{"start":{"line":832,"column":19},"end":{"line":832,"column":24}},{"start":{"line":832,"column":28},"end":{"line":832,"column":30}}]},"70":{"line":870,"type":"if","locations":[{"start":{"line":870,"column":8},"end":{"line":870,"column":8}},{"start":{"line":870,"column":8},"end":{"line":870,"column":8}}]},"71":{"line":874,"type":"if","locations":[{"start":{"line":874,"column":15},"end":{"line":874,"column":15}},{"start":{"line":874,"column":15},"end":{"line":874,"column":15}}]},"72":{"line":874,"type":"binary-expr","locations":[{"start":{"line":874,"column":18},"end":{"line":874,"column":45}},{"start":{"line":874,"column":49},"end":{"line":874,"column":64}}]},"73":{"line":876,"type":"cond-expr","locations":[{"start":{"line":876,"column":35},"end":{"line":876,"column":47}},{"start":{"line":876,"column":50},"end":{"line":876,"column":52}}]},"74":{"line":878,"type":"if","locations":[{"start":{"line":878,"column":15},"end":{"line":878,"column":15}},{"start":{"line":878,"column":15},"end":{"line":878,"column":15}}]},"75":{"line":879,"type":"cond-expr","locations":[{"start":{"line":879,"column":48},"end":{"line":879,"column":68}},{"start":{"line":879,"column":71},"end":{"line":879,"column":73}}]},"76":{"line":881,"type":"if","locations":[{"start":{"line":881,"column":8},"end":{"line":881,"column":8}},{"start":{"line":881,"column":8},"end":{"line":881,"column":8}}]},"77":{"line":881,"type":"binary-expr","locations":[{"start":{"line":881,"column":11},"end":{"line":881,"column":27}},{"start":{"line":881,"column":31},"end":{"line":881,"column":36}},{"start":{"line":881,"column":40},"end":{"line":881,"column":54}}]},"78":{"line":884,"type":"if","locations":[{"start":{"line":884,"column":8},"end":{"line":884,"column":8}},{"start":{"line":884,"column":8},"end":{"line":884,"column":8}}]},"79":{"line":884,"type":"cond-expr","locations":[{"start":{"line":884,"column":51},"end":{"line":884,"column":74}},{"start":{"line":884,"column":77},"end":{"line":884,"column":105}}]},"80":{"line":901,"type":"if","locations":[{"start":{"line":901,"column":8},"end":{"line":901,"column":8}},{"start":{"line":901,"column":8},"end":{"line":901,"column":8}}]},"81":{"line":905,"type":"if","locations":[{"start":{"line":905,"column":15},"end":{"line":905,"column":15}},{"start":{"line":905,"column":15},"end":{"line":905,"column":15}}]},"82":{"line":905,"type":"binary-expr","locations":[{"start":{"line":905,"column":18},"end":{"line":905,"column":45}},{"start":{"line":905,"column":49},"end":{"line":905,"column":64}}]},"83":{"line":907,"type":"cond-expr","locations":[{"start":{"line":907,"column":35},"end":{"line":907,"column":47}},{"start":{"line":907,"column":50},"end":{"line":907,"column":52}}]},"84":{"line":909,"type":"if","locations":[{"start":{"line":909,"column":15},"end":{"line":909,"column":15}},{"start":{"line":909,"column":15},"end":{"line":909,"column":15}}]},"85":{"line":910,"type":"cond-expr","locations":[{"start":{"line":910,"column":48},"end":{"line":910,"column":68}},{"start":{"line":910,"column":71},"end":{"line":910,"column":73}}]},"86":{"line":912,"type":"if","locations":[{"start":{"line":912,"column":8},"end":{"line":912,"column":8}},{"start":{"line":912,"column":8},"end":{"line":912,"column":8}}]},"87":{"line":912,"type":"binary-expr","locations":[{"start":{"line":912,"column":11},"end":{"line":912,"column":27}},{"start":{"line":912,"column":31},"end":{"line":912,"column":45}}]},"88":{"line":915,"type":"if","locations":[{"start":{"line":915,"column":8},"end":{"line":915,"column":8}},{"start":{"line":915,"column":8},"end":{"line":915,"column":8}}]},"89":{"line":915,"type":"cond-expr","locations":[{"start":{"line":915,"column":51},"end":{"line":915,"column":74}},{"start":{"line":915,"column":77},"end":{"line":915,"column":105}}]},"90":{"line":950,"type":"if","locations":[{"start":{"line":950,"column":8},"end":{"line":950,"column":8}},{"start":{"line":950,"column":8},"end":{"line":950,"column":8}}]},"91":{"line":954,"type":"binary-expr","locations":[{"start":{"line":954,"column":19},"end":{"line":954,"column":24}},{"start":{"line":954,"column":28},"end":{"line":954,"column":31}}]},"92":{"line":967,"type":"if","locations":[{"start":{"line":967,"column":8},"end":{"line":967,"column":8}},{"start":{"line":967,"column":8},"end":{"line":967,"column":8}}]},"93":{"line":970,"type":"binary-expr","locations":[{"start":{"line":970,"column":122},"end":{"line":970,"column":128}},{"start":{"line":970,"column":132},"end":{"line":970,"column":137}}]},"94":{"line":982,"type":"if","locations":[{"start":{"line":982,"column":8},"end":{"line":982,"column":8}},{"start":{"line":982,"column":8},"end":{"line":982,"column":8}}]},"95":{"line":985,"type":"binary-expr","locations":[{"start":{"line":985,"column":125},"end":{"line":985,"column":131}},{"start":{"line":985,"column":135},"end":{"line":985,"column":140}}]},"96":{"line":1015,"type":"if","locations":[{"start":{"line":1015,"column":8},"end":{"line":1015,"column":8}},{"start":{"line":1015,"column":8},"end":{"line":1015,"column":8}}]},"97":{"line":1018,"type":"if","locations":[{"start":{"line":1018,"column":8},"end":{"line":1018,"column":8}},{"start":{"line":1018,"column":8},"end":{"line":1018,"column":8}}]},"98":{"line":1024,"type":"if","locations":[{"start":{"line":1024,"column":8},"end":{"line":1024,"column":8}},{"start":{"line":1024,"column":8},"end":{"line":1024,"column":8}}]},"99":{"line":1028,"type":"if","locations":[{"start":{"line":1028,"column":8},"end":{"line":1028,"column":8}},{"start":{"line":1028,"column":8},"end":{"line":1028,"column":8}}]},"100":{"line":1048,"type":"if","locations":[{"start":{"line":1048,"column":8},"end":{"line":1048,"column":8}},{"start":{"line":1048,"column":8},"end":{"line":1048,"column":8}}]},"101":{"line":1056,"type":"binary-expr","locations":[{"start":{"line":1056,"column":34},"end":{"line":1056,"column":38}},{"start":{"line":1056,"column":42},"end":{"line":1056,"column":50}},{"start":{"line":1056,"column":56},"end":{"line":1056,"column":78}},{"start":{"line":1056,"column":82},"end":{"line":1056,"column":105}}]},"102":{"line":1057,"type":"if","locations":[{"start":{"line":1057,"column":16},"end":{"line":1057,"column":16}},{"start":{"line":1057,"column":16},"end":{"line":1057,"column":16}}]},"103":{"line":1060,"type":"if","locations":[{"start":{"line":1060,"column":24},"end":{"line":1060,"column":24}},{"start":{"line":1060,"column":24},"end":{"line":1060,"column":24}}]},"104":{"line":1067,"type":"if","locations":[{"start":{"line":1067,"column":23},"end":{"line":1067,"column":23}},{"start":{"line":1067,"column":23},"end":{"line":1067,"column":23}}]},"105":{"line":1077,"type":"if","locations":[{"start":{"line":1077,"column":20},"end":{"line":1077,"column":20}},{"start":{"line":1077,"column":20},"end":{"line":1077,"column":20}}]},"106":{"line":1082,"type":"if","locations":[{"start":{"line":1082,"column":24},"end":{"line":1082,"column":24}},{"start":{"line":1082,"column":24},"end":{"line":1082,"column":24}}]},"107":{"line":1085,"type":"if","locations":[{"start":{"line":1085,"column":24},"end":{"line":1085,"column":24}},{"start":{"line":1085,"column":24},"end":{"line":1085,"column":24}}]},"108":{"line":1089,"type":"if","locations":[{"start":{"line":1089,"column":24},"end":{"line":1089,"column":24}},{"start":{"line":1089,"column":24},"end":{"line":1089,"column":24}}]},"109":{"line":1089,"type":"binary-expr","locations":[{"start":{"line":1089,"column":27},"end":{"line":1089,"column":34}},{"start":{"line":1089,"column":38},"end":{"line":1089,"column":53}}]},"110":{"line":1094,"type":"if","locations":[{"start":{"line":1094,"column":20},"end":{"line":1094,"column":20}},{"start":{"line":1094,"column":20},"end":{"line":1094,"column":20}}]},"111":{"line":1094,"type":"binary-expr","locations":[{"start":{"line":1094,"column":23},"end":{"line":1094,"column":34}},{"start":{"line":1094,"column":38},"end":{"line":1094,"column":59}}]},"112":{"line":1098,"type":"binary-expr","locations":[{"start":{"line":1098,"column":25},"end":{"line":1098,"column":32}},{"start":{"line":1098,"column":36},"end":{"line":1098,"column":43}},{"start":{"line":1098,"column":48},"end":{"line":1098,"column":80}}]},"113":{"line":1098,"type":"binary-expr","locations":[{"start":{"line":1098,"column":82},"end":{"line":1098,"column":88}},{"start":{"line":1098,"column":92},"end":{"line":1098,"column":106}}]},"114":{"line":1180,"type":"if","locations":[{"start":{"line":1180,"column":8},"end":{"line":1180,"column":8}},{"start":{"line":1180,"column":8},"end":{"line":1180,"column":8}}]},"115":{"line":1180,"type":"binary-expr","locations":[{"start":{"line":1180,"column":11},"end":{"line":1180,"column":36}},{"start":{"line":1180,"column":41},"end":{"line":1180,"column":62}},{"start":{"line":1180,"column":66},"end":{"line":1180,"column":87}}]},"116":{"line":1184,"type":"binary-expr","locations":[{"start":{"line":1184,"column":35},"end":{"line":1184,"column":52}},{"start":{"line":1184,"column":56},"end":{"line":1184,"column":57}}]},"117":{"line":1206,"type":"binary-expr","locations":[{"start":{"line":1206,"column":15},"end":{"line":1206,"column":19}},{"start":{"line":1206,"column":23},"end":{"line":1206,"column":27}}]},"118":{"line":1342,"type":"binary-expr","locations":[{"start":{"line":1342,"column":79},"end":{"line":1342,"column":84}},{"start":{"line":1342,"column":88},"end":{"line":1342,"column":93}}]},"119":{"line":1361,"type":"cond-expr","locations":[{"start":{"line":1361,"column":26},"end":{"line":1361,"column":27}},{"start":{"line":1361,"column":30},"end":{"line":1361,"column":39}}]},"120":{"line":1428,"type":"if","locations":[{"start":{"line":1428,"column":8},"end":{"line":1428,"column":8}},{"start":{"line":1428,"column":8},"end":{"line":1428,"column":8}}]},"121":{"line":1432,"type":"if","locations":[{"start":{"line":1432,"column":12},"end":{"line":1432,"column":12}},{"start":{"line":1432,"column":12},"end":{"line":1432,"column":12}}]},"122":{"line":1432,"type":"binary-expr","locations":[{"start":{"line":1432,"column":15},"end":{"line":1432,"column":33}},{"start":{"line":1432,"column":37},"end":{"line":1432,"column":55}}]},"123":{"line":1434,"type":"if","locations":[{"start":{"line":1434,"column":19},"end":{"line":1434,"column":19}},{"start":{"line":1434,"column":19},"end":{"line":1434,"column":19}}]},"124":{"line":1436,"type":"if","locations":[{"start":{"line":1436,"column":19},"end":{"line":1436,"column":19}},{"start":{"line":1436,"column":19},"end":{"line":1436,"column":19}}]},"125":{"line":1450,"type":"if","locations":[{"start":{"line":1450,"column":8},"end":{"line":1450,"column":8}},{"start":{"line":1450,"column":8},"end":{"line":1450,"column":8}}]},"126":{"line":1464,"type":"if","locations":[{"start":{"line":1464,"column":8},"end":{"line":1464,"column":8}},{"start":{"line":1464,"column":8},"end":{"line":1464,"column":8}}]},"127":{"line":1480,"type":"if","locations":[{"start":{"line":1480,"column":8},"end":{"line":1480,"column":8}},{"start":{"line":1480,"column":8},"end":{"line":1480,"column":8}}]},"128":{"line":1492,"type":"if","locations":[{"start":{"line":1492,"column":8},"end":{"line":1492,"column":8}},{"start":{"line":1492,"column":8},"end":{"line":1492,"column":8}}]},"129":{"line":1505,"type":"if","locations":[{"start":{"line":1505,"column":8},"end":{"line":1505,"column":8}},{"start":{"line":1505,"column":8},"end":{"line":1505,"column":8}}]},"130":{"line":1519,"type":"if","locations":[{"start":{"line":1519,"column":8},"end":{"line":1519,"column":8}},{"start":{"line":1519,"column":8},"end":{"line":1519,"column":8}}]},"131":{"line":1535,"type":"if","locations":[{"start":{"line":1535,"column":8},"end":{"line":1535,"column":8}},{"start":{"line":1535,"column":8},"end":{"line":1535,"column":8}}]},"132":{"line":1547,"type":"if","locations":[{"start":{"line":1547,"column":8},"end":{"line":1547,"column":8}},{"start":{"line":1547,"column":8},"end":{"line":1547,"column":8}}]},"133":{"line":1559,"type":"if","locations":[{"start":{"line":1559,"column":8},"end":{"line":1559,"column":8}},{"start":{"line":1559,"column":8},"end":{"line":1559,"column":8}}]}},"code":["\"use strict\";","","const GuildChannel = require(\"./structures/GuildChannel\");","const Collection = require(\"./util/Collection\");","const Constants = require(\"./Constants\");","const Endpoints = require(\"./rest/Endpoints\");","const ExtendedUser = require(\"./structures/ExtendedUser\");","const GroupChannel = require(\"./structures/GroupChannel\");","const Guild = require(\"./structures/Guild\");","const GuildIntegration = require(\"./structures/GuildIntegration\");","const Invite = require(\"./structures/Invite\");","const Member = require(\"./structures/Member\");","const Message = require(\"./structures/Message\");","const PrivateChannel = require(\"./structures/PrivateChannel\");","const Relationship = require(\"./structures/Relationship\");","const RequestHandler = require(\"./rest/RequestHandler\");","const Role = require(\"./structures/Role\");","const ShardManager = require(\"./gateway/ShardManager\");","const UnavailableGuild = require(\"./structures/UnavailableGuild\");","const User = require(\"./structures/User\");","const VoiceConnectionManager = require(\"./voice/VoiceConnectionManager\");","","var EventEmitter;","try {","    EventEmitter = require(\"eventemitter3\");","} catch(err) {","    EventEmitter = require(\"events\").EventEmitter;","}","var Erlpack;","try {","    Erlpack = require(\"erlpack\");","} catch(err) { // eslint-disable no-empty","}","","/**","* Represents the main Eris client","* @extends EventEmitter","* @prop {String} token The bot user token","* @prop {Boolean?} bot Whether the bot user belongs to an OAuth2 application","* @prop {Object} options Eris options","* @prop {Object} channelGuildMap Object mapping channel IDs to guild IDs","* @prop {Collection<Shard>} shards Collection of shards Eris is using","* @prop {Collection<Guild>} guilds Collection of guilds the bot is in","* @prop {Object} privateChannelMap Object mapping user IDs to private channel IDs","* @prop {Collection<PrivateChannel>} privateChannels Collection of private channels the bot is in","* @prop {Collection<GroupChannel>} groupChannels Collection of group channels the bot is in (user accounts only)","* @prop {VoiceConnectionManager} voiceConnections Extended collection of VoiceConnections the bot has","* @prop {Object} retryAfters Object mapping endpoints to ratelimit expiry timestamps","* @prop {Object} guildShardMap Object mapping guild IDs to shard IDs","* @prop {Number} startTime Timestamp of bot ready event","* @prop {Collection<UnavailableGuild>} unavailableGuilds Collection of unavailable guilds the bot is in","* @prop {Number} uptime How long in milliseconds the bot has been up for","* @prop {ExtendedUser} user The bot user","* @prop {Collection<User>} users Collection of users the bot sees","* @prop {Collection<Relationship>} relationships Collection of relationships the bot user has (user accounts only)","* @prop {Array<Object>} userGuildSettings Array containing the individual guild settings of the bot user (user accounts only)","* @prop {Object} userSettings Object containing the user account settings (user accounts only)","* @prop {Object} notes Object mapping user IDs to user notes (user accounts only)","*/","class Client extends EventEmitter {","    /**","    * Create a Client","    * @arg {String} token bot token","    * @arg {Object} [options] Eris options (all options are optional)","    * @arg {Boolean} [options.autoreconnect=true] Have Eris autoreconnect when connection is lost","    * @arg {Boolean} [options.compress=true] Whether to request WebSocket data to be compressed or not","    * @arg {Number} [options.connectionTimeout=30000] How long in milliseconds to wait for the connection to handshake with the server","    * @arg {Object} [options.disableEvents] If disableEvents[eventName] is true, the WS event will not be processed. This can cause significant performance increase on large bots. [A full list of the WS event names can be found on the docs reference page](/Eris/docs/reference#ws-event-names)","    * @arg {Boolean} [options.disableEveryone=true] When true, filter out @everyone/@here by default in createMessage/editMessage","    * @arg {Number} [options.firstShardID=0] The ID of the first shard to run for this client","    * @arg {Boolean} [options.getAllUsers=false] Get all the users in every guild. Ready time will be severely delayed","    * @arg {Number} [options.guildCreateTimeout=2000] How long in milliseconds to wait for a GUILD_CREATE before \"ready\" is fired. Increase this value if you notice missing guilds","    * @arg {Number} [options.largeThreshold=250] The maximum number of offline users per guild during initial guild data transmission","    * @arg {Number} [options.lastShardID=options.maxShards - 1] The ID of the last shard to run for this client","    * @arg {Number} [options.maxShards=1] The total number of shards you want to run","    * @arg {Number} [options.messageLimit=100] The maximum size of a channel message cache","    * @arg {Boolean} [options.opusOnly=false] Whether to suppress the node-opus not found error or not","    * @arg {Boolean} [options.restMode=false] Whether to enable getting objects over REST. This should only be enabled if you are not connecting to the gateway. Bot tokens must be prefixed manually in REST mode","    * @arg {Boolean} [options.seedVoiceConnections=false] Whether to populate bot.voiceConnections with existing connections the bot account has during startup. Note that this will disconnect connections from other bot sessions","    * @arg {Number} [options.sequencerWait=200] How long to wait between sending potentially ratelimited requests. This number should be at least 3/4 your ping (in milliseconds)","    * @arg {Number} [options.state=true] Whether to enable state tracking. If state is false, no objects will be cached","    * @arg {String} [options.defaultImageFormat=\"jpg\"] The default format to provide user avatars, guild icons, and group icons in. Can be \"jpg\", \"png\", \"gif\", or \"webp\"","    * @arg {Number} [options.defaultImageSize=128] The default size to return user avatars, guild icons, and group icons as. Can be 128, 256, 512, 1024, or 2048.","    */","    constructor(token, options) {","        super();","","        this.options = {","            autoreconnect: true,","            compress: true,","            connectionTimeout: 30000,","            disableEvents: {},","            disableEveryone: true,","            firstShardID: 0,","            getAllUsers: false,","            guildCreateTimeout: 2000,","            largeThreshold: 250,","            maxShards: 1,","            messageLimit: 100,","            opusOnly: false,","            restMode: false,","            seedVoiceConnections: false,","            sequencerWait: 200,","            defaultImageFormat: \"jpg\",","            defaultImageSize: 128","        };","        if(typeof options === \"object\") {","            for(var property of Object.keys(options)) {","                this.options[property] = options[property];","            }","        }","        if(this.options.lastShardID === undefined) {","            this.options.lastShardID = this.options.maxShards - 1;","        }","        if(typeof window !== \"undefined\") {","            try {","                require(\"pako\");","            } catch(err) {","                this.options.compress = false; // zlib does not like Blobs, Pako is not here","            }","        }","        if(!~Constants.ImageFormats.indexOf(this.options.defaultImageFormat.toLowerCase())) {","            this.options.defaultImageFormat = \"jpg\";","        }","        if(!~Constants.ImageSizes.indexOf(this.options.defaultImageSize)) {","            this.options.defaultImageSize = 128;","        }","","        this.token = token;","","        this.requestHandler = new RequestHandler(this);","","        this.ready = false;","        this.bot = this.options.restMode ? this.token.startsWith(\"Bot \") : true;","        this.startTime = 0;","        this.lastConnect = 0;","        this.connectQueue = [];","        this.channelGuildMap = {};","        this.shards = new ShardManager(this);","        this.groupChannels = new Collection(GroupChannel);","        this.guilds = new Collection(Guild);","        this.privateChannelMap = {};","        this.privateChannels = new Collection(PrivateChannel);","        this.retryAfters = {};","        this.guildShardMap = {};","        this.sharedStreams = {};","        this.unavailableGuilds = new Collection(UnavailableGuild);","        this.relationships = new Collection(Relationship);","        this.users = new Collection(User);","        this.presence = {","            game: null,","            status: \"offline\"","        };","        this.userGuildSettings = [];","        this.userSettings = {};","        this.notes = {};","        this.voiceConnections = new VoiceConnectionManager();","    }","","    get uptime() {","        return this.startTime ? Date.now() - this.startTime : 0;","    }","","    /**","    * Tells all shards to connect.","    * @returns {Promise} Resolves when all shards are initialized","    */","    connect() {","        return this.getGateway().then((data) => {","            if(!data.url) {","                return Promise.reject(new Error(\"Invalid response from gateway REST call\"));","            }","            if(data.url.includes(\"?\")) {","                data.url = data.url.substring(0, data.url.indexOf(\"?\"));","            }","            if(!data.url.endsWith(\"/\")) {","                data.url += \"/\";","            }","            this.gatewayURL = data.url + \"?v=\" + Constants.GATEWAY_VERSION + \"&encoding=\" + (Erlpack ? \"etf\" : \"json\");","            for(var i = this.options.firstShardID; i <= this.options.lastShardID; ++i) {","                this.shards.spawn(i);","            }","        }).catch((err) => {","            this.emit(\"error\", err);","            setTimeout(() => this.connect(), 2000);","        });","    }","","    /**","    * Get the Discord gateway URL","    * @returns {Promise<String>} Resolves with the gateway URL","    */","    getGateway() {","        return this.requestHandler.request(\"GET\", Endpoints.GATEWAY);","    }","","    /**","    * Get the Discord gateway URL along with bot metadata","    * @returns {Promise<Object>} Resolves with the gateway data","    */","    getBotGateway() {","        if(!this.token.startsWith(\"Bot \")) {","            this.token = \"Bot \" + this.token;","        }","        return this.requestHandler.request(\"GET\", Endpoints.GATEWAY_BOT, true);","    }","","    /**","    * Disconnects all shards","    * @arg {Object?} [options] Shard disconnect options","    * @arg {String | Boolean} [options.reconnect] false means destroy everything, true means you want to reconnect in the future, \"auto\" will autoreconnect","    */","    disconnect(options) {","        this.ready = false;","        this.shards.forEach((shard) => {","            shard.disconnect(options);","        });","        this.connectQueue = [];","    }","","    /**","    * Join a voice channel. If joining a group call, the voice connection ID will be stored in voiceConnections as \"call\". Otherwise, it will be the guild ID","    * @arg {String} channelID The ID of the voice channel","    * @arg {Object} [options] VoiceConnection constructor options","    * @arg {Object} [options.shared] Whether the VoiceConnection will be part of a SharedStream or not","    * @arg {Object} [options.opusOnly] Skip opus encoder initialization. You should not enable this unless you know what you are doing","    * @returns {Promise<VoiceConnection>} Resolves with a VoiceConnection","    */","    joinVoiceChannel(channelID, options) {","        var channel = this.getChannel(channelID);","        if(!channel) {","            return Promise.reject(new Error(\"Channel not found\"));","        }","        if(channel.guild && !channel.permissionsOf(this.user.id).allow & Constants.Permissions.voiceConnect) {","            return Promise.reject(new Error(\"Insufficient permission to connect to voice channel\"));","        }","        this.shards.get(this.guildShardMap[this.channelGuildMap[channelID]] || 0).sendWS(Constants.GatewayOPCodes.VOICE_STATE_UPDATE, {","            guild_id: this.channelGuildMap[channelID] || null,","            channel_id: channelID || null,","            self_mute: false,","            self_deaf: false","        });","        options = options || {};","        if(options.opusOnly === undefined) {","            options.opusOnly = this.options.opusOnly;","        }","        return this.voiceConnections.join(this.channelGuildMap[channelID] || \"call\", channelID, options);","    }","","    /**","    * Leaves a voice channel","    * @arg {String} channelID The ID of the voice channel","    */","    leaveVoiceChannel(channelID) {","        var channel = this.getChannel(channelID);","        if(!channel) {","            return;","        }","        this.shards.get(this.guildShardMap[this.channelGuildMap[channelID]] || 0).sendWS(Constants.GatewayOPCodes.VOICE_STATE_UPDATE, {","            guild_id: this.channelGuildMap[channelID] || null,","            channel_id: null,","            self_mute: false,","            self_deaf: false","        });","        this.voiceConnections.leave(this.channelGuildMap[channelID] || \"call\");","    }","","    /**","    * Updates the bot's status on all guilds","    * @arg {String} [status] Sets the bot's status, either \"online\", \"idle\", \"dnd\", or \"invisible\"","    * @arg {Object} [game] Sets the bot's active game, null to clear","    * @arg {String} game.name Sets the name of the bot's active game","    * @arg {Number} [game.type] The type of game. 0 is default, 1 is streaming (Twitch only)","    * @arg {String} [game.url] Sets the url of the shard's active game","    */","    editStatus(status, game) {","        this.shards.forEach((shard) => {","            shard.editStatus(status, game);","        });","","        if(game === undefined && typeof status === \"object\") {","            game = status;","            status = undefined;","        }","        if(status) {","            this.presence.status = status;","        }","        if(game !== undefined) {","            this.presence.game = game;","        }","    }","","    /**","    * Get a Channel object from a channelID","    * @arg {String} [channelID] The ID of the channel","    * @returns {GuildChannel | GroupChannel | PrivateChannel}","    */","    getChannel(channelID) {","        return this.channelGuildMap[channelID] ? this.guilds.get(this.channelGuildMap[channelID]).channels.get(channelID) : this.privateChannels.get(channelID) || this.groupChannels.get(channelID);","    }","","    /**","    * Create a channel in a guild","    * @arg {String} guildID The ID of the guild to create the channel in","    * @arg {String} name The name of the channel","    * @arg {String} [type=0] The type of the channel, either 0 or 2","    * @returns {Promise<GuildChannel>}","    */","    createChannel(guildID, name, type) {","        var guild = this.guilds.get(guildID);","        if(!guild) {","            return Promise.reject(new Error(`Guild ${guildID} not found`));","        }","        return this.requestHandler.request(\"POST\", Endpoints.GUILD_CHANNELS(guildID), true, {","            name,","            type","        }).then((channel) => new GuildChannel(channel, guild));","    }","","    /**","    * Edit a channel's properties","    * @arg {String} channelID The ID of the channel","    * @arg {Object} options The properties to edit","    * @arg {String} [options.name] The name of the channel","    * @arg {String} [options.icon] The icon of the channel as a base64 data URI (group channels only). Note: base64 strings alone are not base64 data URI strings","    * @arg {String} [options.ownerID] The ID of the channel owner (group channels only)","    * @arg {String} [options.topic] The topic of the channel (guild text channels only)","    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)","    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)","    * @returns {Promise<GroupChannel | GuildChannel>}","    */","    editChannel(channelID, options) {","        var channel = this.getChannel(channelID);","        if(!channel) {","            return Promise.reject(new Error(`Channel ${channelID} not found`));","        }","","        return this.requestHandler.request(\"PATCH\", Endpoints.CHANNEL(channelID), true, {","            name: options.name,","            icon: options.icon,","            owner_id: options.ownerID,","            topic: options.topic,","            bitrate: options.bitrate,","            user_limit: options.userLimit","        }).then((data) => {","            if(channel.guild) {","                return new GuildChannel(data, channel.guild);","            } else {","                return new GroupChannel(data, this);","            }","        });","    }","","    /**","    * Edit a guild channel's position. Note that channel position numbers are lowest on top and highest at the bottom.","    * @arg {String} channelID The ID of the channel","    * @arg {Number} position The new position of the channel","    * @returns {Promise}","    */","    editChannelPosition(channelID, position) {","        var channels = this.guilds.get(this.channelGuildMap[channelID]).channels;","        var channel = channels.get(channelID);","        if(!channel) {","            return Promise.reject(new Error(`Channel ${channelID} not found`));","        }","        if(channel.position === position) {","            return Promise.resolve();","        }","        var min = Math.min(position, channel.position);","        var max = Math.max(position, channel.position);","        channels = channels.filter((chan) => chan.type === channel.type && min <= chan.position && chan.position <= max && chan.id !== channelID).sort((a, b) => a.position - b.position);","        if(position > channel.position) {","            channels.push(channel);","        } else {","            channels.unshift(channel);","        }","        return this.requestHandler.request(\"PATCH\", Endpoints.GUILD_CHANNELS(this.channelGuildMap[channelID]), true, channels.map((channel, index) => ({","            id: channel.id,","            position: index + min","        })));","    }","","    /**","    * Delete a guild channel, or leave a private or group channel","    * @arg {String} channelID The ID of the channel","    * @returns {Promise}","    */","    deleteChannel(channelID) {","        return this.requestHandler.request(\"DELETE\", Endpoints.CHANNEL(channelID), true);","    }","","    /**","    * Send typing status in a channel","    * @arg {String} channelID The ID of the channel","    * @returns {Promise}","    */","    sendChannelTyping(channelID) {","        return this.requestHandler.request(\"POST\", Endpoints.CHANNEL_TYPING(channelID), true);","    }","","    /**","    * Create a channel permission overwrite","    * @arg {String} channelID The ID of channel","    * @arg {String} overwriteID The ID of the overwritten user or role","    * @arg {Number} allow The permissions number for allowed permissions","    * @arg {Number} deny The permissions number for denied permissions","    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"","    * @returns {Promise}","    */","    editChannelPermission(channelID, overwriteID, allow, deny, type) {","        return this.requestHandler.request(\"PUT\", Endpoints.CHANNEL_PERMISSION(channelID, overwriteID), true, {","            allow,","            deny,","            type","        });","    }","","    /**","    * Delete a channel permission overwrite","    * @arg {String} channelID The ID of the channel","    * @arg {String} overwriteID The ID of the overwritten user or role","    * @returns {Promise}","    */","    deleteChannelPermission(channelID, overwriteID) {","        return this.requestHandler.request(\"DELETE\", Endpoints.CHANNEL_PERMISSION(channelID, overwriteID), true);","    }","","    /**","    * Get all invites in a channel","    * @arg {String} channelID The ID of the channel","    * @returns {Promise<Invite[]>}","    */","    getChannelInvites(channelID) {","        return this.requestHandler.request(\"GET\", Endpoints.CHANNEL_INVITES(channelID), true).then((invites) => invites.map((invite) => new Invite(invite, this)));","    }","","    /**","    * Create an invite for a channel","    * @arg {String} channelID The ID of the channel","    * @arg {Object} [options] Invite generation options","    * @arg {Number} [options.maxAge] How long the invite should last in seconds","    * @arg {Number} [options.maxUses] How many uses the invite should last for","    * @arg {Boolean} [options.temporary] Whether the invite is temporary or not","    * @arg {Boolean} [options.unique] Whether the invite is unique or not","    * @returns {Promise<Invite>}","    */","    createChannelInvite(channelID, options) {","        options = options || {};","        return this.requestHandler.request(\"POST\", Endpoints.CHANNEL_INVITES(channelID), true, {","            max_age: options.maxAge,","            max_uses: options.maxUses,","            temporary: options.temporary,","            unique: options.unique","        }).then(invite => new Invite(invite, this));","    }","","    /**","    * Get all the webhooks in a channel","    * @arg {String} channelID The ID of the channel to get webhooks for","    * @returns {Promise<Object[]>} Resolves with an array of webhook objects","    */","    getChannelWebhooks(channelID) {","        return this.requestHandler.request(\"GET\", Endpoints.CHANNEL_WEBHOOKS(channelID), true);","    }","","    /**","    * Get a webhook","    * @arg {String} webhookID The ID of the webhook","    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token","    * @returns {Promise<Object>} Resolves with a webhook object","    */","    getWebhook(webhookID, token) {","        return this.requestHandler.request(\"GET\", token ? Endpoints.WEBHOOK_TOKEN(webhookID, token) : Endpoints.WEBHOOK(webhookID), !token);","    }","","    /**","    * Create a channel webhook","    * @arg {String} channelID The ID of the channel to create the webhook in","    * @arg {Object} options Webhook options","    * @arg {String} options.name The default name","    * @arg {String} options.avatar The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings","    * @returns {Promise<Object>} Resolves with a webhook object","    */","    createChannelWebhook(channelID, options) {","        return this.requestHandler.request(\"POST\", Endpoints.CHANNEL_WEBHOOKS(channelID), true, options);","    }","","    /**","    * Edit a webhook","    * @arg {String} webhookID The ID of the webhook","    * @arg {Object} options Webhook options","    * @arg {String} [options.name] The new default name","    * @arg {String} [options.avatar] The new default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings","    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token","    * @returns {Promise<Object>} Resolves with a webhook object","    */","    editWebhook(webhookID, options, token) {","        return this.requestHandler.request(\"PATCH\", token ? Endpoints.WEBHOOK_TOKEN(webhookID, token) : Endpoints.WEBHOOK(webhookID), !token, options);","    }","","    /**","    * Execute a webhook","    * @arg {String} webhookID The ID of the webhook","    * @arg {String} token The token of the webhook","    * @arg {Object} options Webhook execution options","    * @arg {String} [options.content=\"\"] A content string","    * @arg {Object} [options.file] A file object","    * @arg {Buffer} options.file.file A buffer containing file data","    * @arg {String} options.file.name What to name the file","    * @arg {Object[]} [options.embeds] An array of Discord embeds","    * @arg {String} [options.username] A custom username, defaults to webhook default username if not specified","    * @arg {String} [options.avatarURL] A URL for a custom avatar, defaults to webhook default avatar if not specified","    * @arg {Boolean} [options.tts=false] Whether the message should be a TTS message or not","    * @arg {Boolean} [options.wait=false] Whether to wait for the server to confirm the message create or not","    * @arg {Boolean} [options.disableEveryone] Whether to filter @everyone/@here or not (overrides default)","    * @returns {Promise}","    */","    executeWebhook(webhookID, token, options) {","        if(!options.content && !options.file && !options.embeds) {","            return Promise.reject(new Error(\"No content, file, or embeds\"));","        }","        if(options.content && (options.disableEveryone !== undefined ? options.disableEveryone : this.options.disableEveryone)) {","            options.content = options.content.replace(/@everyone/g, \"@\\u200beveryone\").replace(/@here/g, \"@\\u200bhere\");","        }","        return this.requestHandler.request(\"POST\", Endpoints.WEBHOOK_TOKEN(webhookID, token) + (options.wait ? \"?wait=true\" : \"\"), true, {","            content: options.content,","            embeds: options.embeds,","            username: options.username,","            avatar_url: options.avatarURL,","            tts: options.tts","        }, options.file);","    }","","    /**","    * Execute a slack-style webhook","    * @arg {String} webhookID The ID of the webhook","    * @arg {String} token The token of the webhook","    * @arg {Object} options Slack webhook options","    * @arg {Boolean} [options.wait=false] Whether to wait for the server to confirm the message create or not","    * @returns {Promise}","    */","    executeSlackWebhook(webhookID, token, options) {","        var wait = !!options.wait;","        options.wait = undefined;","        return this.requestHandler.request(\"POST\", Endpoints.WEBHOOK_TOKEN_SLACK(webhookID, token) + (wait ? \"?wait=true\" : \"\"), true, options);","    }","","    /**","    * Delete a webhook","    * @arg {String} webhookID The ID of the webhook","    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token","    * @returns {Promise}","    */","    deleteWebhook(webhookID, token) {","        return this.requestHandler.request(\"DELETE\", token ? Endpoints.WEBHOOK_TOKEN(webhookID, token) : Endpoints.WEBHOOK(webhookID), !token);","    }","","    /**","    * Get all the webhooks in a guild","    * @arg {String} guildID The ID of the guild to get webhooks for","    * @returns {Promise<Object[]>} Resolves with an array of webhook objects","    */","    getGuildWebhooks(guildID) {","        return this.requestHandler.request(\"GET\", Endpoints.GUILD_WEBHOOKS(guildID), true);","    }","","    /**","    * Create a guild emoji object (not for bot accounts)","    * @arg {String} guildID The ID of the guild to create the emoji in","    * @arg {Object} options Emoji options","    * @arg {String} options.name The name of emoji","    * @arg {String} options.image The base 64 encoded string","    * @arg {Array} [options.roles] An array containing authorized role IDs","    * @returns {Promise<Object>} A guild emoji object","    */","    createGuildEmoji(guildID, options) {","      return this.requestHandler.request(\"POST\", Endpoints.GUILD_EMOJIS(guildID), true, options);","    }","    /**","    * Edit a guild emoji object (not for bot accounts)","    * @arg {String} guildID The ID of the guild to edit the emoji in","    * @arg {String} emojiID The ID of the emoji you want to modify","    * @arg {Object} options Emoji options","    * @arg {String} [options.name] The name of emoji","    * @arg {Array} [options.roles] An array containing authorized role IDs","    * @returns {Promise<Object>} A guild emoji object","    */","    editGuildEmoji(guildID, emojiID, options) {","      return this.requestHandler.request(\"PATCH\", Endpoints.GUILD_EMOJI(guildID, emojiID), true, options);","    }","    /**","    * Delete a guild emoji object (not for bot accounts)","    * @arg {String} guildID The ID of the guild to delete the emoji in","    * @arg {String} emojiID The ID of the emoji","    * @returns {Promise}","    */","    deleteGuildEmoji(guildID, emojiID) {","      return this.requestHandler.request(\"DELETE\", Endpoints.GUILD_EMOJI(guildID, emojiID), true);","    }","    /**","    * Create a guild role","    * @arg {String} guildID The ID of the guild to create the role in","    * @arg {Object} [options] The properties to set","    * @arg {String} [options.name] The name of the role","    * @arg {Number} [options.permissions] The role permissions number","    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3d15b3 or 4040115)","    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not","    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not","    * @returns {Promise<Role>}","    */","    createRole(guildID, options) {","        return this.requestHandler.request(\"POST\", Endpoints.GUILD_ROLES(guildID), true, options).then((role) => new Role(role, this.guilds.get(guildID)));","    }","","    /**","    * Edit a guild role","    * @arg {String} guildID The ID of the guild the role is in","    * @arg {String} roleID The ID of the role","    * @arg {Object} options The properties to edit","    * @arg {String} [options.name] The name of the role","    * @arg {Number} [options.permissions] The role permissions number","    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)","    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not","    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not","    * @returns {Promise<Role>}","    */","    editRole(guildID, roleID, options) {","        return this.requestHandler.request(\"PATCH\", Endpoints.GUILD_ROLE(guildID, roleID), true, options).then((role) => new Role(role, this.guilds.get(guildID)));","    }","","    /**","    * Edit a guild role's position. Note that role position numbers are highest on top and lowest at the bottom.","    * @arg {String} guildID The ID of the guild the role is in","    * @arg {String} roleID The ID of the role","    * @arg {Number} position The new position of the role","    * @returns {Promise}","    */","    editRolePosition(guildID, roleID, position) {","        if(guildID === roleID) {","            return Promise.reject(new Error(\"Cannot move default role\"));","        }","        var roles = this.guilds.get(guildID).roles;","        var role = roles.get(roleID);","        if(!role) {","            return Promise.reject(new Error(`Role ${roleID} not found`));","        }","        if(role.position === position) {","            return Promise.resolve();","        }","        var min = Math.min(position, role.position);","        var max = Math.max(position, role.position);","        roles = roles.filter((role) => min <= role.position && role.position <= max && role.id !== roleID).sort((a, b) => a.position - b.position);","        if(position > role.position) {","            roles.push(role);","        } else {","            roles.unshift(role);","        }","        return this.requestHandler.request(\"PATCH\", Endpoints.GUILD_ROLES(guildID), true, roles.map((role, index) => ({","            id: role.id,","            position: index + min","        })));","    }","","    /**","    * Create a guild role","    * @arg {String} guildID The ID of the guild to create the role in","    * @arg {String} roleID The ID of the role","    * @returns {Promise}","    */","    deleteRole(guildID, roleID) {","        return this.requestHandler.request(\"DELETE\", Endpoints.GUILD_ROLE(guildID, roleID), true);","    }","","    /**","    * Get the prune count for a guild","    * @arg {String} guildID The ID of the guild","    * @arg {Number} days The number of days of inactivity to prune for","    * @returns {Promise<Number>} Resolves with the number of users that would be pruned","    */","    getPruneCount(guildID, days) {","        return this.requestHandler.request(\"GET\", Endpoints.GUILD_PRUNE(guildID), true, {","            days","        }).then((data) => data.pruned);","    }","","    /**","    * Begin pruning a guild","    * @arg {String} guildID The ID of the guild","    * @arg {Number} days The number of days of inactivity to prune for","    * @returns {Promise<Number>} Resolves with the number of pruned users","    */","    pruneMembers(guildID, days) {","        return this.requestHandler.request(\"POST\", Endpoints.GUILD_PRUNE(guildID), true, {","            days","        }).then((data) => data.pruned);","    }","","    /**","    * Get a list of general/guild-specific voice reigons","    * @arg {String} [guildID] The ID of the guild","    * @returns {Promise<Object[]>} Resolves with an array of voice region objects","    */","    getVoiceRegions(guildID) {","        return guildID ? this.requestHandler.request(\"GET\", Endpoints.GUILD_VOICE_REGIONS(guildID), true) : this.requestHandler.request(\"GET\", Endpoints.VOICE_REGIONS, true); // TODO parse regions","    }","","    /**","    * Get info on an invite","    * @arg {String} inviteID The ID of the invite","    * @returns {Promise<Invite>}","    */","    getInvite(inviteID) {","        return this.requestHandler.request(\"GET\", Endpoints.INVITE(inviteID), true).then((invite) => {","            if(this.channelGuildMap[invite.channel.id] && this.getChannel(invite.channel.id).permissionsOf(this.user.id).json.manageChannels) {","                return this.requestHandler.request(\"POST\", Endpoints.CHANNEL_INVITES(invite.channel.id), true, {","                    validate: inviteID","                }).then((extendedInvite) => new Invite(extendedInvite, this));","            }","            return new Invite(invite, this);","        });","    }","","    /**","    * Accept an invite (not for bot accounts)","    * @arg {String} inviteID The ID of the invite","    * @returns {Promise<Invite>}","    */","    acceptInvite(inviteID) {","        return this.requestHandler.request(\"POST\", Endpoints.INVITE(inviteID), true).then((invite) => new Invite(invite, this));","    }","","    /**","    * Delete an invite","    * @arg {String} inviteID The ID of the invite","    * @returns {Promise}","    */","    deleteInvite(inviteID) {","        return this.requestHandler.request(\"DELETE\", Endpoints.INVITE(inviteID), true);","    }","","    /**","    * Get properties of the bot user","    * @returns {Promise<ExtendedUser>}","    */","    getSelf() {","        return this.requestHandler.request(\"GET\", Endpoints.USER(\"@me\"), true).then((data) => new ExtendedUser(data, this));","    }","","    /**","    * Edit properties of the bot user","    * @arg {Object} options The properties to edit","    * @arg {String} [options.username] The new username","    * @arg {String} [options.avatar] The new avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings","    * @returns {Promise<ExtendedUser>}","    */","    editSelf(options) {","        return this.requestHandler.request(\"PATCH\", Endpoints.USER(\"@me\"), true, options).then((data) => new ExtendedUser(data, this));","    }","","    /**","    * Get a DM channel with a user, or create one if it does not exist","    * @arg {String} userID The ID of the user","    * @returns {Promise<PrivateChannel>}","    */","    getDMChannel(userID) {","        if(this.privateChannelMap[userID]) {","            return Promise.resolve(this.privateChannels.get(this.privateChannelMap[userID]));","        }","        return this.requestHandler.request(\"POST\", Endpoints.USER_CHANNELS(\"@me\"), true, {","            recipients: [userID],","            type: 1","        }).then((privateChannel) => new PrivateChannel(privateChannel, this));","    }","","    /**","    * Create a group channel with other users","    * @arg {String[]} userIDs The IDs of the other users","    * @returns {Promise<PrivateChannel>}","    */","    createGroupChannel(userIDs) {","        return this.requestHandler.request(\"POST\", Endpoints.USER_CHANNELS(\"@me\"), true, {","            recipients: userIDs,","            type: 3","        }).then((privateChannel) => new GroupChannel(privateChannel, this));","    }","","    /**","    * Get a previous message in a channel","    * @arg {String} channelID The ID of the channel","    * @arg {String} messageID The ID of the message","    * @returns {Promise<Message>}","    */","    getMessage(channelID, messageID) {","        return this.requestHandler.request(\"GET\", Endpoints.CHANNEL_MESSAGE(channelID, messageID), true).then((message) => new Message(message, this));","    }","","    /**","    * Get previous messages in a channel","    * @arg {String} channelID The ID of the channel","    * @arg {Number} [limit=50] The max number of messages to get","    * @arg {String} [before] Get messages before this message ID","    * @arg {String} [after] Get messages after this message ID","    * @arg {String} [around] Get messages around this message ID (does not work with limit > 100)","    * @returns {Promise<Message[]>}","    */","    getMessages(channelID, limit, before, after, around) {","        if(limit && limit > 100) {","            return new Promise((resolve, reject) => {","                var logs = [];","                var get = (_before, _after) => {","                    this.requestHandler.request(\"GET\", Endpoints.CHANNEL_MESSAGES(channelID), true, {","                        limit: 100,","                        before: _before || undefined,","                        after: _after || undefined","                    }).then((messages) => {","                        if(limit <= messages.length) {","                            return resolve((_after ? messages.slice(messages.length - limit, messages.length).map((message) => new Message(message, this)).concat(logs) : logs.concat(messages.slice(0, limit).map((message) => new Message(message, this)))));","                        }","                        limit -= messages.length;","                        logs = (_after ? messages.map((message) => new Message(message, this)).concat(logs) : logs.concat(messages.map((message) => new Message(message, this))));","                        if(messages.length < 100) {","                            return resolve(logs);","                        }","                        this.emit(\"debug\", `Getting ${limit} more messages during getMessages for ${channelID}: ${_before} ${_after}`, -1);","                        get((_before || !_after) && messages[messages.length - 1].id, _after && messages[0].id);","                    }).catch(reject);","                };","                get(before, after);","            });","        }","        return this.requestHandler.request(\"GET\", Endpoints.CHANNEL_MESSAGES(channelID), true, {","            limit: limit || 50,","            before,","            after,","            around","        }).then((messages) => messages.map((message) => {","            try {","                return new Message(message, this);","            } catch(err) {","                this.emit(\"error\", `ERROR CREATING MESSAGE FROM CHANNEL MESSAGES: ${JSON.stringify(messages)}`);","                return null;","            }","        }));","    }","","    /**","    * Get all the pins in a channel","    * @arg {String} channelID The ID of the channel","    * @returns {Promise<Message[]>}","    */","    getPins(channelID) {","        return this.requestHandler.request(\"GET\", Endpoints.CHANNEL_PINS(channelID), true).then((messages) => messages.map((message) => new Message(message, this)));","    }","","    /**","    * Create a message in a channel","    * Note: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel for a user","    * @arg {String} channelID The ID of the channel","    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:","    * @arg {String} content.content A content string","    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure","    * @arg {Boolean} [content.tts] Set the message TTS flag","    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)","    * @arg {Object} [file] A file object","    * @arg {Buffer} file.file A buffer containing file data","    * @arg {String} file.name What to name the file","    * @returns {Promise<Message>}","    */","    createMessage(channelID, content, file) {","        if(typeof content === \"string\") {","            content = {","                content: content","            };","        } else if(typeof content !== \"object\" || content == null) {","            content = {","                content: content ? \"\" + content : \"\"","            };","        } else if(typeof content.content !== \"string\") {","            content.content = content.content ? \"\" + content.content : \"\";","        }","        if(!content.content && !file && !content.embed) {","            return Promise.reject(new Error(\"No content, file, or embed\"));","        }","        if(content.disableEveryone !== undefined ? content.disableEveryone : this.options.disableEveryone) {","            content.content = content.content.replace(/@everyone/g, \"@\\u200beveryone\").replace(/@here/g, \"@\\u200bhere\");","        }","        return this.requestHandler.request(\"POST\", Endpoints.CHANNEL_MESSAGES(channelID), true, content, file).then((message) => new Message(message, this));","    }","","    /**","    * Edit a message","    * @arg {String} channelID The ID of the channel","    * @arg {String} messageID The ID of the message","    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:","    * @arg {String} content.content A content string","    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)","    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure","    * @returns {Promise<Message>}","    */","    editMessage(channelID, messageID, content) {","        if(typeof content === \"string\") {","            content = {","                content: content","            };","        } else if(typeof content !== \"object\" || content == null) {","            content = {","                content: content ? \"\" + content : \"\"","            };","        } else if(typeof content.content !== \"string\") {","            content.content = content.content ? \"\" + content.content : \"\";","        }","        if(!content.content && !content.embed) {","            return Promise.reject(new Error(\"No content or embed\"));","        }","        if(content.disableEveryone !== undefined ? content.disableEveryone : this.options.disableEveryone) {","            content.content = content.content.replace(/@everyone/g, \"@\\u200beveryone\").replace(/@here/g, \"@\\u200bhere\");","        }","        return this.requestHandler.request(\"PATCH\", Endpoints.CHANNEL_MESSAGE(channelID, messageID), true, content).then((message) => new Message(message, this));","    }","","    /**","    * Pin a message","    * @arg {String} channelID The ID of the channel","    * @arg {String} messageID The ID of the message","    * @returns {Promise}","    */","    pinMessage(channelID, messageID) {","        return this.requestHandler.request(\"PUT\", Endpoints.CHANNEL_PIN(channelID, messageID), true);","    }","","    /**","    * Unpin a message","    * @arg {String} channelID The ID of the channel","    * @arg {String} messageID The ID of the message","    * @returns {Promise}","    */","    unpinMessage(channelID, messageID) {","        return this.requestHandler.request(\"DELETE\", Endpoints.CHANNEL_PIN(channelID, messageID), true);","    }","","    /**","    * Get a list of users who reacted with a specific reaction","    * @arg {String} channelID The ID of the channel","    * @arg {String} messageID The ID of the message","    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)","    * @arg {Number} [limit=100] The maximum number of users to get","    * @returns {Promise<User[]>}","    */","    getMessageReaction(channelID, messageID, reaction, limit) {","        if(reaction === decodeURI(reaction)) {","            reaction = encodeURIComponent(reaction);","        }","        return this.requestHandler.request(\"GET\", Endpoints.CHANNEL_MESSAGE_REACTION(channelID, messageID, reaction), true, {","            limit: limit || 100","        }).then((users) => users.map((user) => new User(user, this)));","    }","","    /**","    * Add a reaction to a message","    * @arg {String} channelID The ID of the channel","    * @arg {String} messageID The ID of the message","    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)","    * @arg {String} [userID=\"@me\"] The ID of the user to react as","    * @returns {Promise}","    */","    addMessageReaction(channelID, messageID, reaction, userID) {","        if(reaction === decodeURI(reaction)) {","            reaction = encodeURIComponent(reaction);","        }","        return this.requestHandler.request(\"PUT\", Endpoints.CHANNEL_MESSAGE_REACTION_USER(channelID, messageID, reaction, userID || \"@me\"), true);","    }","","    /**","    * Remove a reaction from a message","    * @arg {String} channelID The ID of the channel","    * @arg {String} messageID The ID of the message","    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)","    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for","    * @returns {Promise}","    */","    removeMessageReaction(channelID, messageID, reaction, userID) {","        if(reaction === decodeURI(reaction)) {","            reaction = encodeURIComponent(reaction);","        }","        return this.requestHandler.request(\"DELETE\", Endpoints.CHANNEL_MESSAGE_REACTION_USER(channelID, messageID, reaction, userID || \"@me\"), true);","    }","","    /**","    * Remove all reactions from a message","    * @arg {String} channelID The ID of the channel","    * @arg {String} messageID The ID of the message","    * @returns {Promise}","    */","    removeMessageReactions(channelID, messageID) {","        return this.requestHandler.request(\"DELETE\", Endpoints.CHANNEL_MESSAGE_REACTIONS(channelID, messageID), true);","    }","","    /**","    * Delete a message","    * @arg {String} channelID The ID of the channel","    * @arg {String} messageID The ID of the message","    * @returns {Promise}","    */","    deleteMessage(channelID, messageID) {","        return this.requestHandler.request(\"DELETE\", Endpoints.CHANNEL_MESSAGE(channelID, messageID), true);","    }","","    /**","    * Bulk delete messages (bot accounts only)","    * @arg {String} channelID The ID of the channel","    * @arg {String[]} messageIDs Array of message IDs to delete","    * @returns {Promise}","    */","    deleteMessages(channelID, messageIDs) {","        if(messageIDs.length === 0) {","            return Promise.resolve();","        }","        if(messageIDs.length === 1) {","            return this.deleteMessage(channelID, messageIDs[0]);","        }","","        var oldestAllowedSnowflake = (Date.now() - 1421280000000) * 4194304;","        var invalidMessage = messageIDs.find((messageID) => messageID < oldestAllowedSnowflake);","        if(invalidMessage) {","            return Promise.reject(new Error(`Message ${invalidMessage} is more than 2 weeks old.`));","        }","","        if(messageIDs.length > 100) {","            return this.requestHandler.request(\"POST\", Endpoints.CHANNEL_BULK_DELETE(channelID), true, {","                messages: messageIDs.splice(0, 100)","            }).then(() => this.deleteMessages(channelID, messageIDs));","        }","        return this.requestHandler.request(\"POST\", Endpoints.CHANNEL_BULK_DELETE(channelID), true, {","            messages: messageIDs","        });","    }","","    /**","    * Purge previous messages in a channel with an optional filter (bot accounts only)","    * @arg {String} channelID The ID of the channel","    * @arg {Number} limit The max number of messages to search through, -1 for no limit","    * @arg {function} [filter] Optional filter function that returns a boolean when passed a Message object","    * @arg {String} [before] Get messages before this message ID","    * @arg {String} [after] Get messages after this message ID","    * @returns {Promise<Number>} Resolves with the number of messages deleted","    */","    purgeChannel(channelID, limit, filter, before, after) {","        if(typeof filter === \"string\") {","            filter = (msg) => msg.content.includes(filter);","        }","        return new Promise((resolve, reject) => {","            var toDelete = [];","            var deleted = 0;","            var done = false;","            var checkToDelete = () => {","                var messageIDs = (done && toDelete) || (toDelete.length >= 100 && toDelete.splice(0, 100));","                if(messageIDs) {","                    deleted += messageIDs.length;","                    this.deleteMessages(channelID, messageIDs).then(() => {","                        if(done) {","                            return resolve(deleted);","                        }","                        setTimeout(() => {","                            checkToDelete();","                        }, 1000);","                    }).catch(reject);","                } else if(done) {","                    return resolve(deleted);","                } else {","                    setTimeout(() => {","                        checkToDelete();","                    }, 250);","                }","            };","            var del = (_before, _after) => {","                this.getMessages(channelID, 100, _before, _after).then((messages) => {","                    if(limit === 0) {","                        done = true;","                        return;","                    }","                    for(var message of messages) {","                        if(limit === 0) {","                            break;","                        }","                        if(message.timestamp < Date.now() - 1209600000) { // 14d * 24h * 60m * 60s * 1000ms","                            done = true;","                            return;","                        }","                        if(!filter || filter(message)) {","                            toDelete.push(message.id);","                        }","                        limit--;","                    }","                    if(limit === 0 || messages.length < 100) {","                        done = true;","                        return;","                    }","                    del((_before || !_after) && messages[messages.length - 1].id, _after && messages[0].id);","                }).catch(reject);","            };","            del(before, after);","            checkToDelete();","        });","    }","","    /**","    * Get a guild's embed object","    * @arg {String} guildID The ID of the guild","    * @returns {Promise<Object>} A guild embed object","    */","    getGuildEmbed(guildID) {","        return this.requestHandler.request(\"GET\", Endpoints.GUILD_EMBED(guildID), true);","    }","","    /**","    * Get a list of integrations for a guild","    * @arg {String} guildID The ID of the guild","    * @returns {Promise<GuildIntegration[]>}","    */","    getGuildIntegrations(guildID) {","        var guild = this.guilds.get(guildID);","        return this.requestHandler.request(\"GET\", Endpoints.GUILD_INTEGRATIONS(guildID), true).then((integrations) => integrations.map((integration) => new GuildIntegration(integration, guild)));","    }","","    /**","    * Edit a guild integration","    * @arg {String} guildID The ID of the guild","    * @arg {String} integrationID The ID of the integration","    * @arg {Object} options The properties to edit","    * @arg {String} [options.expireBehavior] What to do when a user's subscription runs out","    * @arg {String} [options.expireGracePeriod] How long before the integration's role is removed from an unsubscribed user","    * @arg {String} [options.enableEmoticons] Whether to enable integration emoticons or not","    * @returns {Promise}","    */","    editGuildIntegration(guildID, integrationID, options) {","        return this.requestHandler.request(\"PATCH\", Endpoints.GUILD_INTEGRATION(guildID, integrationID), true, {","            expire_behavior: options.expireBehavior,","            expire_grace_period: options.expireGracePeriod,","            enable_emoticons: options.enableEmoticons","        });","    }","","    /**","    * Delete a guild integration","    * @arg {String} guildID The ID of the guild","    * @arg {String} integrationID The ID of the integration","    * @returns {Promise}","    */","    deleteGuildIntegration(guildID, integrationID) {","        return this.requestHandler.request(\"DELETE\", Endpoints.GUILD_INTEGRATION(guildID, integrationID), true);","    }","","    /**","    * Force a guild integration to sync","    * @arg {String} guildID The ID of the guild","    * @arg {String} integrationID The ID of the integration","    * @returns {Promise}","    */","    syncGuildIntegration(guildID, integrationID) {","        return this.requestHandler.request(\"POST\", Endpoints.GUILD_INTEGRATION_SYNC(guildID, integrationID), true);","    }","","    /**","    * Get all invites in a guild","    * @arg {String} guildID The ID of the guild","    * @returns {Promise<Invite[]>}","    */","    getGuildInvites(guildID) {","        return this.requestHandler.request(\"GET\", Endpoints.GUILD_INVITES(guildID), true).then((invites) => invites.map((invite) => new Invite(invite, this)));","    }","","    /**","    * Ban a user from a guild","    * @arg {String} guildID The ID of the guild","    * @arg {String} userID The ID of the user","    * @arg {Number} [deleteMessageDays=0] Number of days to delete messages for, between 0-7 inclusive","    * @returns {Promise}","    */","    banGuildMember(guildID, userID, deleteMessageDays) {","        if(!isNaN(deleteMessageDays) && (deleteMessageDays < 0 || deleteMessageDays > 7)) {","            return Promise.reject(new Error(`Invalid deleteMessageDays value (${deleteMessageDays}), should be a number between 0-7 inclusive`));","        }","        return this.requestHandler.request(\"PUT\", Endpoints.GUILD_BAN(guildID, userID), true, {","            \"delete-message-days\": deleteMessageDays || 0","        });","    }","","    /**","    * Unban a user from a guild","    * @arg {String} guildID The ID of the guild","    * @arg {String} userID The ID of the user","    * @returns {Promise}","    */","    unbanGuildMember(guildID, userID) {","        return this.requestHandler.request(\"DELETE\", Endpoints.GUILD_BAN(guildID, userID), true);","    }","","    /**","    * Create a guild","    * @arg {String} name The name of the guild","    * @arg {String} region The region of the guild","    * @arg {String} [icon] The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings","    * @returns {Promise<Guild>}","    */","    createGuild(name, region, icon) {","        icon = icon || null;","        return this.requestHandler.request(\"POST\", Endpoints.GUILDS, true, {","            name,","            region,","            icon","        }).then((guild) => new Guild(guild, this));","    }","","    /**","    * Edit a guild","    * @arg {String} guildID The ID of the guild","    * @arg {Object} options The properties to edit","    * @arg {String} [options.name] The ID of the guild","    * @arg {String} [options.region] The region of the guild","    * @arg {String} [options.icon] The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings","    * @arg {Number} [options.verificationLevel] The guild verification level","    * @arg {Number} [options.defaultNotifications] The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".","    * @arg {String} [options.afkChannelID] The ID of the AFK voice channel","    * @arg {Number} [options.afkTimeout] The AFK timeout in seconds","    * @arg {String} [options.ownerID] The ID of the user to transfer server ownership to (bot user must be owner)","    * @arg {String} [options.splash] The guild splash image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings","    * @returns {Promise<Guild>}","    */","    editGuild(guildID, options) {","        return this.requestHandler.request(\"PATCH\", Endpoints.GUILD(guildID), true, {","            name: options.name,","            region: options.region,","            icon: options.icon,","            verification_level: options.verificationLevel,","            default_message_notifications: options.defaultNotifications,","            afk_channel_id: options.afkChannelID,","            afk_timeout: options.afkTimeout,","            splash: options.splash,","            owner_id: options.ownerID","        }).then((guild) => new Guild(guild, this));","    }","","    /**","    * Get the ban list of a guild","    * @arg {String} guildID The ID of the guild","    * @returns {Promise<User[]>}","    */","    getGuildBans(guildID) {","        return this.requestHandler.request(\"GET\", Endpoints.GUILD_BANS(guildID), true).then((bans) => bans.map((ban) => new User(ban.user, this)));","    }","","    /**","    * Edit a guild member","    * @arg {String} guildID The ID of the guild","    * @arg {String} memberID The ID of the member","    * @arg {Object} options The properties to edit","    * @arg {String[]} [options.roles] The array of role IDs the member should have","    * @arg {String} [options.nick] Set the member's server nickname, \"\" to remove","    * @arg {Boolean} [options.mute] Server mute the member","    * @arg {Boolean} [options.deaf] Server deafen the member","    * @arg {String} [options.channelID] The ID of the voice channel to move the member to (must be in voice)","    * @returns {Promise}","    */","    editGuildMember(guildID, memberID, options) {","        return this.requestHandler.request(\"PATCH\", Endpoints.GUILD_MEMBER(guildID, memberID), true, {","            roles: options.roles,","            nick: options.nick,","            mute: options.mute,","            deaf: options.deaf,","            channel_id: options.channelID","        });","    }","","    /**","    * Add a role to a guild member","    * @arg {String} guildID The ID of the guild","    * @arg {String} memberID The ID of the member","    * @arg {String} roleID The ID of the role","    * @returns {Promise}","    */","    addGuildMemberRole(guildID, memberID, roleID) {","        return this.requestHandler.request(\"PUT\", Endpoints.GUILD_MEMBER_ROLE(guildID, memberID, roleID), true);","    }","","    /**","    * Remve a role from a guild member","    * @arg {String} guildID The ID of the guild","    * @arg {String} memberID The ID of the member","    * @arg {String} roleID The ID of the role","    * @returns {Promise}","    */","    removeGuildMemberRole(guildID, memberID, roleID) {","        return this.requestHandler.request(\"DELETE\", Endpoints.GUILD_MEMBER_ROLE(guildID, memberID, roleID), true);","    }","","    /**","    * Edit the bot's nickname in a guild","    * @arg {String} guildID The ID of the guild","    * @arg {String} nick The nickname","    * @returns {Promise}","    */","    editNickname(guildID, nick) {","        return this.requestHandler.request(\"PATCH\", Endpoints.GUILD_MEMBER_NICK(guildID, \"@me\"), true, {","            nick","        });","    }","","    /**","    * Kick a user from a guild","    * @arg {String} guildID The ID of the guild","    * @arg {String} userID The ID of the user","    * @returns {Promise}","    */","    kickGuildMember(guildID, userID) {","        return this.requestHandler.request(\"DELETE\", Endpoints.GUILD_MEMBER(guildID, userID), true);","    }","","    /**","    * Delete a guild (bot user must be owner)","    * @arg {String} guildID The ID of the guild","    * @returns {Promise}","    */","    deleteGuild(guildID) {","        return this.requestHandler.request(\"DELETE\", Endpoints.GUILD(guildID), true);","    }","","    /**","    * Leave a guild","    * @arg {String} guildID The ID of the guild","    * @returns {Promise}","    */","    leaveGuild(guildID) {","        return this.requestHandler.request(\"DELETE\", Endpoints.USER_GUILD(\"@me\", guildID), true);","    }","","    /**","    * Get data on an OAuth2 application","    * @arg {String} [appID=\"@me\"] The client ID of the application to get data for. \"@me\" refers to the logged in user's own application","    * @returns {Promise<Object>} The bot's application data. Refer to [the official Discord API documentation entry](https://discordapp.com/developers/docs/topics/oauth2#get-current-application-information) for object structure","    */","    getOAuthApplication(appID) {","        return this.requestHandler.request(\"GET\", Endpoints.OAUTH2_APPLICATION(appID || \"@me\"), true);","    }","","    /**","    * Get user settings (user accounts only)","    * @returns {Promise<Object>} The user's settings data.","    */","    getUserSettings() {","        return this.requestHandler.request(\"GET\", Endpoints.USER_SETTINGS(\"@me\"), true);","    }","","    /**","    * Create a relationship with a user","    * @arg {String} userID The ID of the target user","    * @arg {Boolean} [block=false] If true, block the user. Otherwise, add the user as a friend","    * @returns {Promise}","    */","    addRelationship(userID, block) {","        return this.requestHandler.request(\"PUT\", Endpoints.USER_RELATIONSHIP(\"@me\", userID), true, {","            type: block ? 2 : undefined","        });","    }","","    /**","    * Remove a relationship with a user","    * @arg {String} userID The ID of the target user","    * @returns {Promise}","    */","    removeRelationship(userID) {","        return this.requestHandler.request(\"DELETE\", Endpoints.USER_RELATIONSHIP(\"@me\", userID), true);","    }","","    /**","    * Add a user to a group","    * @arg {String} groupID The ID of the target group","    * @arg {String} userID The ID of the target user","    * @returns {Promise}","    */","    addGroupRecipient(groupID, userID) {","        return this.requestHandler.request(\"PUT\", Endpoints.CHANNEL_RECIPIENT(groupID, userID), true);","    }","","    /**","    * Remove a user from a group","    * @arg {String} groupID The ID of the target group","    * @arg {String} userID The ID of the target user","    * @returns {Promise}","    */","    removeGroupRecipient(groupID, userID) {","        return this.requestHandler.request(\"DELETE\", Endpoints.CHANNEL_RECIPIENT(groupID, userID), true);","    }","","    /**","    * Get profile data for a user (user accounts only)","    * @arg {String} userID The ID of the target user","    * @returns {Promise<Object>} The user's profile data.","    */","    getUserProfile(userID) {","        return this.requestHandler.request(\"GET\", Endpoints.USER_PROFILE(userID), true);","    }","","    /**","    * Edit the current user's note for another user (user accounts only)","    * @arg {String} note The note","    * @returns {Promise}","    */","    editUserNote(userID, note) {","        return this.requestHandler.request(\"GET\", Endpoints.USER_NOTE(\"@me\", userID), true, {","            note: note","        });","    }","","    /**","    * Delete the current user's note for another user (user accounts only)","    * @returns {Promise}","    */","    deleteUserNote(userID) {","        return this.requestHandler.request(\"DELETE\", Endpoints.USER_NOTE(\"@me\", userID), true);","    }","","    /**","    * Get a channel's data via the REST API. REST mode is required to use this endpoint.","    * @arg {String} channelID The ID of the channel","    * @returns {Promise<GuildChannel | GroupChannel | PrivateChannel>}","    */","    getRESTChannel(channelID) {","        if(!this.options.restMode) {","            return Promise.reject(new Error(\"Eris REST mode is not enabled\"));","        }","        return this.requestHandler.request(\"GET\", Endpoints.CHANNEL(channelID), true).then((channel) => {","            if(channel.type === 0 || channel.type === 2) {","                return new GuildChannel(channel, null, this.options.messageLimit);","            } else if(channel.type === 1) {","                return new PrivateChannel(channel, this);","            } else if(channel.type === 3) {","                return new GroupChannel(channel, this);","            } else {","                return channel;","            }","        });","    }","","    /**","    * Get a guild's data via the REST API. REST mode is required to use this endpoint.","    * @arg {String} guildID The ID of the guild","    * @returns {Promise<Guild>}","    */","    getRESTGuild(guildID) {","        if(!this.options.restMode) {","            return Promise.reject(new Error(\"Eris REST mode is not enabled\"));","        }","        return this.requestHandler.request(\"GET\", Endpoints.GUILD(guildID), true).then((guild) => new Guild(guild, this));","    }","","    /**","    * Get a list of the user's guilds via the REST API. REST mode is required to use this endpoint.","    * @arg {Number} [limit=100] The max number of guilds to get (1 to 1000)","    * @arg {String} [before] The lowest guild ID of the next page","    * @arg {String} [after] The highest guild ID of the previous page","    * @returns {Promise<Guild[]>}","    */","    getRESTGuilds(limit, before, after) {","        if(!this.options.restMode) {","            return Promise.reject(new Error(\"Eris REST mode is not enabled\"));","        }","        return this.requestHandler.request(\"GET\", Endpoints.USER_GUILDS(\"@me\"), true, {","            limit,","            before,","            after","        }).then((guilds) => guilds.map((guild) => new Guild(guild, this)));","    }","","    /**","    * Get a guild's channels via the REST API. REST mode is required to use this endpoint.","    * @arg {String} guildID The ID of the guild","    * @returns {Promise<GuildChannel[]>}","    */","    getRESTGuildChannels(guildID) {","        if(!this.options.restMode) {","            return Promise.reject(new Error(\"Eris REST mode is not enabled\"));","        }","        return this.requestHandler.request(\"GET\", Endpoints.GUILD_CHANNELS(guildID), true).then((channels) => channels.map((channel) => new GuildChannel(channel, null, this.options.messageLimit)));","    }","","    /**","    * Get a guild's emojis via the REST API. REST mode is required to use this endpoint.","    * @arg {String} guildID The ID of the guild","    * @returns {Promise<Object[]>} An array of guild emoji objects","    */","    getRESTGuildEmojis(guildID) {","        if(!this.options.restMode) {","            return Promise.reject(new Error(\"Eris REST mode is not enabled\"));","        }","        return this.requestHandler.request(\"GET\", Endpoints.GUILD_EMOJIS(guildID), true);","    }","","    /**","    * Get a guild emoji via the REST API. REST mode is required to use this endpoint.","    * @arg {String} guildID The ID of the guild","    * @arg {String} emojiID The ID of the emoji","    * @returns {Promise<Object>} An emoji object","    */","    getRESTGuildEmoji(guildID, emojiID) {","        if(!this.options.restMode) {","            return Promise.reject(new Error(\"Eris REST mode is not enabled\"));","        }","        return this.requestHandler.request(\"GET\", Endpoints.GUILD_EMOJI(guildID, emojiID), true);","    }","","    /**","    * Get a guild's members via the REST API. REST mode is required to use this endpoint.","    * @arg {String} guildID The ID of the guild","    * @arg {Number} [limit=1] The max number of members to get (1 to 1000)","    * @arg {String} [after] The highest user ID of the previous page","    * @returns {Promise<Member[]>}","    */","    getRESTGuildMembers(guildID, limit, after) {","        if(!this.options.restMode) {","            return Promise.reject(new Error(\"Eris REST mode is not enabled\"));","        }","        return this.requestHandler.request(\"GET\", Endpoints.GUILD_MEMBERS(guildID), true, {","            limit,","            after","        }).then((members) => members.map((member) => new Member(member, null)));","    }","","    /**","    * Get a guild's members via the REST API. REST mode is required to use this endpoint.","    * @arg {String} guildID The ID of the guild","    * @arg {String} memberID The ID of the member","    * @returns {Promise<Member>}","    */","    getRESTGuildMember(guildID, memberID) {","        if(!this.options.restMode) {","            return Promise.reject(new Error(\"Eris REST mode is not enabled\"));","        }","        return this.requestHandler.request(\"GET\", Endpoints.GUILD_MEMBER(guildID, memberID), true).then((member) => new Member(member, null));","    }","","    /**","    * Get a guild's roles via the REST API. REST mode is required to use this endpoint.","    * @arg {String} guildID The ID of the guild","    * @returns {Promise<Role[]>}","    */","    getRESTGuildRoles(guildID) {","        if(!this.options.restMode) {","            return Promise.reject(new Error(\"Eris REST mode is not enabled\"));","        }","        return this.requestHandler.request(\"GET\", Endpoints.GUILD_ROLES(guildID), true).then((roles) => roles.map((role) => new Role(role, null)));","    }","","    /**","    * Get a user's data via the REST API. REST mode is required to use this endpoint.","    * @arg {String} userID The ID of the user","    * @returns {Promise<User>}","    */","    getRESTUser(userID) {","        if(!this.options.restMode) {","            return Promise.reject(new Error(\"Eris REST mode is not enabled\"));","        }","        return this.requestHandler.request(\"GET\", Endpoints.USER(userID), true).then((user) => new User(user, this));","    }","","    /**","    * Search a channel's messages","    * @arg {String} channelID The ID of the channel","    * @arg {Object} query Search parameters","    * @arg {String} [query.sortBy=\"timestamp\"] What to sort by, either \"timestamp\" or \"relevance\"","    * @arg {String} [query.sortOrder=\"desc\"] What order to sort by, either \"asc\" or \"desc\"","    * @arg {String} [query.content] Filter results by a content string","    * @arg {String} [query.authorID] Filter results by an author ID","    * @arg {String} [query.minID] The minimum message ID to return results for","    * @arg {String} [query.maxID] The maximum message ID to return results for","    * @arg {Number} [query.limit=25] How many messages to return, 1 <= limit <= 25","    * @arg {Number} [query.offset=0] The query index of the first message to be returned, 0 <= offset <= 5000","    * @arg {Number} [query.contextSize=2] How many context messages around each result to return.","    * For example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned","    * @arg {String} [query.has] Only return messages with an \"attachment\", \"embed\", or \"link\"","    * @arg {String} [query.embedProviders] Filter results by embed provider","    * @arg {String} [query.embedTypes] Filter results by embed type","    * @arg {String} [query.attachmentExtensions] Filter results by attachment extension","    * @arg {String} [query.attachmentFilename] Filter results by attachment filename","    * @returns {Promise<Object>} A search result object. The object will have a `totalResults` key and `results` key.","    * Each entry in the result array is an array of Message objects.","    * In each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.","    * Sample return: ```","    * {","    *     totalResults: 2,","    *     results: [","    *         [Message, Message, Message (Message.hit = true), Message],","    *         [Message, Message, Message (Message.hit = true), Message, Message]","    *     ]","    * }","    * ```","    */","    searchChannelMessages(channelID, query) {","        return this.requestHandler.request(\"GET\", Endpoints.CHANNEL_MESSAGES_SEARCH(channelID), true, {","            sort_by: query.sortBy,","            sort_order: query.sortOrder,","            content: query.content,","            author_id: query.authorID,","            min_id: query.minID,","            max_id: query.maxID,","            limit: query.limit,","            offset: query.offset,","            context_size: query.contextSize,","            has: query.has,","            embed_providers: query.embedProviders,","            embed_types: query.embedTypes,","            attachment_extensions: query.attachmentExtensions,","            attachment_filename: query.attachmentFilename","        }).then((results) => ({","            totalResults: results.total_results,","            results: results.messages.map((result) => result.map((message) => new Message(message, this)))","        }));","    }","","    /**","    * Search a guild's messages","    * @arg {String} guildID The ID of the guild","    * @arg {Object} query Search parameters","    * @arg {String} [query.sortBy=\"timestamp\"] What to sort by, either \"timestamp\" or \"relevance\"","    * @arg {String} [query.sortOrder=\"desc\"] What order to sort by, either \"asc\" or \"desc\"","    * @arg {String} [query.content] Filter results by a content string","    * @arg {String} [query.authorID] Filter results by an author ID","    * @arg {String} [query.minID] The minimum message ID to return results for","    * @arg {String} [query.maxID] The maximum message ID to return results for","    * @arg {Number} [query.limit=25] How many messages to return, 1 <= limit <= 25","    * @arg {Number} [query.offset=0] The query index of the first message to be returned, 0 <= offset <= 5000","    * @arg {Number} [query.contextSize=2] How many context messages around each result to return.","    * For example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned","    * @arg {String} [query.has] Only return messages with an \"attachment\", \"embed\", or \"link\"","    * @arg {String} [query.embedProviders] Filter results by embed provider","    * @arg {String} [query.embedTypes] Filter results by embed type","    * @arg {String} [query.attachmentExtensions] Filter results by attachment extension","    * @arg {String} [query.attachmentFilename] Filter results by attachment filename","    * @arg {String[]} [query.channelIDs] Filter results by channel ID","    * @returns {Promise<Object>} A search result object. The object will have a `totalResults` key and `results` key.","    * Each entry in the result array is an array of Message objects.","    * In each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.","    * Sample return: ```","    * {","    *     totalResults: 2,","    *     results: [","    *         [Message, Message, Message (Message.hit = true), Message],","    *         [Message, Message, Message (Message.hit = true), Message, Message]","    *     ]","    * }","    * ```","    */","    searchGuildMessages(guildID, query) {","        return this.requestHandler.request(\"GET\", Endpoints.GUILD_MESSAGES_SEARCH(guildID), true, {","            sort_by: query.sortBy,","            sort_order: query.sortOrder,","            content: query.content,","            author_id: query.authorID,","            min_id: query.minID,","            max_id: query.maxID,","            limit: query.limit,","            offset: query.offset,","            context_size: query.contextSize,","            has: query.has,","            embed_providers: query.embedProviders,","            embed_types: query.embedTypes,","            attachment_extensions: query.attachmentExtensions,","            attachment_filename: query.attachmentFilename,","            channel_id: query.channelIDs","        }).then((results) => ({","            totalResults: results.total_results,","            results: results.messages.map((result) => result.map((message) => new Message(message, this)))","        }));","    }","}","","module.exports = Client;",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"23":1,"24":1,"25":1,"27":1,"29":1,"30":1,"31":1,"86":0,"88":0,"107":0,"108":0,"109":0,"112":0,"113":0,"115":0,"116":0,"117":0,"119":0,"122":0,"123":0,"125":0,"126":0,"129":0,"131":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"154":0,"155":0,"156":0,"157":0,"161":0,"169":0,"170":0,"171":0,"173":0,"174":0,"176":0,"177":0,"179":0,"180":0,"181":0,"184":0,"185":0,"194":0,"202":0,"203":0,"205":0,"214":0,"215":0,"216":0,"218":0,"230":0,"231":0,"232":0,"234":0,"235":0,"237":0,"243":0,"244":0,"245":0,"247":0,"255":0,"256":0,"257":0,"259":0,"265":0,"277":0,"278":0,"281":0,"282":0,"283":0,"285":0,"286":0,"288":0,"289":0,"299":0,"310":0,"311":0,"312":0,"314":0,"317":0,"333":0,"334":0,"335":0,"338":0,"346":0,"347":0,"349":0,"361":0,"362":0,"363":0,"364":0,"366":0,"367":0,"369":0,"370":0,"371":0,"372":0,"373":0,"375":0,"377":0,"389":0,"398":0,"411":0,"425":0,"434":0,"448":0,"449":0,"454":0,"463":0,"473":0,"485":0,"498":0,"519":0,"520":0,"522":0,"523":0,"525":0,"543":0,"544":0,"545":0,"555":0,"564":0,"577":0,"589":0,"598":0,"612":0,"628":0,"639":0,"640":0,"642":0,"643":0,"644":0,"645":0,"647":0,"648":0,"650":0,"651":0,"652":0,"653":0,"654":0,"656":0,"658":0,"671":0,"681":0,"683":0,"693":0,"695":0,"704":0,"713":0,"714":0,"715":0,"717":0,"719":0,"729":0,"738":0,"746":0,"757":0,"766":0,"767":0,"769":0,"772":0,"781":0,"784":0,"794":0,"807":0,"808":0,"809":0,"810":0,"811":0,"816":0,"817":0,"819":0,"820":0,"821":0,"822":0,"824":0,"825":0,"828":0,"831":0,"836":0,"837":0,"838":0,"840":0,"841":0,"852":0,"870":0,"871":0,"874":0,"875":0,"878":0,"879":0,"881":0,"882":0,"884":0,"885":0,"887":0,"901":0,"902":0,"905":0,"906":0,"909":0,"910":0,"912":0,"913":0,"915":0,"916":0,"918":0,"928":0,"938":0,"950":0,"951":0,"953":0,"955":0,"967":0,"968":0,"970":0,"982":0,"983":0,"985":0,"995":0,"1005":0,"1015":0,"1016":0,"1018":0,"1019":0,"1022":0,"1023":0,"1024":0,"1025":0,"1028":0,"1029":0,"1031":0,"1033":0,"1048":0,"1049":0,"1051":0,"1052":0,"1053":0,"1054":0,"1055":0,"1056":0,"1057":0,"1058":0,"1059":0,"1060":0,"1061":0,"1063":0,"1064":0,"1067":0,"1068":0,"1070":0,"1071":0,"1075":0,"1076":0,"1077":0,"1078":0,"1079":0,"1081":0,"1082":0,"1083":0,"1085":0,"1086":0,"1087":0,"1089":0,"1090":0,"1092":0,"1094":0,"1095":0,"1096":0,"1098":0,"1101":0,"1102":0,"1112":0,"1121":0,"1122":0,"1136":0,"1150":0,"1160":0,"1169":0,"1180":0,"1181":0,"1183":0,"1195":0,"1206":0,"1207":0,"1211":0,"1230":0,"1240":0,"1249":0,"1265":0,"1282":0,"1293":0,"1303":0,"1315":0,"1324":0,"1333":0,"1342":0,"1350":0,"1360":0,"1371":0,"1381":0,"1391":0,"1400":0,"1409":0,"1419":0,"1428":0,"1429":0,"1431":0,"1432":0,"1433":0,"1434":0,"1435":0,"1436":0,"1437":0,"1439":0,"1450":0,"1451":0,"1453":0,"1464":0,"1465":0,"1467":0,"1471":0,"1480":0,"1481":0,"1483":0,"1492":0,"1493":0,"1495":0,"1505":0,"1506":0,"1508":0,"1519":0,"1520":0,"1522":0,"1525":0,"1535":0,"1536":0,"1538":0,"1547":0,"1548":0,"1550":0,"1559":0,"1560":0,"1562":0,"1598":0,"1613":0,"1615":0,"1653":0,"1669":0,"1671":0,"1676":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/GuildChannel.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/GuildChannel.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"(anonymous_1)","line":29,"loc":{"start":{"line":29,"column":15},"end":{"line":29,"column":43}}},"2":{"name":"(anonymous_2)","line":45,"loc":{"start":{"line":45,"column":10},"end":{"line":45,"column":17}}},"3":{"name":"(anonymous_3)","line":64,"loc":{"start":{"line":64,"column":17},"end":{"line":64,"column":28}}},"4":{"name":"(anonymous_4)","line":86,"loc":{"start":{"line":86,"column":15},"end":{"line":86,"column":18}}},"5":{"name":"(anonymous_5)","line":99,"loc":{"start":{"line":99,"column":8},"end":{"line":99,"column":18}}},"6":{"name":"(anonymous_6)","line":108,"loc":{"start":{"line":108,"column":16},"end":{"line":108,"column":27}}},"7":{"name":"(anonymous_7)","line":116,"loc":{"start":{"line":116,"column":10},"end":{"line":116,"column":13}}},"8":{"name":"(anonymous_8)","line":128,"loc":{"start":{"line":128,"column":18},"end":{"line":128,"column":51}}},"9":{"name":"(anonymous_9)","line":137,"loc":{"start":{"line":137,"column":20},"end":{"line":137,"column":34}}},"10":{"name":"(anonymous_10)","line":145,"loc":{"start":{"line":145,"column":14},"end":{"line":145,"column":17}}},"11":{"name":"(anonymous_11)","line":157,"loc":{"start":{"line":157,"column":16},"end":{"line":157,"column":26}}},"12":{"name":"(anonymous_12)","line":165,"loc":{"start":{"line":165,"column":15},"end":{"line":165,"column":18}}},"13":{"name":"(anonymous_13)","line":176,"loc":{"start":{"line":176,"column":17},"end":{"line":176,"column":27}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":37}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":49}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":35}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":37}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":43}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":61}},"8":{"start":{"line":30,"column":8},"end":{"line":30,"column":20}},"9":{"start":{"line":31,"column":8},"end":{"line":31,"column":27}},"10":{"start":{"line":32,"column":8},"end":{"line":41,"column":9}},"11":{"start":{"line":33,"column":12},"end":{"line":33,"column":55}},"12":{"start":{"line":35,"column":12},"end":{"line":37,"column":13}},"13":{"start":{"line":36,"column":16},"end":{"line":36,"column":71}},"14":{"start":{"line":38,"column":12},"end":{"line":38,"column":66}},"15":{"start":{"line":39,"column":12},"end":{"line":39,"column":62}},"16":{"start":{"line":40,"column":12},"end":{"line":40,"column":105}},"17":{"start":{"line":42,"column":8},"end":{"line":42,"column":26}},"18":{"start":{"line":46,"column":8},"end":{"line":46,"column":68}},"19":{"start":{"line":47,"column":8},"end":{"line":47,"column":72}},"20":{"start":{"line":48,"column":8},"end":{"line":48,"column":84}},"21":{"start":{"line":49,"column":8},"end":{"line":49,"column":80}},"22":{"start":{"line":50,"column":8},"end":{"line":50,"column":90}},"23":{"start":{"line":51,"column":8},"end":{"line":56,"column":9}},"24":{"start":{"line":52,"column":12},"end":{"line":52,"column":76}},"25":{"start":{"line":53,"column":12},"end":{"line":55,"column":15}},"26":{"start":{"line":54,"column":16},"end":{"line":54,"column":57}},"27":{"start":{"line":65,"column":8},"end":{"line":65,"column":54}},"28":{"start":{"line":66,"column":8},"end":{"line":66,"column":49}},"29":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"30":{"start":{"line":68,"column":12},"end":{"line":68,"column":51}},"31":{"start":{"line":70,"column":8},"end":{"line":70,"column":21}},"32":{"start":{"line":71,"column":8},"end":{"line":71,"column":22}},"33":{"start":{"line":72,"column":8},"end":{"line":77,"column":9}},"34":{"start":{"line":73,"column":12},"end":{"line":76,"column":13}},"35":{"start":{"line":74,"column":16},"end":{"line":74,"column":42}},"36":{"start":{"line":75,"column":16},"end":{"line":75,"column":44}},"37":{"start":{"line":78,"column":8},"end":{"line":78,"column":50}},"38":{"start":{"line":79,"column":8},"end":{"line":79,"column":70}},"39":{"start":{"line":80,"column":8},"end":{"line":82,"column":9}},"40":{"start":{"line":81,"column":12},"end":{"line":81,"column":86}},"41":{"start":{"line":83,"column":8},"end":{"line":83,"column":42}},"42":{"start":{"line":87,"column":8},"end":{"line":87,"column":31}},"43":{"start":{"line":100,"column":8},"end":{"line":100,"column":99}},"44":{"start":{"line":109,"column":8},"end":{"line":109,"column":108}},"45":{"start":{"line":117,"column":8},"end":{"line":117,"column":92}},"46":{"start":{"line":129,"column":8},"end":{"line":129,"column":132}},"47":{"start":{"line":138,"column":8},"end":{"line":138,"column":115}},"48":{"start":{"line":146,"column":8},"end":{"line":146,"column":96}},"49":{"start":{"line":158,"column":8},"end":{"line":158,"column":107}},"50":{"start":{"line":166,"column":8},"end":{"line":166,"column":97}},"51":{"start":{"line":177,"column":8},"end":{"line":177,"column":108}},"52":{"start":{"line":181,"column":0},"end":{"line":181,"column":30}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":12},"end":{"line":35,"column":12}},{"start":{"line":35,"column":12},"end":{"line":35,"column":12}}]},"3":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":15},"end":{"line":35,"column":35}},{"start":{"line":35,"column":39},"end":{"line":35,"column":44}}]},"4":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":33},"end":{"line":39,"column":53}},{"start":{"line":39,"column":57},"end":{"line":39,"column":61}}]},"5":{"line":40,"type":"cond-expr","locations":[{"start":{"line":40,"column":62},"end":{"line":40,"column":97}},{"start":{"line":40,"column":100},"end":{"line":40,"column":104}}]},"6":{"line":46,"type":"cond-expr","locations":[{"start":{"line":46,"column":46},"end":{"line":46,"column":55}},{"start":{"line":46,"column":58},"end":{"line":46,"column":67}}]},"7":{"line":47,"type":"cond-expr","locations":[{"start":{"line":47,"column":48},"end":{"line":47,"column":58}},{"start":{"line":47,"column":61},"end":{"line":47,"column":71}}]},"8":{"line":48,"type":"cond-expr","locations":[{"start":{"line":48,"column":54},"end":{"line":48,"column":67}},{"start":{"line":48,"column":70},"end":{"line":48,"column":83}}]},"9":{"line":49,"type":"cond-expr","locations":[{"start":{"line":49,"column":52},"end":{"line":49,"column":64}},{"start":{"line":49,"column":67},"end":{"line":49,"column":79}}]},"10":{"line":50,"type":"cond-expr","locations":[{"start":{"line":50,"column":57},"end":{"line":50,"column":72}},{"start":{"line":50,"column":75},"end":{"line":50,"column":89}}]},"11":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":51,"column":8}},{"start":{"line":51,"column":8},"end":{"line":51,"column":8}}]},"12":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":8}},{"start":{"line":67,"column":8},"end":{"line":67,"column":8}}]},"13":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":12},"end":{"line":73,"column":12}},{"start":{"line":73,"column":12},"end":{"line":73,"column":12}}]},"14":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":15},"end":{"line":73,"column":43}},{"start":{"line":73,"column":48},"end":{"line":73,"column":81}},{"start":{"line":73,"column":85},"end":{"line":73,"column":123}}]},"15":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":8},"end":{"line":80,"column":8}},{"start":{"line":80,"column":8},"end":{"line":80,"column":8}}]}},"code":["\"use strict\";","","const Channel = require(\"./Channel\");","const Collection = require(\"../util/Collection\");","const Member = require(\"./Member\");","const Message = require(\"./Message\");","const Permission = require(\"./Permission\");","const Permissions = require(\"../Constants\").Permissions;","const PermissionOverwrite = require(\"./PermissionOverwrite\");","","/**","* Represents a guild channel","* @extends Channel","* @prop {String} mention A string that mentions the channel","* @prop {Guild} guild The guild that owns the channel","* @prop {Collection<Message>} messages Collection of Messages in this channel","* @prop {String} lastMessageID The ID of the last message in this channel","* @prop {Number} lastPinTimestamp The timestamp of the last pinned message","* @prop {Collection<PermissionOverwrite>} permissionOverwrites Collection of PermissionOverwrites in this channel","* @prop {Number} type The type of the channel, either 0 (text) or 2 (voice)","* @prop {String} name The name of the channel","* @prop {Number} position The position of the channel","* @prop {String?} topic The topic of the channel (text channels only)","* @prop {Number?} bitrate The bitrate of the channel (voice channels only)","* @prop {Number?} userLimit The max number of users that can join the channel (voice channels only)","* @prop {Collection<Member>?} voiceMembers Collection of Members in this channel (voice channels only)","*/","class GuildChannel extends Channel {","    constructor(data, guild, messageLimit) {","        super(data);","        this.guild = guild;","        if(this.type === 2) {","            this.voiceMembers = new Collection(Member);","        } else {","            if(messageLimit == null && guild) {","                messageLimit = guild.shard.client.options.messageLimit;","            }","            this.messages = new Collection(Message, messageLimit);","            this.lastMessageID = data.last_message_id || null;","            this.lastPinTimestamp = data.last_pin_timestamp ? Date.parse(data.last_pin_timestamp) : null;","        }","        this.update(data);","    }","","    update(data) {","        this.name = data.name !== undefined ? data.name : this.name;","        this.topic = data.topic !== undefined ? data.topic : this.topic;","        this.position = data.position !== undefined ? data.position : this.position;","        this.bitrate = data.bitrate !== undefined ? data.bitrate : this.bitrate;","        this.userLimit = data.user_limit !== undefined ? data.user_limit : this.userLimit;","        if(data.permission_overwrites) {","            this.permissionOverwrites = new Collection(PermissionOverwrite);","            data.permission_overwrites.forEach((overwrite) => {","                this.permissionOverwrites.add(overwrite);","            });","        }","    }","","    /**","    * Get the channel-specific permissions of a member","    * @arg {String} memberID The ID of the member","    * @returns {Permission}","    */","    permissionsOf(memberID) {","        var member = this.guild.members.get(memberID);","        var permission = member.permission.allow;","        if(permission & Permissions.administrator) {","            return new Permission(Permissions.all);","        }","        var deny = 0;","        var allow = 0;","        for(var overwrite of this.permissionOverwrites) {","            if(overwrite[1].type === \"role\" && (overwrite[1].id === this.guild.id || ~member.roles.indexOf(overwrite[1].id))) {","                deny |= overwrite[1].deny;","                allow |= overwrite[1].allow;","            }","        }","        permission = (permission & ~deny) | allow;","        var memberOverwrite = this.permissionOverwrites.get(memberID);","        if(memberOverwrite) {","            permission = (permission & ~memberOverwrite.deny) | memberOverwrite.allow;","        }","        return new Permission(permission);","    }","","    get mention() {","        return `<#${this.id}>`;","    }","","    /**","    * Edit the channel's properties","    * @arg {Object} options The properties to edit","    * @arg {String} [options.name] The name of the channel","    * @arg {String} [options.topic] The topic of the channel (guild text channels only)","    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)","    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)","    * @returns {Promise<GuildChannel>}","    */","    edit(options) {","        return this.guild.shard.client.editChannel.call(this.guild.shard.client, this.id, options);","    }","","    /**","    * Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.","    * @arg {Number} position The new position of the channel","    * @returns {Promise}","    */","    editPosition(position) {","        return this.guild.shard.client.editChannelPosition.call(this.guild.shard.client, this.id, position);","    }","","    /**","    * Delete the channel","    * @returns {Promise}","    */","    delete() {","        return this.guild.shard.client.deleteChannel.call(this.guild.shard.client, this.id);","    }","","    /**","    * Create a channel permission overwrite","    * @arg {String} overwriteID The ID of the overwritten user or role","    * @arg {Number} allow The permissions number for allowed permissions","    * @arg {Number} deny The permissions number for denied permissions","    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"","    * @returns {Promise<PermissionOverwrite>}","    */","    editPermission(overwriteID, allow, deny, type) {","        return this.guild.shard.client.editChannelPermission.call(this.guild.shard.client, this.id, overwriteID, allow, deny, type);","    }","","    /**","    * Delete a channel permission overwrite","    * @arg {String} overwriteID The ID of the overwritten user or role","    * @returns {Promise}","    */","    deletePermission(overwriteID) {","        return this.guild.shard.client.deleteChannelPermission.call(this.guild.shard.client, this.id, overwriteID);","    }","","    /**","    * Get all invites in the channel","    * @returns {Promise<Invite[]>}","    */","    getInvites() {","        return this.guild.shard.client.getChannelInvites.call(this.guild.shard.client, this.id);","    }","","    /**","    * Create an invite for the channel","    * @arg {Object} [options] Invite generation options","    * @arg {Number} [options.maxAge] How long the invite should last in seconds","    * @arg {Number} [options.maxUses] How many uses the invite should last for","    * @arg {Boolean} [options.temporary] Whether the invite is temporary or not","    * @returns {Promise<Invite>}","    */","    createInvite(options) {","        return this.guild.shard.client.createChannelInvite.call(this.guild.shard.client, this.id, options);","    }","","    /**","    * Get all the webhooks in the channel","    * @returns {Promise<Object[]>} Resolves with an array of webhook objects","    */","    getWebhooks() {","        return this.guild.shard.client.getChannelWebhooks.call(this.guild.shard.client, this.id);","    }","","    /**","    * Create a channel webhook","    * @arg {Object} options Webhook options","    * @arg {String} options.name The default name","    * @arg {String} options.avatar The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings","    * @returns {Promise<Object>} Resolves with a webhook object","    */","    createWebhook(options) {","        return this.guild.shard.client.createChannelWebhook.call(this.guild.shard.client, this.id, options);","    }","}","","module.exports = GuildChannel;",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"30":0,"31":0,"32":0,"33":0,"35":0,"36":0,"38":0,"39":0,"40":0,"42":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"65":0,"66":0,"67":0,"68":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"78":0,"79":0,"80":0,"81":0,"83":0,"87":0,"100":0,"109":0,"117":0,"129":0,"138":0,"146":0,"158":0,"166":0,"177":0,"181":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Channel.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Channel.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":15},"end":{"line":11,"column":22}}},"2":{"name":"(anonymous_2)","line":20,"loc":{"start":{"line":20,"column":14},"end":{"line":20,"column":17}}},"3":{"name":"(anonymous_3)","line":29,"loc":{"start":{"line":29,"column":14},"end":{"line":29,"column":26}}},"4":{"name":"(anonymous_4)","line":41,"loc":{"start":{"line":41,"column":15},"end":{"line":41,"column":46}}},"5":{"name":"(anonymous_5)","line":49,"loc":{"start":{"line":49,"column":11},"end":{"line":49,"column":14}}},"6":{"name":"(anonymous_6)","line":66,"loc":{"start":{"line":66,"column":17},"end":{"line":66,"column":33}}},"7":{"name":"(anonymous_7)","line":79,"loc":{"start":{"line":79,"column":15},"end":{"line":79,"column":36}}},"8":{"name":"(anonymous_8)","line":88,"loc":{"start":{"line":88,"column":14},"end":{"line":88,"column":26}}},"9":{"name":"(anonymous_9)","line":97,"loc":{"start":{"line":97,"column":16},"end":{"line":97,"column":28}}},"10":{"name":"(anonymous_10)","line":108,"loc":{"start":{"line":108,"column":22},"end":{"line":108,"column":51}}},"11":{"name":"(anonymous_11)","line":119,"loc":{"start":{"line":119,"column":22},"end":{"line":119,"column":52}}},"12":{"name":"(anonymous_12)","line":130,"loc":{"start":{"line":130,"column":25},"end":{"line":130,"column":55}}},"13":{"name":"(anonymous_13)","line":139,"loc":{"start":{"line":139,"column":26},"end":{"line":139,"column":38}}},"14":{"name":"(anonymous_14)","line":148,"loc":{"start":{"line":148,"column":17},"end":{"line":148,"column":29}}},"15":{"name":"(anonymous_15)","line":157,"loc":{"start":{"line":157,"column":17},"end":{"line":157,"column":29}}},"16":{"name":"(anonymous_16)","line":166,"loc":{"start":{"line":166,"column":18},"end":{"line":166,"column":31}}},"17":{"name":"(anonymous_17)","line":178,"loc":{"start":{"line":178,"column":9},"end":{"line":178,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":12,"column":8},"end":{"line":12,"column":23}},"3":{"start":{"line":13,"column":8},"end":{"line":13,"column":30}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":132}},"5":{"start":{"line":30,"column":8},"end":{"line":30,"column":136}},"6":{"start":{"line":42,"column":8},"end":{"line":42,"column":156}},"7":{"start":{"line":50,"column":8},"end":{"line":50,"column":122}},"8":{"start":{"line":67,"column":8},"end":{"line":67,"column":143}},"9":{"start":{"line":80,"column":8},"end":{"line":80,"column":146}},"10":{"start":{"line":89,"column":8},"end":{"line":89,"column":136}},"11":{"start":{"line":98,"column":8},"end":{"line":98,"column":138}},"12":{"start":{"line":109,"column":8},"end":{"line":109,"column":161}},"13":{"start":{"line":120,"column":8},"end":{"line":120,"column":162}},"14":{"start":{"line":131,"column":8},"end":{"line":131,"column":165}},"15":{"start":{"line":140,"column":8},"end":{"line":140,"column":148}},"16":{"start":{"line":149,"column":8},"end":{"line":149,"column":139}},"17":{"start":{"line":158,"column":8},"end":{"line":158,"column":139}},"18":{"start":{"line":167,"column":8},"end":{"line":167,"column":141}},"19":{"start":{"line":179,"column":8},"end":{"line":179,"column":157}},"20":{"start":{"line":183,"column":0},"end":{"line":183,"column":25}}},"branchMap":{"1":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":16},"end":{"line":21,"column":28}},{"start":{"line":21,"column":32},"end":{"line":21,"column":55}}]},"2":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":81},"end":{"line":21,"column":93}},{"start":{"line":21,"column":97},"end":{"line":21,"column":120}}]},"3":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":16},"end":{"line":30,"column":28}},{"start":{"line":30,"column":32},"end":{"line":30,"column":55}}]},"4":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":74},"end":{"line":30,"column":86}},{"start":{"line":30,"column":90},"end":{"line":30,"column":113}}]},"5":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":16},"end":{"line":42,"column":28}},{"start":{"line":42,"column":32},"end":{"line":42,"column":55}}]},"6":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":75},"end":{"line":42,"column":87}},{"start":{"line":42,"column":91},"end":{"line":42,"column":114}}]},"7":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":16},"end":{"line":50,"column":28}},{"start":{"line":50,"column":32},"end":{"line":50,"column":55}}]},"8":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":71},"end":{"line":50,"column":83}},{"start":{"line":50,"column":87},"end":{"line":50,"column":110}}]},"9":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":16},"end":{"line":67,"column":28}},{"start":{"line":67,"column":32},"end":{"line":67,"column":55}}]},"10":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":77},"end":{"line":67,"column":89}},{"start":{"line":67,"column":93},"end":{"line":67,"column":116}}]},"11":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":16},"end":{"line":80,"column":28}},{"start":{"line":80,"column":32},"end":{"line":80,"column":55}}]},"12":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":75},"end":{"line":80,"column":87}},{"start":{"line":80,"column":91},"end":{"line":80,"column":114}}]},"13":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":16},"end":{"line":89,"column":28}},{"start":{"line":89,"column":32},"end":{"line":89,"column":55}}]},"14":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":74},"end":{"line":89,"column":86}},{"start":{"line":89,"column":90},"end":{"line":89,"column":113}}]},"15":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":16},"end":{"line":98,"column":28}},{"start":{"line":98,"column":32},"end":{"line":98,"column":55}}]},"16":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":76},"end":{"line":98,"column":88}},{"start":{"line":98,"column":92},"end":{"line":98,"column":115}}]},"17":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":16},"end":{"line":109,"column":28}},{"start":{"line":109,"column":32},"end":{"line":109,"column":55}}]},"18":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":82},"end":{"line":109,"column":94}},{"start":{"line":109,"column":98},"end":{"line":109,"column":121}}]},"19":{"line":120,"type":"binary-expr","locations":[{"start":{"line":120,"column":16},"end":{"line":120,"column":28}},{"start":{"line":120,"column":32},"end":{"line":120,"column":55}}]},"20":{"line":120,"type":"binary-expr","locations":[{"start":{"line":120,"column":82},"end":{"line":120,"column":94}},{"start":{"line":120,"column":98},"end":{"line":120,"column":121}}]},"21":{"line":131,"type":"binary-expr","locations":[{"start":{"line":131,"column":16},"end":{"line":131,"column":28}},{"start":{"line":131,"column":32},"end":{"line":131,"column":55}}]},"22":{"line":131,"type":"binary-expr","locations":[{"start":{"line":131,"column":85},"end":{"line":131,"column":97}},{"start":{"line":131,"column":101},"end":{"line":131,"column":124}}]},"23":{"line":140,"type":"binary-expr","locations":[{"start":{"line":140,"column":16},"end":{"line":140,"column":28}},{"start":{"line":140,"column":32},"end":{"line":140,"column":55}}]},"24":{"line":140,"type":"binary-expr","locations":[{"start":{"line":140,"column":86},"end":{"line":140,"column":98}},{"start":{"line":140,"column":102},"end":{"line":140,"column":125}}]},"25":{"line":149,"type":"binary-expr","locations":[{"start":{"line":149,"column":16},"end":{"line":149,"column":28}},{"start":{"line":149,"column":32},"end":{"line":149,"column":55}}]},"26":{"line":149,"type":"binary-expr","locations":[{"start":{"line":149,"column":77},"end":{"line":149,"column":89}},{"start":{"line":149,"column":93},"end":{"line":149,"column":116}}]},"27":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":16},"end":{"line":158,"column":28}},{"start":{"line":158,"column":32},"end":{"line":158,"column":55}}]},"28":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":77},"end":{"line":158,"column":89}},{"start":{"line":158,"column":93},"end":{"line":158,"column":116}}]},"29":{"line":167,"type":"binary-expr","locations":[{"start":{"line":167,"column":16},"end":{"line":167,"column":28}},{"start":{"line":167,"column":32},"end":{"line":167,"column":55}}]},"30":{"line":167,"type":"binary-expr","locations":[{"start":{"line":167,"column":78},"end":{"line":167,"column":90}},{"start":{"line":167,"column":94},"end":{"line":167,"column":117}}]},"31":{"line":179,"type":"binary-expr","locations":[{"start":{"line":179,"column":16},"end":{"line":179,"column":28}},{"start":{"line":179,"column":32},"end":{"line":179,"column":55}}]},"32":{"line":179,"type":"binary-expr","locations":[{"start":{"line":179,"column":76},"end":{"line":179,"column":88}},{"start":{"line":179,"column":92},"end":{"line":179,"column":115}}]}},"code":["\"use strict\";","","const Base = require(\"./Base\");","","/**","* Represents a channel. You also probably want to look at GroupChannel, GuildChannel, and PrivateChannel","* @prop {String} id The ID of the channel","* @prop {Number} createdAt Timestamp of the channel's creation","*/","class Channel extends Base {","    constructor(data) {","        super(data.id);","        this.type = data.type;","    }","","    /**","    * Send typing status in a text channel","    * @returns {Promise}","    */","    sendTyping() {","        return (this._client || this.guild.shard.client).sendChannelTyping.call((this._client || this.guild.shard.client), this.id);","    }","","    /**","    * Get a previous message in a text channel","    * @arg {String} messageID The ID of the message","    * @returns {Promise<Message>}","    */","    getMessage(messageID) {","        return (this._client || this.guild.shard.client).getMessage.call((this._client || this.guild.shard.client), this.id, messageID);","    }","","    /**","    * Get a previous message in a text channel","    * @arg {Number} [limit=50] The max number of messages to get","    * @arg {String} [before] Get messages before this message ID","    * @arg {String} [after] Get messages after this message ID","    * @arg {String} [around] Get messages around this message ID (does not work with limit > 100)","    * @returns {Promise<Message[]>}","    */","    getMessages(limit, before, after, around) {","        return (this._client || this.guild.shard.client).getMessages.call((this._client || this.guild.shard.client), this.id, limit, before, after, around);","    }","","    /**","    * Get all the pins in a text channel","    * @returns {Promise<Message[]>}","    */","    getPins() {","        return (this._client || this.guild.shard.client).getPins.call((this._client || this.guild.shard.client), this.id);","    }","","    /**","    * Create a message in a text channel","    * Note: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChanne() to get the DM channel ID for a user","    * @arg {String | Object} content A string or object. If an object is passed:","    * @arg {String} content.content A content string","    * @arg {Boolean} [content.tts] Set the message TTS flag","    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)","    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure","    * @arg {Object} [file] A file object","    * @arg {String} file.file A buffer containing file data","    * @arg {String} file.name What to name the file","    * @returns {Promise<Message>}","    */","    createMessage(content, file) {","        return (this._client || this.guild.shard.client).createMessage.call((this._client || this.guild.shard.client), this.id, content, file);","    }","","    /**","    * Edit a message","    * @arg {String} messageID The ID of the message","    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:","    * @arg {String} content.content A content string","    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)","    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure","    * @returns {Promise<Message>}","    */","    editMessage(messageID, content) {","        return (this._client || this.guild.shard.client).editMessage.call((this._client || this.guild.shard.client), this.id, messageID, content);","    }","","    /**","    * Pin a message","    * @arg {String} messageID The ID of the message","    * @returns {Promise}","    */","    pinMessage(messageID) {","        return (this._client || this.guild.shard.client).pinMessage.call((this._client || this.guild.shard.client), this.id, messageID);","    }","","    /**","    * Unpin a message","    * @arg {String} messageID The ID of the message","    * @returns {Promise}","    */","    unpinMessage(messageID) {","        return (this._client || this.guild.shard.client).unpinMessage.call((this._client || this.guild.shard.client), this.id, messageID);","    }","","    /**","    * Get a list of users who reacted with a specific reaction","    * @arg {String} messageID The ID of the message","    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)","    * @arg {Number} [limit=100] The maximum number of users to get","    * @returns {Promise<User[]>}","    */","    getMessageReaction(messageID, reaction, limit) {","        return (this._client || this.guild.shard.client).getMessageReaction.call((this._client || this.guild.shard.client), this.id, messageID, reaction, limit);","    }","","    /**","    * Add a reaction to a message","    * @arg {String} messageID The ID of the message","    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)","    * @arg {String} [userID=\"@me\"] The ID of the user to react as","    * @returns {Promise}","    */","    addMessageReaction(messageID, reaction, userID) {","        return (this._client || this.guild.shard.client).addMessageReaction.call((this._client || this.guild.shard.client), this.id, messageID, reaction, userID);","    }","","    /**","    * Remove a reaction from a message","    * @arg {String} messageID The ID of the message","    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)","    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for","    * @returns {Promise}","    */","    removeMessageReaction(messageID, reaction, userID) {","        return (this._client || this.guild.shard.client).removeMessageReaction.call((this._client || this.guild.shard.client), this.id, messageID, reaction, userID);","    }","","    /**","    * Remove all reactions from a message","    * @arg {String} messageID The ID of the message","    * @returns {Promise}","    */","    removeMessageReactions(messageID) {","        return (this._client || this.guild.shard.client).removeMessageReactions.call((this._client || this.guild.shard.client), this.id, messageID);","    }","","    /**","    * Delete a message","    * @arg {String} messageID The ID of the message","    * @returns {Promise}","    */","    deleteMessage(messageID) {","        return (this._client || this.guild.shard.client).deleteMessage.call((this._client || this.guild.shard.client), this.id, messageID);","    }","","    /**","    * Un-send a message. You're welcome Programmix","    * @arg {String} messageID The ID of the message","    * @returns {Promise}","    */","    unsendMessage(messageID) {","        return (this._client || this.guild.shard.client).deleteMessage.call((this._client || this.guild.shard.client), this.id, messageID);","    }","","    /**","    * Bulk delete messages (bot accounts only)","    * @arg {String[]} messageIDs Array of message IDs to delete","    * @returns {Promise}","    */","    deleteMessages(messageIDs) {","        return (this._client || this.guild.shard.client).deleteMessages.call((this._client || this.guild.shard.client), this.id, messageIDs);","    }","","    /**","    * Purge previous messages in the channel with an optional filter (bot accounts only)","    * @arg {Number} limit The max number of messages to search through, -1 for no limit","    * @arg {function} [filter] Optional filter function that returns a boolean when passed a Message object","    * @arg {String} [before] Get messages before this message ID","    * @arg {String} [after] Get messages after this message ID","    * @returns {Promise<Number>} Resolves with the number of messages deleted","    */","    purge(limit, filter, before, after) {","        return (this._client || this.guild.shard.client).purgeChannel.call((this._client || this.guild.shard.client), this.id, limit, filter, before, after);","    }","}","","module.exports = Channel;",""],"l":{"3":1,"12":0,"13":0,"21":0,"30":0,"42":0,"50":0,"67":0,"80":0,"89":0,"98":0,"109":0,"120":0,"131":0,"140":0,"149":0,"158":0,"167":0,"179":0,"183":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Base.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Base.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":4,"loc":{"start":{"line":4,"column":15},"end":{"line":4,"column":20}}},"2":{"name":"(anonymous_2)","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":10,"column":20}}},"3":{"name":"(anonymous_3)","line":14,"loc":{"start":{"line":14,"column":10},"end":{"line":14,"column":23}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":11},"end":{"line":40,"column":14}}}},"statementMap":{"1":{"start":{"line":5,"column":8},"end":{"line":7,"column":9}},"2":{"start":{"line":6,"column":12},"end":{"line":6,"column":25}},"3":{"start":{"line":11,"column":8},"end":{"line":11,"column":51}},"4":{"start":{"line":15,"column":8},"end":{"line":15,"column":28}},"5":{"start":{"line":16,"column":8},"end":{"line":20,"column":9}},"6":{"start":{"line":17,"column":12},"end":{"line":17,"column":32}},"7":{"start":{"line":19,"column":12},"end":{"line":19,"column":29}},"8":{"start":{"line":21,"column":8},"end":{"line":21,"column":22}},"9":{"start":{"line":22,"column":8},"end":{"line":36,"column":9}},"10":{"start":{"line":23,"column":12},"end":{"line":35,"column":13}},"11":{"start":{"line":24,"column":16},"end":{"line":34,"column":17}},"12":{"start":{"line":25,"column":20},"end":{"line":25,"column":42}},"13":{"start":{"line":26,"column":23},"end":{"line":34,"column":17}},"14":{"start":{"line":27,"column":20},"end":{"line":27,"column":54}},"15":{"start":{"line":28,"column":23},"end":{"line":34,"column":17}},"16":{"start":{"line":29,"column":20},"end":{"line":29,"column":63}},"17":{"start":{"line":30,"column":23},"end":{"line":34,"column":17}},"18":{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},"19":{"start":{"line":33,"column":20},"end":{"line":33,"column":42}},"20":{"start":{"line":37,"column":8},"end":{"line":37,"column":20}},"21":{"start":{"line":42,"column":8},"end":{"line":42,"column":88}},"22":{"start":{"line":43,"column":8},"end":{"line":47,"column":9}},"23":{"start":{"line":44,"column":12},"end":{"line":46,"column":13}},"24":{"start":{"line":45,"column":16},"end":{"line":45,"column":38}},"25":{"start":{"line":48,"column":8},"end":{"line":48,"column":20}},"26":{"start":{"line":52,"column":0},"end":{"line":52,"column":22}}},"branchMap":{"1":{"line":5,"type":"if","locations":[{"start":{"line":5,"column":8},"end":{"line":5,"column":8}},{"start":{"line":5,"column":8},"end":{"line":5,"column":8}}]},"2":{"line":15,"type":"binary-expr","locations":[{"start":{"line":15,"column":16},"end":{"line":15,"column":21}},{"start":{"line":15,"column":25},"end":{"line":15,"column":27}}]},"3":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":8},"end":{"line":16,"column":8}},{"start":{"line":16,"column":8},"end":{"line":16,"column":8}}]},"4":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":12},"end":{"line":23,"column":12}},{"start":{"line":23,"column":12},"end":{"line":23,"column":12}}]},"5":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":15},"end":{"line":23,"column":39}},{"start":{"line":23,"column":43},"end":{"line":23,"column":63}}]},"6":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":16},"end":{"line":24,"column":16}},{"start":{"line":24,"column":16},"end":{"line":24,"column":16}}]},"7":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":23},"end":{"line":26,"column":23}},{"start":{"line":26,"column":23},"end":{"line":26,"column":23}}]},"8":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":23},"end":{"line":28,"column":23}},{"start":{"line":28,"column":23},"end":{"line":28,"column":23}}]},"9":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":23}},{"start":{"line":30,"column":23},"end":{"line":30,"column":23}}]},"10":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":12},"end":{"line":44,"column":12}},{"start":{"line":44,"column":12},"end":{"line":44,"column":12}}]},"11":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":15},"end":{"line":44,"column":39}},{"start":{"line":44,"column":43},"end":{"line":44,"column":63}},{"start":{"line":44,"column":67},"end":{"line":44,"column":76}}]}},"code":["\"use strict\";","","class Base {","    constructor(id) {","        if(id) {","            this.id = id;","        }","    }","","    get createdAt() {","        return (this.id / 4194304) + 1420070400000;","    }","","    toJSON(arg, cache) {","        cache = cache || [];","        if(~cache.indexOf(this)) {","            return \"[Circular]\";","        } else {","            cache.push(this);","        }","        var copy = {};","        for(var key in this) {","            if(this.hasOwnProperty(key) && !key.startsWith(\"_\")) {","                if(!this[key]) {","                    copy[key] = this[key];","                } else if(this[key] instanceof Set) {","                    copy[key] = Array.from(this[key]);","                } else if(this[key] instanceof Map) {","                    copy[key] = Array.from(this[key].values());","                } else if(typeof this[key].toJSON === \"function\") {","                    copy[key] = this[key].toJSON(key, cache);","                } else {","                    copy[key] = this[key];","                }","            }","        }","        return copy;","    }","","    inspect() {","        // http://stackoverflow.com/questions/5905492/dynamic-function-name-in-javascript","        var copy = new (new Function(`return function ${this.constructor.name}(){}`)());","        for(var key in this) {","            if(this.hasOwnProperty(key) && !key.startsWith(\"_\") && this[key]) {","                copy[key] = this[key];","            }","        }","        return copy;","    }","}","","module.exports = Base;",""],"l":{"5":0,"6":0,"11":0,"15":0,"16":0,"17":0,"19":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"33":0,"37":0,"42":0,"43":0,"44":0,"45":0,"48":0,"52":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/util/Collection.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/util/Collection.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":15},"end":{"line":15,"column":35}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":7},"end":{"line":29,"column":29}}},"3":{"name":"(anonymous_3)","line":60,"loc":{"start":{"line":60,"column":8},"end":{"line":60,"column":15}}},"4":{"name":"(anonymous_4)","line":73,"loc":{"start":{"line":73,"column":10},"end":{"line":73,"column":13}}},"5":{"name":"(anonymous_5)","line":85,"loc":{"start":{"line":85,"column":10},"end":{"line":85,"column":17}}},"6":{"name":"(anonymous_6)","line":100,"loc":{"start":{"line":100,"column":7},"end":{"line":100,"column":14}}},"7":{"name":"(anonymous_7)","line":116,"loc":{"start":{"line":116,"column":10},"end":{"line":116,"column":32}}},"8":{"name":"(anonymous_8)","line":134,"loc":{"start":{"line":134,"column":10},"end":{"line":134,"column":16}}},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":12},"end":{"line":143,"column":15}}}},"statementMap":{"1":{"start":{"line":16,"column":8},"end":{"line":16,"column":16}},"2":{"start":{"line":17,"column":8},"end":{"line":17,"column":37}},"3":{"start":{"line":18,"column":8},"end":{"line":18,"column":27}},"4":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"5":{"start":{"line":31,"column":12},"end":{"line":31,"column":92}},"6":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"7":{"start":{"line":34,"column":12},"end":{"line":34,"column":49}},"8":{"start":{"line":36,"column":8},"end":{"line":36,"column":40}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"10":{"start":{"line":38,"column":12},"end":{"line":38,"column":28}},"11":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"12":{"start":{"line":41,"column":12},"end":{"line":41,"column":50}},"13":{"start":{"line":44,"column":8},"end":{"line":44,"column":30}},"14":{"start":{"line":46,"column":8},"end":{"line":51,"column":9}},"15":{"start":{"line":47,"column":12},"end":{"line":47,"column":35}},"16":{"start":{"line":48,"column":12},"end":{"line":50,"column":13}},"17":{"start":{"line":49,"column":16},"end":{"line":49,"column":47}},"18":{"start":{"line":52,"column":8},"end":{"line":52,"column":19}},"19":{"start":{"line":61,"column":8},"end":{"line":65,"column":9}},"20":{"start":{"line":62,"column":12},"end":{"line":64,"column":13}},"21":{"start":{"line":63,"column":16},"end":{"line":63,"column":28}},"22":{"start":{"line":66,"column":8},"end":{"line":66,"column":25}},"23":{"start":{"line":74,"column":8},"end":{"line":76,"column":9}},"24":{"start":{"line":75,"column":12},"end":{"line":75,"column":29}},"25":{"start":{"line":77,"column":8},"end":{"line":77,"column":80}},"26":{"start":{"line":86,"column":8},"end":{"line":86,"column":21}},"27":{"start":{"line":87,"column":8},"end":{"line":91,"column":9}},"28":{"start":{"line":88,"column":12},"end":{"line":90,"column":13}},"29":{"start":{"line":89,"column":16},"end":{"line":89,"column":31}},"30":{"start":{"line":92,"column":8},"end":{"line":92,"column":19}},"31":{"start":{"line":101,"column":8},"end":{"line":101,"column":21}},"32":{"start":{"line":102,"column":8},"end":{"line":104,"column":9}},"33":{"start":{"line":103,"column":12},"end":{"line":103,"column":33}},"34":{"start":{"line":105,"column":8},"end":{"line":105,"column":19}},"35":{"start":{"line":117,"column":8},"end":{"line":119,"column":9}},"36":{"start":{"line":118,"column":12},"end":{"line":118,"column":49}},"37":{"start":{"line":120,"column":8},"end":{"line":120,"column":36}},"38":{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},"39":{"start":{"line":122,"column":12},"end":{"line":122,"column":49}},"40":{"start":{"line":124,"column":8},"end":{"line":124,"column":32}},"41":{"start":{"line":125,"column":8},"end":{"line":125,"column":20}},"42":{"start":{"line":135,"column":8},"end":{"line":135,"column":36}},"43":{"start":{"line":136,"column":8},"end":{"line":138,"column":9}},"44":{"start":{"line":137,"column":12},"end":{"line":137,"column":24}},"45":{"start":{"line":139,"column":8},"end":{"line":139,"column":28}},"46":{"start":{"line":140,"column":8},"end":{"line":140,"column":20}},"47":{"start":{"line":144,"column":8},"end":{"line":144,"column":55}},"48":{"start":{"line":148,"column":0},"end":{"line":148,"column":28}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":30,"column":8}},{"start":{"line":30,"column":8},"end":{"line":30,"column":8}}]},"2":{"line":31,"type":"cond-expr","locations":[{"start":{"line":31,"column":54},"end":{"line":31,"column":57}},{"start":{"line":31,"column":60},"end":{"line":31,"column":91}}]},"3":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":33,"column":8}},{"start":{"line":33,"column":8},"end":{"line":33,"column":8}}]},"4":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":8}},{"start":{"line":37,"column":8},"end":{"line":37,"column":8}}]},"5":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":11},"end":{"line":37,"column":19}},{"start":{"line":37,"column":23},"end":{"line":37,"column":31}}]},"6":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":8}},{"start":{"line":40,"column":8},"end":{"line":40,"column":8}}]},"7":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"8":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":11},"end":{"line":46,"column":21}},{"start":{"line":46,"column":25},"end":{"line":46,"column":47}}]},"9":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":12},"end":{"line":62,"column":12}},{"start":{"line":62,"column":12},"end":{"line":62,"column":12}}]},"10":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":8},"end":{"line":74,"column":8}},{"start":{"line":74,"column":8},"end":{"line":74,"column":8}}]},"11":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":12},"end":{"line":88,"column":12}},{"start":{"line":88,"column":12},"end":{"line":88,"column":12}}]},"12":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":8},"end":{"line":117,"column":8}},{"start":{"line":117,"column":8},"end":{"line":117,"column":8}}]},"13":{"line":117,"type":"binary-expr","locations":[{"start":{"line":117,"column":11},"end":{"line":117,"column":18}},{"start":{"line":117,"column":22},"end":{"line":117,"column":34}}]},"14":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":8},"end":{"line":121,"column":8}},{"start":{"line":121,"column":8},"end":{"line":121,"column":8}}]},"15":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":8},"end":{"line":136,"column":8}},{"start":{"line":136,"column":8},"end":{"line":136,"column":8}}]}},"code":["\"use strict\";","","/**","* Hold a bunch of something","* @extends Map","* @prop {Class} baseObject The base class for all items","* @prop {Number?} limit Max number of items to hold","*/","class Collection extends Map {","    /**","    * Construct a Collection","    * @arg {Class} baseObject The base class for all items","    * @arg {Number} [limit] Max number of items to hold","    */","    constructor(baseObject, limit) {","        super();","        this.baseObject = baseObject;","        this.limit = limit;","    }","","    /**","    * Add an object","    * @arg {Object} obj The object data","    * @arg {String} obj.id The ID of the object","    * @arg {Class?} extra An extra parameter the constructor may need","    * @arg {Boolean} replace Whether to replace an existing object with the same ID","    * @returns {Class} The existing or newly created object","    */","    add(obj, extra, replace) {","        if(this.limit === 0) {","            return (obj instanceof this.baseObject) ? obj : new this.baseObject(obj, extra);","        }","        if(obj.id == null) {","            throw new Error(\"Missing object id\");","        }","        var existing = this.get(obj.id);","        if(existing && !replace) {","            return existing;","        }","        if(!(obj instanceof this.baseObject)) {","            obj = new this.baseObject(obj, extra);","        }","","        this.set(obj.id, obj);","","        if(this.limit && this.size > this.limit) {","            var iter = this.keys();","            while(this.size > this.limit) {","                this.delete(iter.next().value);","            }","        }","        return obj;","    }","","    /**","    * Return the first object to make the function evaluate true","    * @arg {function} func A function that takes an object and returns true if it matches","    * @returns {Class?} The first matching object, or undefined if no match","    */","    find(func) {","        for(var item of this.values()) {","            if(func(item)) {","                return item;","            }","        }","        return undefined;","    }","","    /**","    * Get a random object from the Collection","    * @returns {Class?} The random object, or undefined if there is no match","    */","    random() {","        if(!this.size) {","            return undefined;","        }","        return Array.from(this.values())[Math.floor(Math.random() * this.size)];","    }","","    /**","    * Return all the objects that make the function evaluate true","    * @arg {function} func A function that takes an object and returns true if it matches","    * @returns {Array<Class>} An array containing all the objects that matched","    */","    filter(func) {","        var arr = [];","        for(var item of this.values()) {","            if(func(item)) {","                arr.push(item);","            }","        }","        return arr;","    }","","    /**","    * Return an array with the results of applying the given function to each element","    * @arg {function} func A function that takes an object and returns something","    * @returns {Array} An array containing the results","    */","    map(func) {","        var arr = [];","        for(var item of this.values()) {","            arr.push(func(item));","        }","        return arr;","    }","","    /**","    * Update an object","    * @arg {Object} obj The updated object data","    * @arg {String} obj.id The ID of the object","    * @arg {Class?} extra An extra parameter the constructor may need","    * @arg {Boolean} replace Whether to replace an existing object with the same ID","    * @returns {Class} The updated object","    */","    update(obj, extra, replace) {","        if(!obj.id && obj.id !== 0) {","            throw new Error(\"Missing object id\");","        }","        var item = this.get(obj.id);","        if(!item) {","            return this.add(obj, extra, replace);","        }","        item.update(obj, extra);","        return item;","    }","","    /**","    * Remove an object","    * @arg {Object} obj The object","    * @arg {String} obj.id The ID of the object","    * @returns {Class?} The removed object, or null if nothing was removed","    */","    remove(obj) {","        var item = this.get(obj.id);","        if(!item) {","            return null;","        }","        this.delete(obj.id);","        return item;","    }","","    toString() {","        return `[Collection<${this.baseObject.name}>]`;","    }","}","","module.exports = Collection;",""],"l":{"16":0,"17":0,"18":0,"30":0,"31":0,"33":0,"34":0,"36":0,"37":0,"38":0,"40":0,"41":0,"44":0,"46":0,"47":0,"48":0,"49":0,"52":0,"61":0,"62":0,"63":0,"66":0,"74":0,"75":0,"77":0,"86":0,"87":0,"88":0,"89":0,"92":0,"101":0,"102":0,"103":0,"105":0,"117":0,"118":0,"120":0,"121":0,"122":0,"124":0,"125":0,"135":0,"136":0,"137":0,"139":0,"140":0,"144":0,"148":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Member.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Member.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"fnMap":{"1":{"name":"(anonymous_1)","line":35,"loc":{"start":{"line":35,"column":15},"end":{"line":35,"column":29}}},"2":{"name":"(anonymous_2)","line":52,"loc":{"start":{"line":52,"column":10},"end":{"line":52,"column":17}}},"3":{"name":"(anonymous_3)","line":67,"loc":{"start":{"line":67,"column":18},"end":{"line":67,"column":21}}},"4":{"name":"(anonymous_4)","line":90,"loc":{"start":{"line":90,"column":16},"end":{"line":90,"column":19}}},"5":{"name":"(anonymous_5)","line":94,"loc":{"start":{"line":94,"column":21},"end":{"line":94,"column":24}}},"6":{"name":"(anonymous_6)","line":98,"loc":{"start":{"line":98,"column":14},"end":{"line":98,"column":17}}},"7":{"name":"(anonymous_7)","line":102,"loc":{"start":{"line":102,"column":11},"end":{"line":102,"column":14}}},"8":{"name":"(anonymous_8)","line":106,"loc":{"start":{"line":106,"column":17},"end":{"line":106,"column":20}}},"9":{"name":"(anonymous_9)","line":110,"loc":{"start":{"line":110,"column":21},"end":{"line":110,"column":24}}},"10":{"name":"(anonymous_10)","line":114,"loc":{"start":{"line":114,"column":24},"end":{"line":114,"column":27}}},"11":{"name":"(anonymous_11)","line":118,"loc":{"start":{"line":118,"column":23},"end":{"line":118,"column":25}}},"12":{"name":"(anonymous_12)","line":122,"loc":{"start":{"line":122,"column":17},"end":{"line":122,"column":20}}},"13":{"name":"(anonymous_13)","line":126,"loc":{"start":{"line":126,"column":15},"end":{"line":126,"column":18}}},"14":{"name":"(anonymous_14)","line":140,"loc":{"start":{"line":140,"column":8},"end":{"line":140,"column":18}}},"15":{"name":"(anonymous_15)","line":149,"loc":{"start":{"line":149,"column":11},"end":{"line":149,"column":20}}},"16":{"name":"(anonymous_16)","line":158,"loc":{"start":{"line":158,"column":14},"end":{"line":158,"column":23}}},"17":{"name":"(anonymous_17)","line":166,"loc":{"start":{"line":166,"column":8},"end":{"line":166,"column":11}}},"18":{"name":"(anonymous_18)","line":175,"loc":{"start":{"line":175,"column":7},"end":{"line":175,"column":27}}},"19":{"name":"(anonymous_19)","line":183,"loc":{"start":{"line":183,"column":9},"end":{"line":183,"column":12}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":43}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":43}},"5":{"start":{"line":36,"column":8},"end":{"line":36,"column":23}},"6":{"start":{"line":37,"column":8},"end":{"line":47,"column":9}},"7":{"start":{"line":38,"column":12},"end":{"line":38,"column":62}},"8":{"start":{"line":39,"column":12},"end":{"line":41,"column":13}},"9":{"start":{"line":40,"column":16},"end":{"line":40,"column":88}},"10":{"start":{"line":42,"column":12},"end":{"line":44,"column":13}},"11":{"start":{"line":43,"column":16},"end":{"line":43,"column":85}},"12":{"start":{"line":46,"column":12},"end":{"line":46,"column":29}},"13":{"start":{"line":48,"column":8},"end":{"line":48,"column":47}},"14":{"start":{"line":49,"column":8},"end":{"line":49,"column":26}},"15":{"start":{"line":53,"column":8},"end":{"line":53,"column":89}},"16":{"start":{"line":54,"column":8},"end":{"line":54,"column":76}},"17":{"start":{"line":55,"column":8},"end":{"line":55,"column":98}},"18":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"19":{"start":{"line":58,"column":12},"end":{"line":58,"column":41}},"20":{"start":{"line":61,"column":8},"end":{"line":61,"column":76}},"21":{"start":{"line":62,"column":8},"end":{"line":64,"column":9}},"22":{"start":{"line":63,"column":12},"end":{"line":63,"column":36}},"23":{"start":{"line":68,"column":8},"end":{"line":87,"column":9}},"24":{"start":{"line":69,"column":12},"end":{"line":69,"column":51}},"25":{"start":{"line":71,"column":12},"end":{"line":71,"column":84}},"26":{"start":{"line":72,"column":12},"end":{"line":85,"column":13}},"27":{"start":{"line":73,"column":16},"end":{"line":73,"column":50}},"28":{"start":{"line":74,"column":16},"end":{"line":76,"column":17}},"29":{"start":{"line":75,"column":20},"end":{"line":75,"column":29}},"30":{"start":{"line":78,"column":16},"end":{"line":78,"column":50}},"31":{"start":{"line":79,"column":16},"end":{"line":84,"column":17}},"32":{"start":{"line":80,"column":20},"end":{"line":80,"column":50}},"33":{"start":{"line":81,"column":20},"end":{"line":81,"column":26}},"34":{"start":{"line":83,"column":20},"end":{"line":83,"column":40}},"35":{"start":{"line":86,"column":12},"end":{"line":86,"column":47}},"36":{"start":{"line":91,"column":8},"end":{"line":91,"column":34}},"37":{"start":{"line":95,"column":8},"end":{"line":95,"column":39}},"38":{"start":{"line":99,"column":8},"end":{"line":99,"column":32}},"39":{"start":{"line":103,"column":8},"end":{"line":103,"column":29}},"40":{"start":{"line":107,"column":8},"end":{"line":107,"column":35}},"41":{"start":{"line":111,"column":8},"end":{"line":111,"column":39}},"42":{"start":{"line":115,"column":8},"end":{"line":115,"column":42}},"43":{"start":{"line":119,"column":8},"end":{"line":119,"column":41}},"44":{"start":{"line":123,"column":8},"end":{"line":123,"column":35}},"45":{"start":{"line":127,"column":8},"end":{"line":127,"column":32}},"46":{"start":{"line":141,"column":8},"end":{"line":141,"column":118}},"47":{"start":{"line":150,"column":8},"end":{"line":150,"column":120}},"48":{"start":{"line":159,"column":8},"end":{"line":159,"column":123}},"49":{"start":{"line":167,"column":8},"end":{"line":167,"column":109}},"50":{"start":{"line":176,"column":8},"end":{"line":176,"column":127}},"51":{"start":{"line":184,"column":8},"end":{"line":184,"column":110}},"52":{"start":{"line":188,"column":0},"end":{"line":188,"column":24}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":8}},{"start":{"line":37,"column":8},"end":{"line":37,"column":8}}]},"2":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":12},"end":{"line":39,"column":12}},{"start":{"line":39,"column":12},"end":{"line":39,"column":12}}]},"3":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":15},"end":{"line":39,"column":25}},{"start":{"line":39,"column":29},"end":{"line":39,"column":38}}]},"4":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":12},"end":{"line":42,"column":12}},{"start":{"line":42,"column":12},"end":{"line":42,"column":12}}]},"5":{"line":53,"type":"cond-expr","locations":[{"start":{"line":53,"column":50},"end":{"line":53,"column":61}},{"start":{"line":53,"column":64},"end":{"line":53,"column":88}}]},"6":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":64},"end":{"line":53,"column":75}},{"start":{"line":53,"column":79},"end":{"line":53,"column":88}}]},"7":{"line":54,"type":"cond-expr","locations":[{"start":{"line":54,"column":46},"end":{"line":54,"column":55}},{"start":{"line":54,"column":58},"end":{"line":54,"column":75}}]},"8":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":58},"end":{"line":54,"column":67}},{"start":{"line":54,"column":71},"end":{"line":54,"column":75}}]},"9":{"line":55,"type":"cond-expr","locations":[{"start":{"line":55,"column":55},"end":{"line":55,"column":81}},{"start":{"line":55,"column":84},"end":{"line":55,"column":97}}]},"10":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":8}},{"start":{"line":57,"column":8},"end":{"line":57,"column":8}}]},"11":{"line":61,"type":"cond-expr","locations":[{"start":{"line":61,"column":46},"end":{"line":61,"column":55}},{"start":{"line":61,"column":58},"end":{"line":61,"column":75}}]},"12":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":58},"end":{"line":61,"column":67}},{"start":{"line":61,"column":71},"end":{"line":61,"column":75}}]},"13":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":62,"column":8}},{"start":{"line":62,"column":8},"end":{"line":62,"column":8}}]},"14":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":8}},{"start":{"line":68,"column":8},"end":{"line":68,"column":8}}]},"15":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":16},"end":{"line":74,"column":16}},{"start":{"line":74,"column":16},"end":{"line":74,"column":16}}]},"16":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":16},"end":{"line":79,"column":16}},{"start":{"line":79,"column":16},"end":{"line":79,"column":16}}]}},"code":["\"use strict\";","","const Base = require(\"./Base\");","const Permission = require(\"./Permission\");","const Permissions = require(\"../Constants\").Permissions;","const VoiceState = require(\"./VoiceState\");","","/**","* Represents a server member","* @prop {String} id The ID of the member","* @prop {String} mention A string that mentions the member","* @prop {Guild} guild The guild the member is in","* @prop {Number} joinedAt Timestamp of when the member joined the guild","* @prop {String} status The member's status. Either \"online\", \"idle\", or \"offline\"","* @prop {Object?} game The active game the member is playing","* @prop {String} game.name The name of the active game","* @prop {Number} game.type The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)","* @prop {String?} game.url The url of the active game","* @prop {VoiceState} voiceState The voice state of the member","* @prop {String?} nick The server nickname of the member","* @prop {String[]} roles An array of role IDs this member is a part of","* @prop {User} user The user object of the member","* @prop {Permission} permission The guild-wide permissions of the member","* @prop {String} defaultAvatar The hash for the default avatar of a user if there is no avatar set","* @prop {Number} createdAt Timestamp of user creation","* @prop {Boolean} bot Whether the user is an OAuth bot or not","* @prop {String} username The username of the user","* @prop {String} discriminator The discriminator of the user","* @prop {String?} avatar The hash of the user's avatar, or null if no avatar","* @prop {String} defaultAvatarURL The URL of the user's default avatar","* @prop {String} avatarURL The URL of the user's avatar which can be either a JPG or GIF","* @prop {String} staticAvatarURL The URL of the user's avatar (always a JPG)","*/","class Member extends Base {","    constructor(data, guild) {","        super(data.id);","        if((this.guild = guild)) {","            this.user = guild.shard.client.users.get(data.id);","            if(!this.user && data.user) {","                this.user = guild.shard.client.users.add(data.user, guild.shard.client);","            }","            if(!this.user) {","                throw new Error(\"User associated with Member not found: \" + data.id);","            }","        } else {","            this.user = null;","        }","        this.voiceState = new VoiceState(data);","        this.update(data);","    }","","    update(data) {","        this.status = data.status !== undefined ? data.status : this.status || \"offline\";","        this.game = data.game !== undefined ? data.game : this.game || null;","        this.joinedAt = data.joined_at !== undefined ? Date.parse(data.joined_at) : this.joinedAt;","","        if(data.mute !== undefined) {","            this.voiceState.update(data);","        }","","        this.nick = data.nick !== undefined ? data.nick : this.nick || null;","        if(data.roles !== undefined) {","            this.roles = data.roles;","        }","    }","","    get permission() {","        if(this.id === this.guild.ownerID) {","            return new Permission(Permissions.all);","        } else {","            var permissions = this.guild.roles.get(this.guild.id).permissions.allow;","            for(var role of this.roles) {","                role = this.guild.roles.get(role);","                if(!role) {","                    continue;","                }","","                var perm = role.permissions.allow;","                if(perm & Permissions.administrator) {","                    permissions = Permissions.all;","                    break;","                } else {","                    permissions |= perm;","                }","            }","            return new Permission(permissions);","        }","    }","","    get username() {","        return this.user.username;","    }","","    get discriminator() {","        return this.user.discriminator;","    }","","    get avatar() {","        return this.user.avatar;","    }","","    get bot() {","        return this.user.bot;","    }","","    get createdAt() {","        return this.user.createdAt;","    }","","    get defaultAvatar() {","        return this.user.defaultAvatar;","    }","","    get defaultAvatarURL() {","        return this.user.defaultAvatarURL;","    }","","    get staticAvatarURL(){","        return this.user.staticAvatarURL;","    }","","    get avatarURL() {","        return this.user.avatarURL;","    }","","    get mention() {","        return `<@!${this.id}>`;","    }","","    /**","    * Edit the guild member","    * @arg {Object} options The properties to edit","    * @arg {String[]} [options.roles] The array of role IDs the user should have","    * @arg {String} [options.nick] Set the user's server nickname, \"\" to remove","    * @arg {Boolean} [options.mute] Server mute the user","    * @arg {Boolean} [options.deaf] Server deafen the user","    * @arg {String} [options.channelID] The ID of the voice channel to move the user to (must be in voice)","    * @returns {Promise}","    */","    edit(options) {","        return this.guild.shard.client.editGuildMember.call(this.guild.shard.client, this.guild.id, this.id, options);","    }","","    /**","    * Add a role to the guild member","    * @arg {String} roleID The ID of the role","    * @returns {Promise}","    */","    addRole(roleID) {","        return this.guild.shard.client.addGuildMemberRole.call(this.guild.shard.client, this.guild.id, this.id, roleID);","    }","","    /**","    * Remve a role from the guild member","    * @arg {String} roleID The ID of the role","    * @returns {Promise}","    */","    removeRole(roleID) {","        return this.guild.shard.client.removeGuildMemberRole.call(this.guild.shard.client, this.guild.id, this.id, roleID);","    }","","    /**","    * Kick the member from the guild","    * @returns {Promise}","    */","    kick() {","        return this.guild.shard.client.kickGuildMember.call(this.guild.shard.client, this.guild.id, this.id);","    }","","    /**","    * Ban the user from the guild","    * @arg {Number} [deleteMessageDays=0] Number of days to delete messages for","    * @returns {Promise}","    */","    ban(deleteMessageDays) {","        return this.guild.shard.client.banGuildMember.call(this.guild.shard.client, this.guild.id, this.id, deleteMessageDays);","    }","","    /**","    * Unban the user from the guild","    * @returns {Promise}","    */","    unban() {","        return this.guild.shard.client.unbanGuildMember.call(this.guild.shard.client, this.guild.id, this.id);","    }","}","","module.exports = Member;",""],"l":{"3":1,"4":1,"5":1,"6":1,"36":0,"37":0,"38":0,"39":0,"40":0,"42":0,"43":0,"46":0,"48":0,"49":0,"53":0,"54":0,"55":0,"57":0,"58":0,"61":0,"62":0,"63":0,"68":0,"69":0,"71":0,"72":0,"73":0,"74":0,"75":0,"78":0,"79":0,"80":0,"81":0,"83":0,"86":0,"91":0,"95":0,"99":0,"103":0,"107":0,"111":0,"115":0,"119":0,"123":0,"127":0,"141":0,"150":0,"159":0,"167":0,"176":0,"184":0,"188":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Permission.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Permission.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":15},"end":{"line":24,"column":29}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":12},"end":{"line":30,"column":15}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":7},"end":{"line":51,"column":20}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":25,"column":8},"end":{"line":25,"column":16}},"4":{"start":{"line":26,"column":8},"end":{"line":26,"column":27}},"5":{"start":{"line":27,"column":8},"end":{"line":27,"column":30}},"6":{"start":{"line":31,"column":8},"end":{"line":42,"column":9}},"7":{"start":{"line":32,"column":12},"end":{"line":32,"column":28}},"8":{"start":{"line":33,"column":12},"end":{"line":41,"column":13}},"9":{"start":{"line":34,"column":16},"end":{"line":40,"column":17}},"10":{"start":{"line":35,"column":20},"end":{"line":39,"column":21}},"11":{"start":{"line":36,"column":24},"end":{"line":36,"column":48}},"12":{"start":{"line":37,"column":27},"end":{"line":39,"column":21}},"13":{"start":{"line":38,"column":24},"end":{"line":38,"column":49}},"14":{"start":{"line":43,"column":8},"end":{"line":43,"column":26}},"15":{"start":{"line":52,"column":8},"end":{"line":52,"column":56}},"16":{"start":{"line":56,"column":0},"end":{"line":56,"column":28}}},"branchMap":{"1":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":20},"end":{"line":27,"column":24}},{"start":{"line":27,"column":28},"end":{"line":27,"column":29}}]},"2":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":8},"end":{"line":31,"column":8}},{"start":{"line":31,"column":8},"end":{"line":31,"column":8}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":16},"end":{"line":34,"column":16}},{"start":{"line":34,"column":16},"end":{"line":34,"column":16}}]},"4":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":20},"end":{"line":35,"column":20}},{"start":{"line":35,"column":20},"end":{"line":35,"column":20}}]},"5":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":27},"end":{"line":37,"column":27}},{"start":{"line":37,"column":27},"end":{"line":37,"column":27}}]}},"code":["\"use strict\";","","const Base = require(\"./Base\");","const Permissions = require(\"../Constants\").Permissions;","","/**","* Represents a calculated permissions number","* @prop {Number} allow The allowed permissions number","* @prop {Number} deny The denied permissions number","* @prop {Object} json A JSON representation of the permissions number.","* If a permission key isn't there, it is not set by this permission.","* If a permission key is false, it is denied by the permission.","* If a permission key is true, it is allowed by the permission.","* i.e.:","* {","*   \"readMessages\": true,","*   \"sendMessages\": true,","*   \"manageMessages\": false","* }","* In the above example, readMessages and sendMessages are allowed permissions, and manageMessages is denied. Everything else is not explicitly set.","* [A full list of permission nodes can be found on the docs reference page](/Eris/docs/reference)","*/","class Permission extends Base {","    constructor(allow, deny) {","        super();","        this.allow = allow;","        this.deny = deny || 0;","    }","","    get json() {","        if(!this._json) {","            this._json = {};","            for(var perm of Object.keys(Permissions)) {","                if(!perm.startsWith(\"all\")) {","                    if(this.allow & Permissions[perm]) {","                        this._json[perm] = true;","                    } else if(this.deny & Permissions[perm]) {","                        this._json[perm] = false;","                    }","                }","            }","        }","        return this._json;","    }","","    /**","    * Check if this permission allows a specific permission","    * @arg {String} permission The name of the permission. [A full list of permission nodes can be found on the docs reference page](/Eris/docs/reference)","    * @returns {Boolean} Whether the permission allows the specified permission","    */","    has(permission) {","        return !!(this.allow & Permissions[permission]);","    }","}","","module.exports = Permission;"],"l":{"3":1,"4":1,"25":0,"26":0,"27":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"43":0,"52":0,"56":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/Constants.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/Constants.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":9,"column":2}},"2":{"start":{"line":11,"column":0},"end":{"line":16,"column":2}},"3":{"start":{"line":18,"column":0},"end":{"line":24,"column":2}},"4":{"start":{"line":26,"column":0},"end":{"line":41,"column":2}},"5":{"start":{"line":43,"column":0},"end":{"line":43,"column":35}},"6":{"start":{"line":45,"column":0},"end":{"line":77,"column":2}},"7":{"start":{"line":79,"column":0},"end":{"line":86,"column":2}}},"branchMap":{},"code":["\"use strict\";","","module.exports.DefaultAvatarHashes = [","    \"6debd47ed13483642cf09e832ed0bc1b\",","    \"322c936a8c8be1b803cd94861bdfa868\",","    \"dd4dbc0016779df1378e7812eabaa04d\",","    \"0e291f67c9274a1abdddeb3fd919cbaa\",","    \"1cbd08c76f8af6dddce02c5138971129\"","];","","module.exports.ImageFormats = [","    \"jpg\",","    \"png\",","    \"webp\",","    \"gif\"","];","","module.exports.ImageSizes = [","    128,","    256,","    512,","    1024,","    2048","];","","module.exports.GatewayOPCodes = {","    EVENT:              0,","    HEARTBEAT:          1,","    IDENTIFY:           2,","    STATUS_UPDATE:      3,","    VOICE_STATE_UPDATE: 4,","    VOICE_SERVER_PING:  5,","    RESUME:             6,","    RECONNECT:          7,","    GET_GUILD_MEMBERS:  8,","    INVALID_SESSION:    9,","    HELLO:             10,","    HEARTBEAT_ACK:     11,","    SYNC_GUILD:        12,","    SYNC_CALL:         13","};","","module.exports.GATEWAY_VERSION = 6;","","module.exports.Permissions = {","    createInstantInvite: 1,","    kickMembers:         1 << 1,","    banMembers:          1 << 2,","    administrator:       1 << 3,","    manageChannels:      1 << 4,","    manageGuild:         1 << 5,","    addReactions:        1 << 6,","    readMessages:        1 << 10,","    sendMessages:        1 << 11,","    sendTTSMessages:     1 << 12,","    manageMessages:      1 << 13,","    embedLinks:          1 << 14,","    attachFiles:         1 << 15,","    readMessageHistory:  1 << 16,","    mentionEveryone:     1 << 17,","    externalEmojis:      1 << 18,","    voiceConnect:        1 << 20,","    voiceSpeak:          1 << 21,","    voiceMuteMembers:    1 << 22,","    voiceDeafenMembers:  1 << 23,","    voiceMoveMembers:    1 << 24,","    voiceUseVAD:         1 << 25,","    changeNickname:      1 << 26,","    manageNicknames:     1 << 27,","    manageRoles:         1 << 28,","    manageWebhooks:      1 << 29,","    manageEmojis:        1 << 30,","    all:      0b1111111111101111111110000111111,","    allGuild: 0b1111100000000000000000000111111,","    allText:  0b0110000000001111111110000010001,","    allVoice: 0b0110011111100000000000000010001","};","","module.exports.VoiceOPCodes = {","    IDENTIFY:            0,","    SELECT_PROTOCOL:     1,","    HELLO:               2,","    HEARTBEAT:           3,","    SESSION_DESCRIPTION: 4,","    SPEAKING:            5","};",""],"l":{"3":1,"11":1,"18":1,"26":1,"43":1,"45":1,"79":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/VoiceState.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/VoiceState.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":15},"end":{"line":17,"column":22}}},"2":{"name":"(anonymous_2)","line":22,"loc":{"start":{"line":22,"column":10},"end":{"line":22,"column":17}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"3":{"start":{"line":19,"column":8},"end":{"line":19,"column":26}},"4":{"start":{"line":23,"column":8},"end":{"line":28,"column":9}},"5":{"start":{"line":24,"column":12},"end":{"line":24,"column":45}},"6":{"start":{"line":25,"column":12},"end":{"line":25,"column":79}},"7":{"start":{"line":26,"column":15},"end":{"line":28,"column":9}},"8":{"start":{"line":27,"column":12},"end":{"line":27,"column":51}},"9":{"start":{"line":29,"column":8},"end":{"line":29,"column":77}},"10":{"start":{"line":30,"column":8},"end":{"line":30,"column":77}},"11":{"start":{"line":31,"column":8},"end":{"line":31,"column":93}},"12":{"start":{"line":32,"column":8},"end":{"line":32,"column":95}},"13":{"start":{"line":33,"column":8},"end":{"line":33,"column":95}},"14":{"start":{"line":37,"column":0},"end":{"line":37,"column":28}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":23,"column":8}},{"start":{"line":23,"column":8},"end":{"line":23,"column":8}}]},"2":{"line":25,"type":"cond-expr","locations":[{"start":{"line":25,"column":56},"end":{"line":25,"column":60}},{"start":{"line":25,"column":63},"end":{"line":25,"column":78}}]},"3":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":15},"end":{"line":26,"column":15}},{"start":{"line":26,"column":15},"end":{"line":26,"column":15}}]},"4":{"line":29,"type":"cond-expr","locations":[{"start":{"line":29,"column":46},"end":{"line":29,"column":55}},{"start":{"line":29,"column":58},"end":{"line":29,"column":76}}]},"5":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":58},"end":{"line":29,"column":67}},{"start":{"line":29,"column":71},"end":{"line":29,"column":76}}]},"6":{"line":30,"type":"cond-expr","locations":[{"start":{"line":30,"column":46},"end":{"line":30,"column":55}},{"start":{"line":30,"column":58},"end":{"line":30,"column":76}}]},"7":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":58},"end":{"line":30,"column":67}},{"start":{"line":30,"column":71},"end":{"line":30,"column":76}}]},"8":{"line":31,"type":"cond-expr","locations":[{"start":{"line":31,"column":54},"end":{"line":31,"column":67}},{"start":{"line":31,"column":70},"end":{"line":31,"column":92}}]},"9":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":70},"end":{"line":31,"column":83}},{"start":{"line":31,"column":87},"end":{"line":31,"column":92}}]},"10":{"line":32,"type":"cond-expr","locations":[{"start":{"line":32,"column":55},"end":{"line":32,"column":69}},{"start":{"line":32,"column":72},"end":{"line":32,"column":94}}]},"11":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":72},"end":{"line":32,"column":85}},{"start":{"line":32,"column":89},"end":{"line":32,"column":94}}]},"12":{"line":33,"type":"cond-expr","locations":[{"start":{"line":33,"column":55},"end":{"line":33,"column":69}},{"start":{"line":33,"column":72},"end":{"line":33,"column":94}}]},"13":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":72},"end":{"line":33,"column":85}},{"start":{"line":33,"column":89},"end":{"line":33,"column":94}}]}},"code":["\"use strict\";","","const Base = require(\"./Base\");","","/**","* Represents a member's voice state in a call/guild","* @prop {String} id The ID of the member","* @prop {String?} sessionID The ID of the member's current voice session","* @prop {String?} channelID The ID of the member's current voice channel","* @prop {Boolean} mute Whether the member is server muted or not","* @prop {Boolean} deaf Whether the member is server deafened or not","* @prop {Boolean} suppress Whether the member is suppressed or not","* @prop {Boolean} selfMute Whether the member is self muted or not","* @prop {Boolean} selfDeaf Whether the member is self deafened or not","*/","class VoiceState extends Base {","    constructor(data) {","        super(data.id);","        this.update(data);","    }","","    update(data) {","        if(data.channel_id !== undefined) {","            this.channelID = data.channel_id;","            this.sessionID = data.channel_id === null ? null : data.session_id;","        } else if(this.channelID === undefined) {","            this.channelID = this.sessionID = null;","        }","        this.mute = data.mute !== undefined ? data.mute : this.mute || false;","        this.deaf = data.deaf !== undefined ? data.deaf : this.deaf || false;","        this.suppress = data.suppress !== undefined ? data.suppress : this.suppress || false; // Bots ignore this","        this.selfMute = data.self_mute !== undefined ? data.self_mute : this.selfMute || false;","        this.selfDeaf = data.self_deaf !== undefined ? data.self_deaf : this.selfDeaf || false;","    }","}","","module.exports = VoiceState;"],"l":{"3":1,"18":0,"19":0,"23":0,"24":0,"25":0,"26":0,"27":0,"29":0,"30":0,"31":0,"32":0,"33":0,"37":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Message.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Message.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0,0],"39":[0,0],"40":[0,0],"41":[0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"(anonymous_1)","line":31,"loc":{"start":{"line":31,"column":15},"end":{"line":31,"column":30}}},"2":{"name":"(anonymous_2)","line":91,"loc":{"start":{"line":91,"column":10},"end":{"line":91,"column":25}}},"3":{"name":"(anonymous_3)","line":121,"loc":{"start":{"line":121,"column":20},"end":{"line":121,"column":23}}},"4":{"name":"(anonymous_4)","line":156,"loc":{"start":{"line":156,"column":23},"end":{"line":156,"column":26}}},"5":{"name":"(anonymous_5)","line":164,"loc":{"start":{"line":164,"column":14},"end":{"line":164,"column":17}}},"6":{"name":"(anonymous_6)","line":176,"loc":{"start":{"line":176,"column":8},"end":{"line":176,"column":18}}},"7":{"name":"(anonymous_7)","line":184,"loc":{"start":{"line":184,"column":7},"end":{"line":184,"column":10}}},"8":{"name":"(anonymous_8)","line":192,"loc":{"start":{"line":192,"column":9},"end":{"line":192,"column":12}}},"9":{"name":"(anonymous_9)","line":202,"loc":{"start":{"line":202,"column":15},"end":{"line":202,"column":33}}},"10":{"name":"(anonymous_10)","line":212,"loc":{"start":{"line":212,"column":15},"end":{"line":212,"column":34}}},"11":{"name":"(anonymous_11)","line":222,"loc":{"start":{"line":222,"column":18},"end":{"line":222,"column":37}}},"12":{"name":"(anonymous_12)","line":230,"loc":{"start":{"line":230,"column":19},"end":{"line":230,"column":22}}},"13":{"name":"(anonymous_13)","line":238,"loc":{"start":{"line":238,"column":10},"end":{"line":238,"column":13}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":31}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":31}},"4":{"start":{"line":32,"column":8},"end":{"line":32,"column":23}},"5":{"start":{"line":33,"column":8},"end":{"line":33,"column":30}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":30}},"7":{"start":{"line":35,"column":8},"end":{"line":35,"column":52}},"8":{"start":{"line":36,"column":8},"end":{"line":38,"column":10}},"9":{"start":{"line":39,"column":8},"end":{"line":39,"column":26}},"10":{"start":{"line":40,"column":8},"end":{"line":40,"column":30}},"11":{"start":{"line":41,"column":8},"end":{"line":41,"column":28}},"12":{"start":{"line":42,"column":8},"end":{"line":50,"column":9}},"13":{"start":{"line":43,"column":12},"end":{"line":47,"column":13}},"14":{"start":{"line":44,"column":16},"end":{"line":44,"column":60}},"15":{"start":{"line":46,"column":16},"end":{"line":46,"column":60}},"16":{"start":{"line":48,"column":15},"end":{"line":50,"column":9}},"17":{"start":{"line":49,"column":12},"end":{"line":49,"column":113}},"18":{"start":{"line":51,"column":8},"end":{"line":86,"column":9}},"19":{"start":{"line":52,"column":13},"end":{"line":86,"column":9}},"20":{"start":{"line":53,"column":12},"end":{"line":53,"column":85}},"21":{"start":{"line":54,"column":15},"end":{"line":86,"column":9}},"22":{"start":{"line":55,"column":12},"end":{"line":59,"column":13}},"23":{"start":{"line":56,"column":16},"end":{"line":56,"column":74}},"24":{"start":{"line":58,"column":16},"end":{"line":58,"column":95}},"25":{"start":{"line":60,"column":15},"end":{"line":86,"column":9}},"26":{"start":{"line":61,"column":12},"end":{"line":77,"column":13}},"27":{"start":{"line":62,"column":16},"end":{"line":65,"column":17}},"28":{"start":{"line":63,"column":20},"end":{"line":63,"column":43}},"29":{"start":{"line":64,"column":20},"end":{"line":64,"column":78}},"30":{"start":{"line":66,"column":16},"end":{"line":70,"column":17}},"31":{"start":{"line":67,"column":20},"end":{"line":67,"column":84}},"32":{"start":{"line":69,"column":20},"end":{"line":69,"column":76}},"33":{"start":{"line":72,"column":16},"end":{"line":75,"column":17}},"34":{"start":{"line":73,"column":20},"end":{"line":73,"column":43}},"35":{"start":{"line":74,"column":20},"end":{"line":74,"column":74}},"36":{"start":{"line":76,"column":16},"end":{"line":76,"column":89}},"37":{"start":{"line":78,"column":15},"end":{"line":86,"column":9}},"38":{"start":{"line":79,"column":12},"end":{"line":79,"column":94}},"39":{"start":{"line":80,"column":15},"end":{"line":86,"column":9}},"40":{"start":{"line":81,"column":12},"end":{"line":81,"column":78}},"41":{"start":{"line":82,"column":15},"end":{"line":86,"column":9}},"42":{"start":{"line":83,"column":12},"end":{"line":83,"column":104}},"43":{"start":{"line":85,"column":12},"end":{"line":85,"column":95}},"44":{"start":{"line":88,"column":8},"end":{"line":88,"column":34}},"45":{"start":{"line":92,"column":8},"end":{"line":94,"column":9}},"46":{"start":{"line":93,"column":12},"end":{"line":93,"column":75}},"47":{"start":{"line":95,"column":8},"end":{"line":103,"column":9}},"48":{"start":{"line":96,"column":12},"end":{"line":96,"column":46}},"49":{"start":{"line":97,"column":12},"end":{"line":97,"column":38}},"50":{"start":{"line":98,"column":12},"end":{"line":98,"column":59}},"51":{"start":{"line":100,"column":12},"end":{"line":100,"column":94}},"52":{"start":{"line":100,"column":59},"end":{"line":100,"column":92}},"53":{"start":{"line":102,"column":12},"end":{"line":102,"column":51}},"54":{"start":{"line":105,"column":8},"end":{"line":105,"column":78}},"55":{"start":{"line":106,"column":8},"end":{"line":106,"column":126}},"56":{"start":{"line":107,"column":8},"end":{"line":107,"column":64}},"57":{"start":{"line":108,"column":8},"end":{"line":108,"column":96}},"58":{"start":{"line":109,"column":8},"end":{"line":109,"column":76}},"59":{"start":{"line":111,"column":8},"end":{"line":118,"column":9}},"60":{"start":{"line":112,"column":12},"end":{"line":117,"column":15}},"61":{"start":{"line":113,"column":16},"end":{"line":116,"column":18}},"62":{"start":{"line":122,"column":8},"end":{"line":124,"column":9}},"63":{"start":{"line":123,"column":12},"end":{"line":123,"column":38}},"64":{"start":{"line":126,"column":8},"end":{"line":126,"column":42}},"65":{"start":{"line":128,"column":8},"end":{"line":138,"column":9}},"66":{"start":{"line":129,"column":12},"end":{"line":137,"column":15}},"67":{"start":{"line":130,"column":16},"end":{"line":135,"column":17}},"68":{"start":{"line":131,"column":20},"end":{"line":131,"column":76}},"69":{"start":{"line":132,"column":20},"end":{"line":134,"column":21}},"70":{"start":{"line":133,"column":24},"end":{"line":133,"column":150}},"71":{"start":{"line":136,"column":16},"end":{"line":136,"column":128}},"72":{"start":{"line":140,"column":8},"end":{"line":144,"column":9}},"73":{"start":{"line":141,"column":12},"end":{"line":143,"column":13}},"74":{"start":{"line":142,"column":16},"end":{"line":142,"column":147}},"75":{"start":{"line":146,"column":8},"end":{"line":151,"column":11}},"76":{"start":{"line":147,"column":12},"end":{"line":147,"column":54}},"77":{"start":{"line":148,"column":12},"end":{"line":150,"column":13}},"78":{"start":{"line":149,"column":16},"end":{"line":149,"column":101}},"79":{"start":{"line":153,"column":8},"end":{"line":153,"column":131}},"80":{"start":{"line":157,"column":8},"end":{"line":159,"column":9}},"81":{"start":{"line":158,"column":12},"end":{"line":158,"column":41}},"82":{"start":{"line":161,"column":8},"end":{"line":161,"column":141}},"83":{"start":{"line":161,"column":98},"end":{"line":161,"column":138}},"84":{"start":{"line":165,"column":8},"end":{"line":165,"column":107}},"85":{"start":{"line":177,"column":8},"end":{"line":177,"column":94}},"86":{"start":{"line":185,"column":8},"end":{"line":185,"column":84}},"87":{"start":{"line":193,"column":8},"end":{"line":193,"column":86}},"88":{"start":{"line":203,"column":8},"end":{"line":203,"column":109}},"89":{"start":{"line":213,"column":8},"end":{"line":213,"column":110}},"90":{"start":{"line":223,"column":8},"end":{"line":223,"column":113}},"91":{"start":{"line":231,"column":8},"end":{"line":231,"column":96}},"92":{"start":{"line":239,"column":8},"end":{"line":239,"column":87}},"93":{"start":{"line":243,"column":0},"end":{"line":243,"column":25}}},"branchMap":{"1":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":23},"end":{"line":36,"column":57}},{"start":{"line":36,"column":61},"end":{"line":38,"column":9}}]},"2":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":8}},{"start":{"line":42,"column":8},"end":{"line":42,"column":8}}]},"3":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":12},"end":{"line":43,"column":12}},{"start":{"line":43,"column":12},"end":{"line":43,"column":12}}]},"4":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":15},"end":{"line":48,"column":15}},{"start":{"line":48,"column":15},"end":{"line":48,"column":15}}]},"5":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":51,"column":8}},{"start":{"line":51,"column":8},"end":{"line":51,"column":8}}]},"6":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":11},"end":{"line":51,"column":26}},{"start":{"line":51,"column":30},"end":{"line":51,"column":53}}]},"7":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":13},"end":{"line":52,"column":13}},{"start":{"line":52,"column":13},"end":{"line":52,"column":13}}]},"8":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":15},"end":{"line":54,"column":15}},{"start":{"line":54,"column":15},"end":{"line":54,"column":15}}]},"9":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":12},"end":{"line":55,"column":12}},{"start":{"line":55,"column":12},"end":{"line":55,"column":12}}]},"10":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":15},"end":{"line":60,"column":15}},{"start":{"line":60,"column":15},"end":{"line":60,"column":15}}]},"11":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":12},"end":{"line":61,"column":12}},{"start":{"line":61,"column":12},"end":{"line":61,"column":12}}]},"12":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":16},"end":{"line":62,"column":16}},{"start":{"line":62,"column":16},"end":{"line":62,"column":16}}]},"13":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":20},"end":{"line":62,"column":42}},{"start":{"line":62,"column":46},"end":{"line":62,"column":122}}]},"14":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":16},"end":{"line":66,"column":16}},{"start":{"line":66,"column":16},"end":{"line":66,"column":16}}]},"15":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":16},"end":{"line":72,"column":16}},{"start":{"line":72,"column":16},"end":{"line":72,"column":16}}]},"16":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":15},"end":{"line":78,"column":15}},{"start":{"line":78,"column":15},"end":{"line":78,"column":15}}]},"17":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":15},"end":{"line":80,"column":15}},{"start":{"line":80,"column":15},"end":{"line":80,"column":15}}]},"18":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":15},"end":{"line":82,"column":15}},{"start":{"line":82,"column":15},"end":{"line":82,"column":15}}]},"19":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":8},"end":{"line":92,"column":8}},{"start":{"line":92,"column":8},"end":{"line":92,"column":8}}]},"20":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":13},"end":{"line":93,"column":30}},{"start":{"line":93,"column":34},"end":{"line":93,"column":55}}]},"21":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":8},"end":{"line":95,"column":8}},{"start":{"line":95,"column":8},"end":{"line":95,"column":8}}]},"22":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":27},"end":{"line":96,"column":39}},{"start":{"line":96,"column":43},"end":{"line":96,"column":45}}]},"23":{"line":105,"type":"cond-expr","locations":[{"start":{"line":105,"column":50},"end":{"line":105,"column":63}},{"start":{"line":105,"column":66},"end":{"line":105,"column":77}}]},"24":{"line":106,"type":"cond-expr","locations":[{"start":{"line":106,"column":69},"end":{"line":106,"column":102}},{"start":{"line":106,"column":105},"end":{"line":106,"column":125}}]},"25":{"line":107,"type":"cond-expr","locations":[{"start":{"line":107,"column":44},"end":{"line":107,"column":52}},{"start":{"line":107,"column":55},"end":{"line":107,"column":63}}]},"26":{"line":108,"type":"cond-expr","locations":[{"start":{"line":108,"column":60},"end":{"line":108,"column":76}},{"start":{"line":108,"column":79},"end":{"line":108,"column":95}}]},"27":{"line":109,"type":"cond-expr","locations":[{"start":{"line":109,"column":50},"end":{"line":109,"column":61}},{"start":{"line":109,"column":64},"end":{"line":109,"column":75}}]},"28":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":8},"end":{"line":111,"column":8}},{"start":{"line":111,"column":8},"end":{"line":111,"column":8}}]},"29":{"line":113,"type":"cond-expr","locations":[{"start":{"line":113,"column":51},"end":{"line":113,"column":96}},{"start":{"line":113,"column":99},"end":{"line":113,"column":118}}]},"30":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":8},"end":{"line":122,"column":8}},{"start":{"line":122,"column":8},"end":{"line":122,"column":8}}]},"31":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":8},"end":{"line":128,"column":8}},{"start":{"line":128,"column":8},"end":{"line":128,"column":8}}]},"32":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":16},"end":{"line":130,"column":16}},{"start":{"line":130,"column":16},"end":{"line":130,"column":16}}]},"33":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":20},"end":{"line":132,"column":20}},{"start":{"line":132,"column":20},"end":{"line":132,"column":20}}]},"34":{"line":133,"type":"binary-expr","locations":[{"start":{"line":133,"column":111},"end":{"line":133,"column":128}},{"start":{"line":133,"column":132},"end":{"line":133,"column":148}}]},"35":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":8},"end":{"line":140,"column":8}},{"start":{"line":140,"column":8},"end":{"line":140,"column":8}}]},"36":{"line":140,"type":"binary-expr","locations":[{"start":{"line":140,"column":11},"end":{"line":140,"column":29}},{"start":{"line":140,"column":33},"end":{"line":140,"column":50}}]},"37":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":12},"end":{"line":148,"column":12}},{"start":{"line":148,"column":12},"end":{"line":148,"column":12}}]},"38":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":15},"end":{"line":148,"column":22}},{"start":{"line":148,"column":26},"end":{"line":148,"column":38}},{"start":{"line":148,"column":42},"end":{"line":148,"column":57}}]},"39":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":8},"end":{"line":157,"column":8}},{"start":{"line":157,"column":8},"end":{"line":157,"column":8}}]},"40":{"line":161,"type":"binary-expr","locations":[{"start":{"line":161,"column":41},"end":{"line":161,"column":73}},{"start":{"line":161,"column":77},"end":{"line":161,"column":79}}]},"41":{"line":165,"type":"binary-expr","locations":[{"start":{"line":165,"column":15},"end":{"line":165,"column":33}},{"start":{"line":165,"column":37},"end":{"line":165,"column":48}},{"start":{"line":165,"column":52},"end":{"line":165,"column":98}},{"start":{"line":165,"column":102},"end":{"line":165,"column":106}}]}},"code":["\"use strict\";","","const Base = require(\"./Base\");","const Call = require(\"./Call\");","const User = require(\"./User\");","","/**","* Represents a message","* @prop {String} id The ID of the message","* @prop {Channel} channel The channel the message is in","* @prop {Guild?} guild The guild the message channel is in. Alias to channel.guild","* @prop {Number} timestamp Timestamp of message creation","* @prop {User} author The message author","* @prop {Member?} member The message author with server-specific data","* @prop {User[]} mentions Array of mentioned users","* @prop {String} content Message content","* @prop {String?} cleanContent Message content with mentions replaced by names, and @everyone/@here escaped","* @prop {String[]} roleMentions Array of mentioned roles' ids","* @prop {String[]?} channelMentions Array of mentions channels' ids","* @prop {Number?} editedTimestamp Timestamp of latest message edit","* @prop {Boolean} tts Whether to play the message using TTS or not","* @prop {Boolean} mentionEveryone Whether the message mentions everyone/here or not","* @prop {Object[]} attachments Array of attachments","* @prop {Object[]} embeds Array of embeds","* @prop {Object} reactions An object containing the reactions on the message","* @prop {Number} reactions.count The number of times the reaction was used","* @prop {Boolean} reactions.me Whether or not the bot user did the reaction","* @prop {Boolean} command True if message is a command, false if not (CommandClient only)","*/","class Message extends Base {","    constructor(data, client) {","        super(data.id);","        this._client = client;","        this.type = data.type;","        this.timestamp = Date.parse(data.timestamp);","        this.channel = client.getChannel(data.channel_id) || {","            id: data.channel_id","        };","        this.content = \"\";","        this.hit = !!data.hit;","        this.reactions = {};","        if(data.author) {","            if(data.author.discriminator !== \"0000\") {","                this.author = client.users.add(data.author);","            } else {","                this.author = new User(data.author, client);","            }","        } else if(data.timestamp) {","            this._client.emit(\"warn\", \"MESSAGE_CREATE but no message author:\\n\" + JSON.stringify(data, null, 2));","        }","        if(this.type === 0 || this.type === undefined);","        else if(this.type === 1) {","            data.content = `${this.author.mention} added <@${data.mentions[0].id}>.`;","        } else if(this.type === 2) {","            if(this.author.id === data.mentions[0].id) {","                data.content = `@${this.author.username} left the group.`;","            } else {","                data.content = `${this.author.mention} removed @${data.mentions[0].username}.`;","            }","        } else if(this.type === 3) { // (╯°□°）╯︵ ┻━┻","            if(data.call.ended_timestamp) {","                if((!this.channel.lastCall || this.channel.lastCall.endedTimestamp < Date.parse(data.call.ended_timestamp))) {","                    data.call.id = this.id;","                    this.channel.lastCall = new Call(data.call, this.channel);","                }","                if(~data.call.participants.indexOf(client.user.id)) {","                    data.content = `You missed a call from ${this.author.mention}.`;","                } else {","                    data.content = `${this.author.mention} started a call.`;","                }","            } else {","                if(!this.channel.call) {","                    data.call.id = this.id;","                    this.channel.call = new Call(data.call, this.channel);","                }","                data.content = `${this.author.mention} started a call. — Join the call.`;","            }","        } else if(this.type === 4) {","            data.content = `${this.author.mention} changed the channel name: ${data.content}`;","        } else if(this.type === 5) {","            data.content = `${this.author.mention} changed the channel icon.`;","        } else if(this.type === 6) {","            data.content = `${this.author.mention} pinned a message to this channel. See all the pins.`;","        } else {","            throw new Error(\"Unhandled MESSAGE_CREATE type: \" + JSON.stringify(data, null, 2));","        }","","        this.update(data, client);","    }","","    update(data, client) {","        if(this.type === 3) { // (╯°□°）╯︵ ┻━┻","            (this.channel.call || this.channel.lastCall).update(data.call);","        }","        if(data.content !== undefined) {","            this.content = data.content || \"\";","            this._cleanContent = null;","            this.mentionEveryone = !!data.mention_everyone;","","            this.mentions = data.mentions.map((mention) => client.users.add(mention, client));","","            this.roleMentions = data.mention_roles;","        }","","        this.pinned = data.pinned !== undefined ? !!data.pinned : this.pinned;","        this.editedTimestamp = data.edited_timestamp !== undefined ? Date.parse(data.edited_timestamp) : this.editedTimestamp;","        this.tts = data.tts !== undefined ? data.tts : this.tts;","        this.attachments = data.attachments !== undefined ? data.attachments : this.attachments; // TODO parse attachments","        this.embeds = data.embeds !== undefined ? data.embeds : this.embeds; // TODO parse embeds","","        if(data.reactions) {","            data.reactions.forEach((reaction) => {","                this.reactions[reaction.emoji.id ? `${reaction.emoji.name}:${reaction.emoji.id}` : reaction.emoji.name] = {","                    count: reaction.count,","                    me: reaction.me","                };","            });","        }","    }","","    get cleanContent() {","        if(this._cleanContent) {","            return this._cleanContent;","        }","","        this._cleanContent = this.content;","","        if(this.mentions) {","            this.mentions.forEach((mention) => {","                if(this.channel.guild) {","                    var member = this.channel.guild.members.get(mention.id);","                    if(member) {","                        this._cleanContent = this._cleanContent.replace(new RegExp(`<@\\!${mention.id}>`, \"g\"), \"@\" + member.nick || mention.username);","                    }","                }","                this._cleanContent = this._cleanContent.replace(new RegExp(`<@\\!?${mention.id}>`, \"g\"), \"@\" + mention.username);","            });","        }","","        if(this.channel.guild && this.roleMentions) {","            for(var roleID of this.roleMentions) {","                this._cleanContent = this._cleanContent.replace(new RegExp(`<@&${roleID}>`, \"g\"), \"@\" + this.channel.guild.roles.get(roleID).name);","            }","        }","","        this.channelMentions.forEach((id) => {","            var channel = this._client.getChannel(id);","            if(channel && channel.name && channel.mention) {","                this._cleanContent = this._cleanContent.replace(channel.mention, \"#\" + channel.name);","            }","        });","","        return (this._cleanContent = this._cleanContent.replace(/@everyone/g, \"@\\u200beveryone\").replace(/@here/g, \"@\\u200bhere\"));","    }","","    get channelMentions() {","        if(this._channelMentions) {","            return this._channelMentions;","        }","","        return (this._channelMentions = (this.content.match(/<#[0-9]+>/g) || []).map((mention) => mention.substring(2, mention.length - 1)));","    }","","    get member() {","        return this.channel.guild && this.author && this.channel.guild.members.get(this.author.id) || null;","    }","","    /**","    * Edit the message","    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:","    * @arg {String} content.content A content string","    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)","    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure","    * @returns {Promise<Message>}","    */","    edit(content) {","        return this._client.editMessage.call(this._client, this.channel.id, this.id, content);","    }","","    /**","    * Pin the message","    * @returns {Promise}","    */","    pin() {","        return this._client.pinMessage.call(this._client, this.channel.id, this.id);","    }","","    /**","    * Unpin the message","    * @returns {Promise}","    */","    unpin() {","        return this._client.unpinMessage.call(this._client, this.channel.id, this.id);","    }","","    /**","    * Get a list of users who reacted with a specific reaction","    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)","    * @arg {Number} [limit=100] The maximum number of users to get","    * @returns {Promise<User[]>}","    */","    getReaction(reaction, limit) {","        return this._client.getMessageReaction.call(this._client, this.channel.id, this.id, reaction, limit);","    }","","    /**","    * Add a reaction to a message","    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)","    * @arg {String} [userID=\"@me\"] The ID of the user to react as","    * @returns {Promise}","    */","    addReaction(reaction, userID) {","        return this._client.addMessageReaction.call(this._client, this.channel.id, this.id, reaction, userID);","    }","","    /**","    * Remove a reaction from a message","    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)","    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for","    * @returns {Promise}","    */","    removeReaction(reaction, userID) {","        return this._client.removeMessageReaction.call(this._client, this.channel.id, this.id, reaction, userID);","    }","","    /**","    * Remove all reactions from a message","    * @returns {Promise}","    */","    removeReactions() {","        return this._client.removeMessageReactions.call(this._client, this.channel.id, this.id);","    }","","    /**","    * Delete the message","    * @returns {Promise}","    */","    delete() {","        return this._client.deleteMessage.call(this._client, this.channel.id, this.id);","    }","}","","module.exports = Message;",""],"l":{"3":1,"4":1,"5":1,"32":0,"33":0,"34":0,"35":0,"36":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"46":0,"48":0,"49":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"58":0,"60":0,"61":0,"62":0,"63":0,"64":0,"66":0,"67":0,"69":0,"72":0,"73":0,"74":0,"76":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"85":0,"88":0,"92":0,"93":0,"95":0,"96":0,"97":0,"98":0,"100":0,"102":0,"105":0,"106":0,"107":0,"108":0,"109":0,"111":0,"112":0,"113":0,"122":0,"123":0,"126":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"136":0,"140":0,"141":0,"142":0,"146":0,"147":0,"148":0,"149":0,"153":0,"157":0,"158":0,"161":0,"165":0,"177":0,"185":0,"193":0,"203":0,"213":0,"223":0,"231":0,"239":0,"243":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Call.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Call.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":15},"end":{"line":20,"column":31}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":10},"end":{"line":28,"column":17}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":49}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":43}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":23}},"5":{"start":{"line":22,"column":8},"end":{"line":22,"column":31}},"6":{"start":{"line":23,"column":8},"end":{"line":23,"column":54}},"7":{"start":{"line":24,"column":8},"end":{"line":24,"column":26}},"8":{"start":{"line":25,"column":8},"end":{"line":25,"column":26}},"9":{"start":{"line":29,"column":8},"end":{"line":29,"column":106}},"10":{"start":{"line":30,"column":8},"end":{"line":39,"column":9}},"11":{"start":{"line":31,"column":12},"end":{"line":38,"column":13}},"12":{"start":{"line":37,"column":16},"end":{"line":37,"column":60}},"13":{"start":{"line":40,"column":8},"end":{"line":40,"column":84}},"14":{"start":{"line":41,"column":8},"end":{"line":41,"column":130}},"15":{"start":{"line":42,"column":8},"end":{"line":42,"column":136}},"16":{"start":{"line":43,"column":8},"end":{"line":48,"column":9}},"17":{"start":{"line":44,"column":12},"end":{"line":47,"column":15}},"18":{"start":{"line":45,"column":16},"end":{"line":45,"column":51}},"19":{"start":{"line":46,"column":16},"end":{"line":46,"column":49}},"20":{"start":{"line":52,"column":0},"end":{"line":52,"column":22}}},"branchMap":{"1":{"line":29,"type":"cond-expr","locations":[{"start":{"line":29,"column":62},"end":{"line":29,"column":79}},{"start":{"line":29,"column":82},"end":{"line":29,"column":105}}]},"2":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":82},"end":{"line":29,"column":99}},{"start":{"line":29,"column":103},"end":{"line":29,"column":105}}]},"3":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":30,"column":8}},{"start":{"line":30,"column":8},"end":{"line":30,"column":8}}]},"4":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":12},"end":{"line":31,"column":12}},{"start":{"line":31,"column":12},"end":{"line":31,"column":12}}]},"5":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":15},"end":{"line":31,"column":67}},{"start":{"line":31,"column":71},"end":{"line":31,"column":139}}]},"6":{"line":40,"type":"cond-expr","locations":[{"start":{"line":40,"column":50},"end":{"line":40,"column":61}},{"start":{"line":40,"column":64},"end":{"line":40,"column":83}}]},"7":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":64},"end":{"line":40,"column":75}},{"start":{"line":40,"column":79},"end":{"line":40,"column":83}}]},"8":{"line":41,"type":"cond-expr","locations":[{"start":{"line":41,"column":67},"end":{"line":41,"column":99}},{"start":{"line":41,"column":102},"end":{"line":41,"column":129}}]},"9":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":102},"end":{"line":41,"column":121}},{"start":{"line":41,"column":125},"end":{"line":41,"column":129}}]},"10":{"line":42,"type":"cond-expr","locations":[{"start":{"line":42,"column":60},"end":{"line":42,"column":76}},{"start":{"line":42,"column":79},"end":{"line":42,"column":135}}]},"11":{"line":42,"type":"cond-expr","locations":[{"start":{"line":42,"column":112},"end":{"line":42,"column":128}},{"start":{"line":42,"column":131},"end":{"line":42,"column":135}}]},"12":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":43,"column":8}},{"start":{"line":43,"column":8},"end":{"line":43,"column":8}}]}},"code":["\"use strict\";","","const Base = require(\"./Base\");","const Collection = require(\"../util/Collection\");","const VoiceState = require(\"./VoiceState\");","","/**","* Represents a call","* @prop {String} id The ID of the call","* @prop {Number} createdAt Timestamp of the call's creation","* @prop {GroupChannel} channel The call channel","* @prop {Collection<VoiceState>} voiceStates The voice states of the call participants","* @prop {String[]} participants The IDs of the call participants","* @prop {Number?} endedTimestamp The timestamp of the call end","* @prop {String[]?} ringing The IDs of people that still have not responded to the call request","* @prop {String?} region The region of the call server","* @prop {Boolean} unavailable Whether the call is unavailable or not","*/","class Call extends Base {","    constructor(data, channel) {","        super(data.id);","        this.channel = channel;","        this.voiceStates = new Collection(VoiceState);","        this.ringing = [];","        this.update(data);","    }","","    update(data) {","        this.participants = data.participants !== undefined ? data.participants : this.participants || [];","        if(data.ringing !== undefined) {","            if(!~this.ringing.indexOf(this.channel._client.user.id) && ~(this.ringing = data.ringing).indexOf(this.channel._client.user.id)) {","                /**","                * Fired when the bot user is rung in a call","                * @event Client#callRing","                * @prop {Call} call The call","                */","                this.channel._client.emit(\"callRing\", this);","            }","        }","        this.region = data.region !== undefined ? data.region : this.region || null;","        this.endedTimestamp = data.ended_timestamp !== undefined ? Date.parse(data.ended_timestamp) : this.endedTimestamp || null;","        this.unavailable = data.unavailable !== undefined ? data.unavailable : this.unavailable !== undefined ? this.unavailable : true;","        if(data.voice_states) {","            data.voice_states.forEach((voiceState) => {","                voiceState.id = voiceState.user_id;","                this.voiceStates.add(voiceState);","            });","        }","    }","}","","module.exports = Call;"],"l":{"3":1,"4":1,"5":1,"21":0,"22":0,"23":0,"24":0,"25":0,"29":0,"30":0,"31":0,"37":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"52":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/User.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/User.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":15},"end":{"line":24,"column":30}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":10},"end":{"line":31,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":15},"end":{"line":37,"column":18}}},"4":{"name":"(anonymous_4)","line":41,"loc":{"start":{"line":41,"column":21},"end":{"line":41,"column":24}}},"5":{"name":"(anonymous_5)","line":45,"loc":{"start":{"line":45,"column":24},"end":{"line":45,"column":27}}},"6":{"name":"(anonymous_6)","line":49,"loc":{"start":{"line":49,"column":23},"end":{"line":49,"column":25}}},"7":{"name":"(anonymous_7)","line":53,"loc":{"start":{"line":53,"column":17},"end":{"line":53,"column":20}}},"8":{"name":"(anonymous_8)","line":62,"loc":{"start":{"line":62,"column":20},"end":{"line":62,"column":35}}},"9":{"name":"(anonymous_9)","line":76,"loc":{"start":{"line":76,"column":16},"end":{"line":76,"column":19}}},"10":{"name":"(anonymous_10)","line":85,"loc":{"start":{"line":85,"column":19},"end":{"line":85,"column":27}}},"11":{"name":"(anonymous_11)","line":93,"loc":{"start":{"line":93,"column":22},"end":{"line":93,"column":25}}},"12":{"name":"(anonymous_12)","line":101,"loc":{"start":{"line":101,"column":14},"end":{"line":101,"column":17}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":53}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":72}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":42}},"5":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"6":{"start":{"line":26,"column":8},"end":{"line":26,"column":30}},"7":{"start":{"line":27,"column":8},"end":{"line":27,"column":30}},"8":{"start":{"line":28,"column":8},"end":{"line":28,"column":26}},"9":{"start":{"line":32,"column":8},"end":{"line":32,"column":76}},"10":{"start":{"line":33,"column":8},"end":{"line":33,"column":84}},"11":{"start":{"line":34,"column":8},"end":{"line":34,"column":104}},"12":{"start":{"line":38,"column":8},"end":{"line":38,"column":31}},"13":{"start":{"line":42,"column":8},"end":{"line":42,"column":84}},"14":{"start":{"line":46,"column":8},"end":{"line":46,"column":73}},"15":{"start":{"line":50,"column":8},"end":{"line":50,"column":189}},"16":{"start":{"line":54,"column":8},"end":{"line":54,"column":228}},"17":{"start":{"line":63,"column":8},"end":{"line":65,"column":9}},"18":{"start":{"line":64,"column":12},"end":{"line":64,"column":100}},"19":{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},"20":{"start":{"line":67,"column":12},"end":{"line":67,"column":57}},"21":{"start":{"line":69,"column":8},"end":{"line":69,"column":123}},"22":{"start":{"line":77,"column":8},"end":{"line":77,"column":69}},"23":{"start":{"line":86,"column":8},"end":{"line":86,"column":79}},"24":{"start":{"line":94,"column":8},"end":{"line":94,"column":75}},"25":{"start":{"line":102,"column":8},"end":{"line":102,"column":71}},"26":{"start":{"line":106,"column":0},"end":{"line":106,"column":22}}},"branchMap":{"1":{"line":32,"type":"cond-expr","locations":[{"start":{"line":32,"column":50},"end":{"line":32,"column":61}},{"start":{"line":32,"column":64},"end":{"line":32,"column":75}}]},"2":{"line":33,"type":"cond-expr","locations":[{"start":{"line":33,"column":54},"end":{"line":33,"column":67}},{"start":{"line":33,"column":70},"end":{"line":33,"column":83}}]},"3":{"line":34,"type":"cond-expr","locations":[{"start":{"line":34,"column":64},"end":{"line":34,"column":82}},{"start":{"line":34,"column":85},"end":{"line":34,"column":103}}]},"4":{"line":50,"type":"cond-expr","locations":[{"start":{"line":50,"column":29},"end":{"line":50,"column":164}},{"start":{"line":50,"column":167},"end":{"line":50,"column":188}}]},"5":{"line":54,"type":"cond-expr","locations":[{"start":{"line":54,"column":29},"end":{"line":54,"column":203}},{"start":{"line":54,"column":206},"end":{"line":54,"column":227}}]},"6":{"line":54,"type":"cond-expr","locations":[{"start":{"line":54,"column":108},"end":{"line":54,"column":113}},{"start":{"line":54,"column":116},"end":{"line":54,"column":155}}]},"7":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":8}},{"start":{"line":63,"column":8},"end":{"line":63,"column":8}}]},"8":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":11},"end":{"line":63,"column":31}},{"start":{"line":63,"column":35},"end":{"line":63,"column":89}}]},"9":{"line":64,"type":"cond-expr","locations":[{"start":{"line":64,"column":52},"end":{"line":64,"column":57}},{"start":{"line":64,"column":60},"end":{"line":64,"column":99}}]},"10":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":8},"end":{"line":66,"column":8}},{"start":{"line":66,"column":8},"end":{"line":66,"column":8}}]},"11":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":11},"end":{"line":66,"column":29}},{"start":{"line":66,"column":33},"end":{"line":66,"column":69}}]},"12":{"line":69,"type":"cond-expr","locations":[{"start":{"line":69,"column":29},"end":{"line":69,"column":98}},{"start":{"line":69,"column":101},"end":{"line":69,"column":122}}]}},"code":["\"use strict\";","","const Base = require(\"./Base\");","const CDN_URL = require(\"../rest/Endpoints\").CDN_URL;","const DefaultAvatarHashes = require(\"../Constants\").DefaultAvatarHashes;","const Constants = require(\"../Constants\");","","/**","* Represents a user","* @prop {String} id The ID of the user","* @prop {Number} createdAt Timestamp of the user's creation","* @prop {String} mention A string that mentions the user","* @prop {String} defaultAvatar The hash for the default avatar of a user if there is no avatar set","* @prop {Number} createdAt Timestamp of user creation","* @prop {Boolean} bot Whether the user is an OAuth bot or not","* @prop {String} username The username of the user","* @prop {String} discriminator The discriminator of the user","* @prop {String?} avatar The hash of the user's avatar, or null if no avatar","* @prop {String} defaultAvatarURL The URL of the user's default avatar","* @prop {String} avatarURL The URL of the user's avatar which can be either a JPG or GIF","* @prop {String} staticAvatarURL The URL of the user's avatar (always a JPG)","*/","class User extends Base {","    constructor(data, client) {","        super(data.id);","        this._client = client;","        this.bot = !!data.bot;","        this.update(data);","    }","","    update(data) {","        this.avatar = data.avatar !== undefined ? data.avatar : this.avatar;","        this.username = data.username !== undefined ? data.username : this.username;","        this.discriminator = data.discriminator !== undefined ? data.discriminator : this.discriminator;","    }","","    get mention() {","        return `<@${this.id}>`;","    }","","    get defaultAvatar() {","        return DefaultAvatarHashes[this.discriminator % DefaultAvatarHashes.length];","    }","","    get defaultAvatarURL() {","        return `https://discordapp.com/assets/${this.defaultAvatar}.png`;","    }","","    get staticAvatarURL(){","        return this.avatar ? `${CDN_URL}/avatars/${this.id}/${this.avatar}.${this._client.options.defaultImageFormat}?size=${this._client.options.defaultImageSize}` : this.defaultAvatarURL;","    }","","    get avatarURL() {","        return this.avatar ? `${CDN_URL}/avatars/${this.id}/${this.avatar}.${this.avatar.startsWith(\"a_\") ? \"gif\" : this._client.options.defaultImageFormat}?size=${this._client.options.defaultImageSize}` : this.defaultAvatarURL;","    }","","    /**","    * Get the user's avatar with the given format and size","    * @arg {String} [format] The filetype of the avatar (\"jpg\", \"png\", \"gif\", or \"webp\")","    * @arg {Number} [size] The size of the avatar (128, 256, 512, 1024, 2048)","    */","    dynamicAvatarURL(format, size) {","        if(format === undefined || !~Constants.ImageFormats.indexOf(format.toLowerCase())) {","            format = this.avatar.startsWith(\"a_\") ? \"gif\" : this._client.options.defaultImageFormat;","        }","        if(size === undefined || !~Constants.ImageSizes.indexOf(size)) {","            size = this._client.options.defaultImageSize;","        }","        return this.avatar ? `${CDN_URL}/avatars/${this.id}/${this.avatar}.${format}?size=${size}` : this.defaultAvatarURL;","    }","","    /**","    * Get a DM channel with the user, or create one if it does not exist","    * @returns {Promise<PrivateChannel>}","    */","    getDMChannel() {","        return this._client.getDMChannel.call(this._client, this.id);","    }","","    /**","    * Create a relationship with the user","    * @arg {Boolean} [block=false] If true, block the user. Otherwise, add the user as a friend","    * @returns {Promise}","    */","    addRelationship(block) {","        return this._client.addRelationship.call(this._client, this.id, block);","    }","","    /**","    * Remove a relationship with the user","    * @returns {Promise}","    */","    removeRelationship() {","        return this._client.removeRelationship.call(this._client, this.id);","    }","","    /**","    * Get profile data for the user (user accounts only)","    * @returns {Promise<Object>} The user's profile data.","    */","    getProfile() {","        return this._client.getUserProfile.call(this._client, this.id);","    }","}","","module.exports = User;",""],"l":{"3":1,"4":1,"5":1,"6":1,"25":0,"26":0,"27":0,"28":0,"32":0,"33":0,"34":0,"38":0,"42":0,"46":0,"50":0,"54":0,"63":0,"64":0,"66":0,"67":0,"69":0,"77":0,"86":0,"94":0,"102":0,"106":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/rest/Endpoints.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/rest/Endpoints.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":0,"8":1,"9":0,"10":1,"11":0,"12":1,"13":0,"14":1,"15":0,"16":1,"17":0,"18":1,"19":0,"20":1,"21":0,"22":1,"23":0,"24":1,"25":0,"26":1,"27":0,"28":1,"29":0,"30":1,"31":0,"32":1,"33":0,"34":1,"35":0,"36":1,"37":0,"38":1,"39":1,"40":1,"41":1,"42":0,"43":1,"44":0,"45":1,"46":0,"47":1,"48":0,"49":1,"50":0,"51":1,"52":0,"53":1,"54":0,"55":1,"56":0,"57":1,"58":0,"59":1,"60":0,"61":1,"62":0,"63":1,"64":0,"65":1,"66":0,"67":1,"68":0,"69":1,"70":0,"71":1,"72":0,"73":1,"74":0,"75":1,"76":0,"77":1,"78":0,"79":1,"80":0,"81":1,"82":0,"83":1,"84":1,"85":0,"86":1,"87":0,"88":1,"89":0,"90":1,"91":0,"92":1,"93":0,"94":1,"95":0,"96":1,"97":0,"98":1,"99":0,"100":1,"101":0,"102":1,"103":0,"104":1,"105":1,"106":1,"107":0,"108":1,"109":0,"110":1,"111":0},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":42}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":63}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":54}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":106}},"5":{"start":{"line":8,"column":84},"end":{"line":8,"column":105}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":127}},"7":{"start":{"line":9,"column":84},"end":{"line":9,"column":126}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":116}},"9":{"start":{"line":10,"column":84},"end":{"line":10,"column":115}},"10":{"start":{"line":11,"column":0},"end":{"line":11,"column":114}},"11":{"start":{"line":11,"column":84},"end":{"line":11,"column":113}},"12":{"start":{"line":12,"column":0},"end":{"line":12,"column":146}},"13":{"start":{"line":12,"column":84},"end":{"line":12,"column":145}},"14":{"start":{"line":13,"column":0},"end":{"line":13,"column":156}},"15":{"start":{"line":13,"column":84},"end":{"line":13,"column":155}},"16":{"start":{"line":14,"column":0},"end":{"line":14,"column":134}},"17":{"start":{"line":14,"column":84},"end":{"line":14,"column":133}},"18":{"start":{"line":15,"column":0},"end":{"line":15,"column":124}},"19":{"start":{"line":15,"column":84},"end":{"line":15,"column":123}},"20":{"start":{"line":16,"column":0},"end":{"line":16,"column":115}},"21":{"start":{"line":16,"column":84},"end":{"line":16,"column":114}},"22":{"start":{"line":17,"column":0},"end":{"line":17,"column":122}},"23":{"start":{"line":17,"column":84},"end":{"line":17,"column":121}},"24":{"start":{"line":18,"column":0},"end":{"line":18,"column":128}},"25":{"start":{"line":18,"column":84},"end":{"line":18,"column":127}},"26":{"start":{"line":19,"column":0},"end":{"line":19,"column":118}},"27":{"start":{"line":19,"column":84},"end":{"line":19,"column":117}},"28":{"start":{"line":20,"column":0},"end":{"line":20,"column":120}},"29":{"start":{"line":20,"column":84},"end":{"line":20,"column":119}},"30":{"start":{"line":21,"column":0},"end":{"line":21,"column":111}},"31":{"start":{"line":21,"column":84},"end":{"line":21,"column":110}},"32":{"start":{"line":22,"column":0},"end":{"line":22,"column":128}},"33":{"start":{"line":22,"column":84},"end":{"line":22,"column":127}},"34":{"start":{"line":23,"column":0},"end":{"line":23,"column":113}},"35":{"start":{"line":23,"column":84},"end":{"line":23,"column":112}},"36":{"start":{"line":24,"column":0},"end":{"line":24,"column":115}},"37":{"start":{"line":24,"column":84},"end":{"line":24,"column":114}},"38":{"start":{"line":25,"column":0},"end":{"line":25,"column":96}},"39":{"start":{"line":26,"column":0},"end":{"line":26,"column":95}},"40":{"start":{"line":27,"column":0},"end":{"line":27,"column":99}},"41":{"start":{"line":28,"column":0},"end":{"line":28,"column":105}},"42":{"start":{"line":28,"column":84},"end":{"line":28,"column":104}},"43":{"start":{"line":29,"column":0},"end":{"line":29,"column":122}},"44":{"start":{"line":29,"column":84},"end":{"line":29,"column":121}},"45":{"start":{"line":30,"column":0},"end":{"line":30,"column":110}},"46":{"start":{"line":30,"column":84},"end":{"line":30,"column":109}},"47":{"start":{"line":31,"column":0},"end":{"line":31,"column":114}},"48":{"start":{"line":31,"column":84},"end":{"line":31,"column":113}},"49":{"start":{"line":32,"column":0},"end":{"line":32,"column":111}},"50":{"start":{"line":32,"column":84},"end":{"line":32,"column":110}},"51":{"start":{"line":33,"column":0},"end":{"line":33,"column":123}},"52":{"start":{"line":33,"column":84},"end":{"line":33,"column":122}},"53":{"start":{"line":34,"column":0},"end":{"line":34,"column":112}},"54":{"start":{"line":34,"column":84},"end":{"line":34,"column":111}},"55":{"start":{"line":35,"column":0},"end":{"line":35,"column":128}},"56":{"start":{"line":35,"column":84},"end":{"line":35,"column":127}},"57":{"start":{"line":36,"column":0},"end":{"line":36,"column":133}},"58":{"start":{"line":36,"column":84},"end":{"line":36,"column":132}},"59":{"start":{"line":37,"column":0},"end":{"line":37,"column":118}},"60":{"start":{"line":37,"column":84},"end":{"line":37,"column":117}},"61":{"start":{"line":38,"column":0},"end":{"line":38,"column":113}},"62":{"start":{"line":38,"column":84},"end":{"line":38,"column":112}},"63":{"start":{"line":39,"column":0},"end":{"line":39,"column":125}},"64":{"start":{"line":39,"column":84},"end":{"line":39,"column":124}},"65":{"start":{"line":40,"column":0},"end":{"line":40,"column":130}},"66":{"start":{"line":40,"column":84},"end":{"line":40,"column":129}},"67":{"start":{"line":41,"column":0},"end":{"line":41,"column":141}},"68":{"start":{"line":41,"column":84},"end":{"line":41,"column":140}},"69":{"start":{"line":42,"column":0},"end":{"line":42,"column":113}},"70":{"start":{"line":42,"column":84},"end":{"line":42,"column":112}},"71":{"start":{"line":43,"column":0},"end":{"line":43,"column":121}},"72":{"start":{"line":43,"column":84},"end":{"line":43,"column":120}},"73":{"start":{"line":44,"column":0},"end":{"line":44,"column":111}},"74":{"start":{"line":44,"column":84},"end":{"line":44,"column":110}},"75":{"start":{"line":45,"column":0},"end":{"line":45,"column":121}},"76":{"start":{"line":45,"column":84},"end":{"line":45,"column":120}},"77":{"start":{"line":46,"column":0},"end":{"line":46,"column":111}},"78":{"start":{"line":46,"column":84},"end":{"line":46,"column":110}},"79":{"start":{"line":47,"column":0},"end":{"line":47,"column":113}},"80":{"start":{"line":47,"column":84},"end":{"line":47,"column":112}},"81":{"start":{"line":48,"column":0},"end":{"line":48,"column":114}},"82":{"start":{"line":48,"column":84},"end":{"line":48,"column":113}},"83":{"start":{"line":49,"column":0},"end":{"line":49,"column":94}},"84":{"start":{"line":50,"column":0},"end":{"line":50,"column":106}},"85":{"start":{"line":50,"column":84},"end":{"line":50,"column":105}},"86":{"start":{"line":51,"column":0},"end":{"line":51,"column":116}},"87":{"start":{"line":51,"column":84},"end":{"line":51,"column":115}},"88":{"start":{"line":52,"column":0},"end":{"line":52,"column":103}},"89":{"start":{"line":52,"column":84},"end":{"line":52,"column":102}},"90":{"start":{"line":53,"column":0},"end":{"line":53,"column":112}},"91":{"start":{"line":53,"column":84},"end":{"line":53,"column":111}},"92":{"start":{"line":54,"column":0},"end":{"line":54,"column":121}},"93":{"start":{"line":54,"column":84},"end":{"line":54,"column":120}},"94":{"start":{"line":55,"column":0},"end":{"line":55,"column":110}},"95":{"start":{"line":55,"column":84},"end":{"line":55,"column":109}},"96":{"start":{"line":56,"column":0},"end":{"line":56,"column":120}},"97":{"start":{"line":56,"column":84},"end":{"line":56,"column":119}},"98":{"start":{"line":57,"column":0},"end":{"line":57,"column":111}},"99":{"start":{"line":57,"column":84},"end":{"line":57,"column":110}},"100":{"start":{"line":58,"column":0},"end":{"line":58,"column":126}},"101":{"start":{"line":58,"column":84},"end":{"line":58,"column":125}},"102":{"start":{"line":59,"column":0},"end":{"line":59,"column":112}},"103":{"start":{"line":59,"column":84},"end":{"line":59,"column":111}},"104":{"start":{"line":60,"column":0},"end":{"line":60,"column":93}},"105":{"start":{"line":61,"column":0},"end":{"line":61,"column":101}},"106":{"start":{"line":62,"column":0},"end":{"line":62,"column":106}},"107":{"start":{"line":62,"column":84},"end":{"line":62,"column":105}},"108":{"start":{"line":63,"column":0},"end":{"line":63,"column":115}},"109":{"start":{"line":63,"column":84},"end":{"line":63,"column":114}},"110":{"start":{"line":64,"column":0},"end":{"line":64,"column":121}},"111":{"start":{"line":64,"column":84},"end":{"line":64,"column":120}}},"branchMap":{},"code":["\"use strict\";","","const Constants = require(\"../Constants\");","","module.exports.BASE_URL = \"/api/v\" + Constants.GATEWAY_VERSION;","module.exports.CDN_URL = \"https://cdn.discordapp.com\";","","module.exports.CHANNEL =                                                (chanID) => `/channels/${chanID}`;","module.exports.CHANNEL_BULK_DELETE =                                    (chanID) => `/channels/${chanID}/messages/bulk_delete`;","module.exports.CHANNEL_CALL_RING =                                      (chanID) => `/channels/${chanID}/call/ring`;","module.exports.CHANNEL_INVITES =                                        (chanID) => `/channels/${chanID}/invites`;","module.exports.CHANNEL_MESSAGE_REACTION =              (chanID, msgID, reaction) => `/channels/${chanID}/messages/${msgID}/reactions/${reaction}`;","module.exports.CHANNEL_MESSAGE_REACTION_USER = (chanID, msgID, reaction, userID) => `/channels/${chanID}/messages/${msgID}/reactions/${reaction}/${userID}`;","module.exports.CHANNEL_MESSAGE_REACTIONS =                       (chanID, msgID) => `/channels/${chanID}/messages/${msgID}/reactions`;","module.exports.CHANNEL_MESSAGE =                                 (chanID, msgID) => `/channels/${chanID}/messages/${msgID}`;","module.exports.CHANNEL_MESSAGES =                                       (chanID) => `/channels/${chanID}/messages`;","module.exports.CHANNEL_MESSAGES_SEARCH =                                (chanID) => `/channels/${chanID}/messages/search`;","module.exports.CHANNEL_PERMISSION =                             (chanID, overID) => `/channels/${chanID}/permissions/${overID}`;","module.exports.CHANNEL_PERMISSIONS =                                    (chanID) => `/channels/${chanID}/permissions`;","module.exports.CHANNEL_PIN =                                     (chanID, msgID) => `/channels/${chanID}/pins/${msgID}`;","module.exports.CHANNEL_PINS =                                           (chanID) => `/channels/${chanID}/pins`;","module.exports.CHANNEL_RECIPIENT =                             (groupID, userID) => `/channels/${groupID}/recipients/${userID}`;","module.exports.CHANNEL_TYPING =                                         (chanID) => `/channels/${chanID}/typing`;","module.exports.CHANNEL_WEBHOOKS =                                       (chanID) => `/channels/${chanID}/webhooks`;","module.exports.CHANNELS =                                                           \"/channels\";","module.exports.GATEWAY =                                                            \"/gateway\";","module.exports.GATEWAY_BOT =                                                        \"/gateway/bot\";","module.exports.GUILD =                                                 (guildID) => `/guilds/${guildID}`;","module.exports.GUILD_BAN =                                   (guildID, memberID) => `/guilds/${guildID}/bans/${memberID}`;","module.exports.GUILD_BANS =                                            (guildID) => `/guilds/${guildID}/bans`;","module.exports.GUILD_CHANNELS =                                        (guildID) => `/guilds/${guildID}/channels`;","module.exports.GUILD_EMBED =                                           (guildID) => `/guilds/${guildID}/embed`;","module.exports.GUILD_EMOJI =                                  (guildID, emojiID) => `/guilds/${guildID}/emojis/${emojiID}`;","module.exports.GUILD_EMOJIS =                                          (guildID) => `/guilds/${guildID}/emojis`;","module.exports.GUILD_INTEGRATION =                             (guildID, inteID) => `/guilds/${guildID}/integrations/${inteID}`;","module.exports.GUILD_INTEGRATION_SYNC =                        (guildID, inteID) => `/guilds/${guildID}/integrations/${inteID}/sync`;","module.exports.GUILD_INTEGRATIONS =                                    (guildID) => `/guilds/${guildID}/integrations`;","module.exports.GUILD_INVITES =                                         (guildID) => `/guilds/${guildID}/invites`;","module.exports.GUILD_MEMBER =                                (guildID, memberID) => `/guilds/${guildID}/members/${memberID}`;","module.exports.GUILD_MEMBER_NICK =                           (guildID, memberID) => `/guilds/${guildID}/members/${memberID}/nick`;","module.exports.GUILD_MEMBER_ROLE =                   (guildID, memberID, roleID) => `/guilds/${guildID}/members/${memberID}/roles/${roleID}`;","module.exports.GUILD_MEMBERS =                                         (guildID) => `/guilds/${guildID}/members`;","module.exports.GUILD_MESSAGES_SEARCH =                                 (guildID) => `/guilds/${guildID}/messages/search`;","module.exports.GUILD_PRUNE =                                           (guildID) => `/guilds/${guildID}/prune`;","module.exports.GUILD_ROLE =                                    (guildID, roleID) => `/guilds/${guildID}/roles/${roleID}`;","module.exports.GUILD_ROLES =                                           (guildID) => `/guilds/${guildID}/roles`;","module.exports.GUILD_VOICE_REGIONS =                                   (guildID) => `/guilds/${guildID}/regions`;","module.exports.GUILD_WEBHOOKS =                                        (guildID) => `/guilds/${guildID}/webhooks`;","module.exports.GUILDS =                                                             \"/guilds\";","module.exports.INVITE =                                               (inviteID) => `/invite/${inviteID}`;","module.exports.OAUTH2_APPLICATION =                                      (appID) => `/oauth2/applications/${appID}`;","module.exports.USER =                                                   (userID) => `/users/${userID}`;","module.exports.USER_CHANNELS =                                          (userID) => `/users/${userID}/channels`;","module.exports.USER_GUILD =                                    (userID, guildID) => `/users/${userID}/guilds/${guildID}`;","module.exports.USER_GUILDS =                                            (userID) => `/users/${userID}/guilds`;","module.exports.USER_NOTE =                                    (userID, targetID) => `/users/${userID}/note/${targetID}`;","module.exports.USER_PROFILE =                                           (userID) => `/users/${userID}/profile`;","module.exports.USER_RELATIONSHIP =                               (userID, relID) => `/users/${userID}/relationships/${relID}`;","module.exports.USER_SETTINGS =                                          (userID) => `/users/${userID}/settings`;","module.exports.USERS =                                                              \"/users\";","module.exports.VOICE_REGIONS =                                                      \"/voice/regions\";","module.exports.WEBHOOK =                                                (hookID) => `/webhooks/${hookID}`;","module.exports.WEBHOOK_TOKEN =                                   (hookID, token) => `/webhooks/${hookID}/${token}`;","module.exports.WEBHOOK_TOKEN_SLACK =                             (hookID, token) => `/webhooks/${hookID}/${token}/slack`;",""],"l":{"3":1,"5":1,"6":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/PermissionOverwrite.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/PermissionOverwrite.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":15},"end":{"line":12,"column":22}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":43}},"2":{"start":{"line":13,"column":8},"end":{"line":13,"column":37}},"3":{"start":{"line":14,"column":8},"end":{"line":14,"column":26}},"4":{"start":{"line":15,"column":8},"end":{"line":15,"column":30}},"5":{"start":{"line":19,"column":0},"end":{"line":19,"column":37}}},"branchMap":{},"code":["\"use strict\";","","const Permission = require(\"./Permission\");","","/**","* Represents a permission overwrite","* @extends Permission","* @prop {String} id The ID of the overwrite","* @prop {String} type The type of the overwrite, either \"user\" or \"role\"","*/","class PermissionOverwrite extends Permission {","    constructor(data) {","        super(data.allow, data.deny);","        this.id = data.id;","        this.type = data.type;","    }","}","","module.exports = PermissionOverwrite;"],"l":{"3":1,"13":0,"14":0,"15":0,"19":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/ExtendedUser.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/ExtendedUser.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":15},"end":{"line":13,"column":30}}},"2":{"name":"(anonymous_2)","line":18,"loc":{"start":{"line":18,"column":10},"end":{"line":18,"column":17}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":14,"column":8},"end":{"line":14,"column":28}},"3":{"start":{"line":15,"column":8},"end":{"line":15,"column":26}},"4":{"start":{"line":19,"column":8},"end":{"line":19,"column":27}},"5":{"start":{"line":20,"column":8},"end":{"line":20,"column":72}},"6":{"start":{"line":21,"column":8},"end":{"line":21,"column":84}},"7":{"start":{"line":22,"column":8},"end":{"line":22,"column":94}},"8":{"start":{"line":23,"column":8},"end":{"line":23,"column":80}},"9":{"start":{"line":27,"column":0},"end":{"line":27,"column":30}}},"branchMap":{"1":{"line":20,"type":"cond-expr","locations":[{"start":{"line":20,"column":48},"end":{"line":20,"column":58}},{"start":{"line":20,"column":61},"end":{"line":20,"column":71}}]},"2":{"line":21,"type":"cond-expr","locations":[{"start":{"line":21,"column":54},"end":{"line":21,"column":67}},{"start":{"line":21,"column":70},"end":{"line":21,"column":83}}]},"3":{"line":22,"type":"cond-expr","locations":[{"start":{"line":22,"column":59},"end":{"line":22,"column":75}},{"start":{"line":22,"column":78},"end":{"line":22,"column":93}}]},"4":{"line":23,"type":"cond-expr","locations":[{"start":{"line":23,"column":52},"end":{"line":23,"column":64}},{"start":{"line":23,"column":67},"end":{"line":23,"column":79}}]}},"code":["\"use strict\";","","const User = require(\"./User\");","","/**","* Represents an extended user","* @extends User","* @prop {String} email The email of the user","* @prop {Boolean} verified Whether the account email has been verified","* @prop {Boolean} mfaEnabled Whether the user has enabled two-factor authentication","*/","class ExtendedUser extends User {","    constructor(data, client) {","        super(data, client);","        this.update(data);","    }","","    update(data) {","        super.update(data);","        this.email = data.email !== undefined ? data.email : this.email;","        this.verified = data.verified !== undefined ? data.verified : this.verified;","        this.mfaEnabled = data.mfa_enabled !== undefined ? data.mfa_enabled : this.mfaEnabled;","        this.premium = data.premium !== undefined ? data.premium : this.premium;","    }","}","","module.exports = ExtendedUser;",""],"l":{"3":1,"14":0,"15":0,"19":0,"20":0,"21":0,"22":0,"23":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/GroupChannel.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/GroupChannel.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":21,"loc":{"start":{"line":21,"column":15},"end":{"line":21,"column":30}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":10},"end":{"line":30,"column":17}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":8},"end":{"line":44,"column":18}}},"4":{"name":"(anonymous_4)","line":53,"loc":{"start":{"line":53,"column":16},"end":{"line":53,"column":25}}},"5":{"name":"(anonymous_5)","line":62,"loc":{"start":{"line":62,"column":19},"end":{"line":62,"column":28}}},"6":{"name":"(anonymous_6)","line":66,"loc":{"start":{"line":66,"column":15},"end":{"line":66,"column":18}}},"7":{"name":"(anonymous_7)","line":75,"loc":{"start":{"line":75,"column":18},"end":{"line":75,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":49}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":47}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":51}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":31}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":42}},"6":{"start":{"line":22,"column":8},"end":{"line":22,"column":28}},"7":{"start":{"line":23,"column":8},"end":{"line":23,"column":47}},"8":{"start":{"line":24,"column":8},"end":{"line":26,"column":11}},"9":{"start":{"line":25,"column":12},"end":{"line":25,"column":125}},"10":{"start":{"line":27,"column":8},"end":{"line":27,"column":26}},"11":{"start":{"line":31,"column":8},"end":{"line":31,"column":68}},"12":{"start":{"line":32,"column":8},"end":{"line":32,"column":82}},"13":{"start":{"line":33,"column":8},"end":{"line":33,"column":68}},"14":{"start":{"line":45,"column":8},"end":{"line":45,"column":77}},"15":{"start":{"line":54,"column":8},"end":{"line":54,"column":82}},"16":{"start":{"line":63,"column":8},"end":{"line":63,"column":85}},"17":{"start":{"line":67,"column":8},"end":{"line":67,"column":184}},"18":{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},"19":{"start":{"line":77,"column":12},"end":{"line":77,"column":61}},"20":{"start":{"line":79,"column":8},"end":{"line":81,"column":9}},"21":{"start":{"line":80,"column":13},"end":{"line":80,"column":58}},"22":{"start":{"line":82,"column":8},"end":{"line":82,"column":118}},"23":{"start":{"line":86,"column":0},"end":{"line":86,"column":30}}},"branchMap":{"1":{"line":25,"type":"cond-expr","locations":[{"start":{"line":25,"column":58},"end":{"line":25,"column":85}},{"start":{"line":25,"column":88},"end":{"line":25,"column":123}}]},"2":{"line":31,"type":"cond-expr","locations":[{"start":{"line":31,"column":46},"end":{"line":31,"column":55}},{"start":{"line":31,"column":58},"end":{"line":31,"column":67}}]},"3":{"line":32,"type":"cond-expr","locations":[{"start":{"line":32,"column":53},"end":{"line":32,"column":66}},{"start":{"line":32,"column":69},"end":{"line":32,"column":81}}]},"4":{"line":33,"type":"cond-expr","locations":[{"start":{"line":33,"column":46},"end":{"line":33,"column":55}},{"start":{"line":33,"column":58},"end":{"line":33,"column":67}}]},"5":{"line":67,"type":"cond-expr","locations":[{"start":{"line":67,"column":27},"end":{"line":67,"column":176}},{"start":{"line":67,"column":179},"end":{"line":67,"column":183}}]},"6":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":8},"end":{"line":76,"column":8}},{"start":{"line":76,"column":8},"end":{"line":76,"column":8}}]},"7":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":11},"end":{"line":76,"column":31}},{"start":{"line":76,"column":35},"end":{"line":76,"column":89}}]},"8":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":8}},{"start":{"line":79,"column":8},"end":{"line":79,"column":8}}]},"9":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":11},"end":{"line":79,"column":29}},{"start":{"line":79,"column":33},"end":{"line":79,"column":69}}]},"10":{"line":82,"type":"cond-expr","locations":[{"start":{"line":82,"column":27},"end":{"line":82,"column":110}},{"start":{"line":82,"column":113},"end":{"line":82,"column":117}}]}},"code":["\"use strict\";","","const Collection = require(\"../util/Collection\");","const Endpoints = require(\"../rest/Endpoints\");","const PrivateChannel = require(\"./PrivateChannel\");","const User = require(\"./User\");","const Constants = require(\"../Constants\");","","/**","* Represents a group channel. See PrivateChannel docs for additional properties.","* @extends PrivateChannel","* @prop {Call?} call The current group call, if any","* @prop {Call?} lastCall The previous group call, if any","* @prop {Collection<User>} recipients The recipients in this private channel","* @prop {String} name The name of the group channel","* @prop {String?} icon The hash of the group channel icon","* @prop {String?} iconURL The URL of the group channel icon","* @prop {String} ownerID The ID of the user that is the group owner","*/","class GroupChannel extends PrivateChannel { // (╯°□°）╯︵ ┻━┻","    constructor(data, client) {","        super(data, client);","        this.recipients = new Collection(User);","        data.recipients.forEach((recipient) => {","            this.recipients.add(client.options.restMode ? new User(recipient, client) : client.users.add(recipient, client));","        });","        this.update(data);","    }","","    update(data) {","        this.name = data.name !== undefined ? data.name : this.name;","        this.ownerID = data.owner_id !== undefined ? data.owner_id : this.ownerID;","        this.icon = data.icon !== undefined ? data.icon : this.icon;","    }","","    /**","    * Edit the channel's properties","    * @arg {Object} options The properties to edit","    * @arg {String} [options.name] The name of the channel","    * @arg {String} [options.icon] The icon of the channel as a base64 data URI (group channels only). Note: base64 strings alone are not base64 data URI strings","    * @arg {String} [options.ownerID] The ID of the channel owner (group channels only)","    * @returns {Promise<GroupChannel>}","    */","    edit(options) {","        return this._client.editChannel.call(this._client, this.id, options);","    }","","    /**","    * Add a user to the group","    * @arg {String} userID The ID of the target user","    * @returns {Promise}","    */","    addRecipient(userID) {","        return this._client.addGroupRecipient.call(this._client, this.id, userID);","    }","","    /**","    * Remove a user from the group","    * @arg {String} userID The ID of the target user","    * @returns {Promise}","    */","    removeRecipient(userID) {","        return this._client.removeGroupRecipient.call(this._client, this.id, userID);","    }","","    get iconURL() {","        return this.icon ? `${Endpoints.CDN_URL}/channel-icons/${this.id}/${this.icon}.${this._client.options.defaultImageFormat}?size=${this._client.options.defaultImageSize}` : null;","    }","","    /**","    * Get the group's icon with the given format and size","    * @arg {String} [format] The filetype of the icon (\"jpg\", \"png\", \"gif\", or \"webp\")","    * @arg {Number} [size] The size of the icon (128, 256, 512, 1024, 2048)","    */","    dynamicIconURL(format, size) {","        if(format === undefined || !~Constants.ImageFormats.indexOf(format.toLowerCase())) {","            format = this._client.options.defaultImageFormat;","        }","        if(size === undefined || !~Constants.ImageSizes.indexOf(size)) {","             size = this._client.options.defaultImageSize;","        }","        return this.icon ? `${Endpoints.CDN_URL}/channel-icons/${this.id}/${this.icon}.${format}?size=${size}` : null;","     }","}","","module.exports = GroupChannel;",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"22":0,"23":0,"24":0,"25":0,"27":0,"31":0,"32":0,"33":0,"45":0,"54":0,"63":0,"67":0,"76":0,"77":0,"79":0,"80":0,"82":0,"86":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/PrivateChannel.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/PrivateChannel.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":15},"end":{"line":18,"column":30}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":8},"end":{"line":33,"column":21}}},"3":{"name":"(anonymous_3)","line":42,"loc":{"start":{"line":42,"column":12},"end":{"line":42,"column":15}}},"4":{"name":"(anonymous_4)","line":52,"loc":{"start":{"line":52,"column":9},"end":{"line":52,"column":12}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":37}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":49}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":47}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":37}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":55}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":31}},"7":{"start":{"line":19,"column":8},"end":{"line":19,"column":20}},"8":{"start":{"line":20,"column":8},"end":{"line":20,"column":30}},"9":{"start":{"line":21,"column":8},"end":{"line":21,"column":50}},"10":{"start":{"line":22,"column":8},"end":{"line":22,"column":41}},"11":{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},"12":{"start":{"line":24,"column":12},"end":{"line":24,"column":66}},"13":{"start":{"line":26,"column":8},"end":{"line":26,"column":77}},"14":{"start":{"line":34,"column":8},"end":{"line":36,"column":11}},"15":{"start":{"line":43,"column":8},"end":{"line":45,"column":11}},"16":{"start":{"line":53,"column":8},"end":{"line":53,"column":70}},"17":{"start":{"line":57,"column":0},"end":{"line":57,"column":32}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":23,"column":8}},{"start":{"line":23,"column":8},"end":{"line":23,"column":8}}]},"2":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":11},"end":{"line":23,"column":26}},{"start":{"line":23,"column":30},"end":{"line":23,"column":53}}]}},"code":["\"use strict\";","","const Channel = require(\"./Channel\");","const Collection = require(\"../util/Collection\");","const Endpoints = require(\"../rest/Endpoints\");","const Message = require(\"./Message\");","const OPCodes = require(\"../Constants\").GatewayOPCodes;","const User = require(\"./User\");","","/**","* Represents a private channel","* @extends Channel","* @prop {String} lastMessageID The ID of the last message in this channel","* @prop {User} recipient The recipient in this private channel (private channels only)","* @prop {Collection<Message>} messages Collection of Messages in this channel","*/","class PrivateChannel extends Channel {","    constructor(data, client) {","        super(data);","        this._client = client;","        this.lastMessageID = data.last_message_id;","        this.call = this.lastCall = null;","        if(this.type === 1 || this.type === undefined) {","            this.recipient = new User(data.recipients[0], client);","        }","        this.messages = new Collection(Message, client.options.messageLimit);","    }","","    /**","    * Ring fellow group channel recipient(s)","    * @arg {String[]} recipients The IDs of the recipients to ring","    */","    ring(recipients) {","        this._client.requestHandler.request(\"POST\", Endpoints.CHANNEL_CALL_RING(this.id), true, {","            recipients","        });","    }","","    /**","    * Check if the channel has an existing call","    */","    syncCall() {","        this._client.shards.values().next().value.sendWS(OPCodes.SYNC_CALL, {","            channel_id: this.id","        });","    }","","    /**","    * Leave the channel","    * @returns {Promise}","    */","    leave() {","        return this._client.deleteChannel.call(this._client, this.id);","    }","}","","module.exports = PrivateChannel;"],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"26":0,"34":0,"43":0,"53":0,"57":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Guild.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Guild.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0},"fnMap":{"1":{"name":"(anonymous_1)","line":40,"loc":{"start":{"line":40,"column":15},"end":{"line":40,"column":30}}},"2":{"name":"(anonymous_2)","line":109,"loc":{"start":{"line":109,"column":10},"end":{"line":109,"column":17}}},"3":{"name":"(anonymous_3)","line":129,"loc":{"start":{"line":129,"column":19},"end":{"line":129,"column":22}}},"4":{"name":"(anonymous_4)","line":133,"loc":{"start":{"line":133,"column":15},"end":{"line":133,"column":18}}},"5":{"name":"(anonymous_5)","line":142,"loc":{"start":{"line":142,"column":18},"end":{"line":142,"column":33}}},"6":{"name":"(anonymous_6)","line":152,"loc":{"start":{"line":152,"column":17},"end":{"line":152,"column":20}}},"7":{"name":"(anonymous_7)","line":162,"loc":{"start":{"line":162,"column":17},"end":{"line":162,"column":30}}},"8":{"name":"(anonymous_8)","line":174,"loc":{"start":{"line":174,"column":15},"end":{"line":174,"column":25}}},"9":{"name":"(anonymous_9)","line":186,"loc":{"start":{"line":186,"column":13},"end":{"line":186,"column":32}}},"10":{"name":"(anonymous_10)","line":195,"loc":{"start":{"line":195,"column":15},"end":{"line":195,"column":25}}},"11":{"name":"(anonymous_11)","line":209,"loc":{"start":{"line":209,"column":14},"end":{"line":209,"column":24}}},"12":{"name":"(anonymous_12)","line":218,"loc":{"start":{"line":218,"column":17},"end":{"line":218,"column":24}}},"13":{"name":"(anonymous_13)","line":227,"loc":{"start":{"line":227,"column":16},"end":{"line":227,"column":23}}},"14":{"name":"(anonymous_14)","line":235,"loc":{"start":{"line":235,"column":19},"end":{"line":235,"column":22}}},"15":{"name":"(anonymous_15)","line":243,"loc":{"start":{"line":243,"column":17},"end":{"line":243,"column":20}}},"16":{"name":"(anonymous_16)","line":252,"loc":{"start":{"line":252,"column":16},"end":{"line":252,"column":26}}},"17":{"name":"(anonymous_17)","line":262,"loc":{"start":{"line":262,"column":18},"end":{"line":262,"column":33}}},"18":{"name":"(anonymous_18)","line":271,"loc":{"start":{"line":271,"column":17},"end":{"line":271,"column":28}}},"19":{"name":"(anonymous_19)","line":279,"loc":{"start":{"line":279,"column":16},"end":{"line":279,"column":19}}},"20":{"name":"(anonymous_20)","line":287,"loc":{"start":{"line":287,"column":12},"end":{"line":287,"column":15}}},"21":{"name":"(anonymous_21)","line":295,"loc":{"start":{"line":295,"column":19},"end":{"line":295,"column":22}}},"22":{"name":"(anonymous_22)","line":310,"loc":{"start":{"line":310,"column":12},"end":{"line":310,"column":30}}},"23":{"name":"(anonymous_23)","line":319,"loc":{"start":{"line":319,"column":14},"end":{"line":319,"column":23}}},"24":{"name":"(anonymous_24)","line":327,"loc":{"start":{"line":327,"column":19},"end":{"line":327,"column":22}}},"25":{"name":"(anonymous_25)","line":340,"loc":{"start":{"line":340,"column":19},"end":{"line":340,"column":44}}},"26":{"name":"(anonymous_26)","line":349,"loc":{"start":{"line":349,"column":19},"end":{"line":349,"column":35}}},"27":{"name":"(anonymous_27)","line":358,"loc":{"start":{"line":358,"column":21},"end":{"line":358,"column":37}}},"28":{"name":"(anonymous_28)","line":366,"loc":{"start":{"line":366,"column":14},"end":{"line":366,"column":17}}},"29":{"name":"(anonymous_29)","line":381,"loc":{"start":{"line":381,"column":14},"end":{"line":381,"column":34}}},"30":{"name":"(anonymous_30)","line":391,"loc":{"start":{"line":391,"column":17},"end":{"line":391,"column":36}}},"31":{"name":"(anonymous_31)","line":401,"loc":{"start":{"line":401,"column":20},"end":{"line":401,"column":39}}},"32":{"name":"(anonymous_32)","line":410,"loc":{"start":{"line":410,"column":14},"end":{"line":410,"column":23}}},"33":{"name":"(anonymous_33)","line":420,"loc":{"start":{"line":420,"column":13},"end":{"line":420,"column":41}}},"34":{"name":"(anonymous_34)","line":429,"loc":{"start":{"line":429,"column":15},"end":{"line":429,"column":24}}},"35":{"name":"(anonymous_35)","line":447,"loc":{"start":{"line":447,"column":8},"end":{"line":447,"column":18}}},"36":{"name":"(anonymous_36)","line":455,"loc":{"start":{"line":455,"column":10},"end":{"line":455,"column":13}}},"37":{"name":"(anonymous_37)","line":463,"loc":{"start":{"line":463,"column":9},"end":{"line":463,"column":12}}},"38":{"name":"(anonymous_38)","line":471,"loc":{"start":{"line":471,"column":11},"end":{"line":471,"column":14}}},"39":{"name":"(anonymous_39)","line":480,"loc":{"start":{"line":480,"column":16},"end":{"line":480,"column":23}}},"40":{"name":"(anonymous_40)","line":488,"loc":{"start":{"line":488,"column":15},"end":{"line":488,"column":18}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":53}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":47}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":49}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":35}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":31}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":42}},"8":{"start":{"line":41,"column":8},"end":{"line":41,"column":23}},"9":{"start":{"line":42,"column":8},"end":{"line":42,"column":70}},"10":{"start":{"line":43,"column":8},"end":{"line":43,"column":46}},"11":{"start":{"line":44,"column":8},"end":{"line":44,"column":51}},"12":{"start":{"line":45,"column":8},"end":{"line":45,"column":53}},"13":{"start":{"line":46,"column":8},"end":{"line":46,"column":46}},"14":{"start":{"line":47,"column":8},"end":{"line":47,"column":45}},"15":{"start":{"line":48,"column":8},"end":{"line":48,"column":42}},"16":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"17":{"start":{"line":51,"column":12},"end":{"line":51,"column":39}},"18":{"start":{"line":54,"column":8},"end":{"line":61,"column":9}},"19":{"start":{"line":55,"column":12},"end":{"line":58,"column":13}},"20":{"start":{"line":56,"column":16},"end":{"line":56,"column":59}},"21":{"start":{"line":57,"column":16},"end":{"line":57,"column":61}},"22":{"start":{"line":60,"column":12},"end":{"line":60,"column":61}},"23":{"start":{"line":63,"column":8},"end":{"line":68,"column":9}},"24":{"start":{"line":64,"column":12},"end":{"line":67,"column":13}},"25":{"start":{"line":65,"column":16},"end":{"line":65,"column":43}},"26":{"start":{"line":66,"column":16},"end":{"line":66,"column":47}},"27":{"start":{"line":70,"column":8},"end":{"line":83,"column":9}},"28":{"start":{"line":71,"column":12},"end":{"line":82,"column":13}},"29":{"start":{"line":72,"column":16},"end":{"line":79,"column":17}},"30":{"start":{"line":73,"column":20},"end":{"line":73,"column":70}},"31":{"start":{"line":74,"column":20},"end":{"line":76,"column":21}},"32":{"start":{"line":75,"column":24},"end":{"line":75,"column":132}},"33":{"start":{"line":77,"column":20},"end":{"line":77,"column":168}},"34":{"start":{"line":78,"column":20},"end":{"line":78,"column":29}},"35":{"start":{"line":80,"column":16},"end":{"line":80,"column":47}},"36":{"start":{"line":81,"column":16},"end":{"line":81,"column":46}},"37":{"start":{"line":85,"column":8},"end":{"line":105,"column":9}},"38":{"start":{"line":86,"column":12},"end":{"line":104,"column":13}},"39":{"start":{"line":87,"column":16},"end":{"line":87,"column":60}},"40":{"start":{"line":89,"column":16},"end":{"line":103,"column":17}},"41":{"start":{"line":90,"column":20},"end":{"line":92,"column":21}},"42":{"start":{"line":91,"column":24},"end":{"line":91,"column":33}},"43":{"start":{"line":93,"column":20},"end":{"line":93,"column":55}},"44":{"start":{"line":94,"column":20},"end":{"line":99,"column":21}},"45":{"start":{"line":95,"column":24},"end":{"line":95,"column":115}},"46":{"start":{"line":97,"column":24},"end":{"line":97,"column":65}},"47":{"start":{"line":98,"column":24},"end":{"line":98,"column":33}},"48":{"start":{"line":100,"column":20},"end":{"line":102,"column":21}},"49":{"start":{"line":101,"column":24},"end":{"line":101,"column":113}},"50":{"start":{"line":101,"column":47},"end":{"line":101,"column":111}},"51":{"start":{"line":106,"column":8},"end":{"line":106,"column":26}},"52":{"start":{"line":110,"column":8},"end":{"line":110,"column":68}},"53":{"start":{"line":111,"column":8},"end":{"line":111,"column":122}},"54":{"start":{"line":112,"column":8},"end":{"line":112,"column":76}},"55":{"start":{"line":113,"column":8},"end":{"line":113,"column":76}},"56":{"start":{"line":114,"column":8},"end":{"line":114,"column":82}},"57":{"start":{"line":115,"column":8},"end":{"line":115,"column":68}},"58":{"start":{"line":116,"column":8},"end":{"line":116,"column":84}},"59":{"start":{"line":117,"column":8},"end":{"line":117,"column":76}},"60":{"start":{"line":118,"column":8},"end":{"line":118,"column":104}},"61":{"start":{"line":119,"column":8},"end":{"line":119,"column":94}},"62":{"start":{"line":120,"column":8},"end":{"line":120,"column":150}},"63":{"start":{"line":121,"column":8},"end":{"line":121,"column":86}},"64":{"start":{"line":122,"column":8},"end":{"line":122,"column":72}},"65":{"start":{"line":123,"column":8},"end":{"line":123,"column":102}},"66":{"start":{"line":130,"column":8},"end":{"line":130,"column":80}},"67":{"start":{"line":134,"column":8},"end":{"line":134,"column":176}},"68":{"start":{"line":143,"column":8},"end":{"line":145,"column":9}},"69":{"start":{"line":144,"column":12},"end":{"line":144,"column":61}},"70":{"start":{"line":146,"column":8},"end":{"line":148,"column":9}},"71":{"start":{"line":147,"column":13},"end":{"line":147,"column":58}},"72":{"start":{"line":149,"column":8},"end":{"line":149,"column":100}},"73":{"start":{"line":153,"column":8},"end":{"line":153,"column":88}},"74":{"start":{"line":163,"column":8},"end":{"line":163,"column":92}},"75":{"start":{"line":175,"column":8},"end":{"line":175,"column":92}},"76":{"start":{"line":187,"column":8},"end":{"line":187,"column":99}},"77":{"start":{"line":196,"column":8},"end":{"line":196,"column":92}},"78":{"start":{"line":210,"column":8},"end":{"line":210,"column":86}},"79":{"start":{"line":219,"column":8},"end":{"line":219,"column":86}},"80":{"start":{"line":228,"column":8},"end":{"line":228,"column":85}},"81":{"start":{"line":236,"column":8},"end":{"line":236,"column":87}},"82":{"start":{"line":244,"column":8},"end":{"line":244,"column":85}},"83":{"start":{"line":253,"column":8},"end":{"line":253,"column":93}},"84":{"start":{"line":263,"column":8},"end":{"line":263,"column":100}},"85":{"start":{"line":272,"column":8},"end":{"line":272,"column":95}},"86":{"start":{"line":280,"column":8},"end":{"line":280,"column":84}},"87":{"start":{"line":288,"column":8},"end":{"line":288,"column":80}},"88":{"start":{"line":296,"column":8},"end":{"line":296,"column":82}},"89":{"start":{"line":311,"column":8},"end":{"line":311,"column":92}},"90":{"start":{"line":320,"column":8},"end":{"line":320,"column":85}},"91":{"start":{"line":328,"column":8},"end":{"line":328,"column":87}},"92":{"start":{"line":341,"column":8},"end":{"line":341,"column":111}},"93":{"start":{"line":350,"column":8},"end":{"line":350,"column":102}},"94":{"start":{"line":359,"column":8},"end":{"line":359,"column":104}},"95":{"start":{"line":367,"column":8},"end":{"line":367,"column":82}},"96":{"start":{"line":382,"column":8},"end":{"line":382,"column":101}},"97":{"start":{"line":392,"column":8},"end":{"line":392,"column":103}},"98":{"start":{"line":402,"column":8},"end":{"line":402,"column":106}},"99":{"start":{"line":411,"column":8},"end":{"line":411,"column":90}},"100":{"start":{"line":421,"column":8},"end":{"line":421,"column":108}},"101":{"start":{"line":430,"column":8},"end":{"line":430,"column":91}},"102":{"start":{"line":448,"column":8},"end":{"line":448,"column":85}},"103":{"start":{"line":456,"column":8},"end":{"line":456,"column":78}},"104":{"start":{"line":464,"column":8},"end":{"line":464,"column":77}},"105":{"start":{"line":472,"column":8},"end":{"line":472,"column":79}},"106":{"start":{"line":481,"column":8},"end":{"line":481,"column":85}},"107":{"start":{"line":489,"column":8},"end":{"line":489,"column":83}},"108":{"start":{"line":493,"column":0},"end":{"line":493,"column":23}}},"branchMap":{"1":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":54,"column":8}},{"start":{"line":54,"column":8},"end":{"line":54,"column":8}}]},"2":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":8}},{"start":{"line":63,"column":8},"end":{"line":63,"column":8}}]},"3":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":8}},{"start":{"line":70,"column":8},"end":{"line":70,"column":8}}]},"4":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":16},"end":{"line":72,"column":16}},{"start":{"line":72,"column":16},"end":{"line":72,"column":16}}]},"5":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":20},"end":{"line":74,"column":20}},{"start":{"line":74,"column":20},"end":{"line":74,"column":20}}]},"6":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":8},"end":{"line":85,"column":8}},{"start":{"line":85,"column":8},"end":{"line":85,"column":8}}]},"7":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":12},"end":{"line":86,"column":12}},{"start":{"line":86,"column":12},"end":{"line":86,"column":12}}]},"8":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":20},"end":{"line":90,"column":20}},{"start":{"line":90,"column":20},"end":{"line":90,"column":20}}]},"9":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":20},"end":{"line":100,"column":20}},{"start":{"line":100,"column":20},"end":{"line":100,"column":20}}]},"10":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":23},"end":{"line":100,"column":58}},{"start":{"line":100,"column":62},"end":{"line":100,"column":94}},{"start":{"line":100,"column":98},"end":{"line":100,"column":135}}]},"11":{"line":110,"type":"cond-expr","locations":[{"start":{"line":110,"column":46},"end":{"line":110,"column":55}},{"start":{"line":110,"column":58},"end":{"line":110,"column":67}}]},"12":{"line":111,"type":"cond-expr","locations":[{"start":{"line":111,"column":73},"end":{"line":111,"column":96}},{"start":{"line":111,"column":99},"end":{"line":111,"column":121}}]},"13":{"line":112,"type":"cond-expr","locations":[{"start":{"line":112,"column":50},"end":{"line":112,"column":61}},{"start":{"line":112,"column":64},"end":{"line":112,"column":75}}]},"14":{"line":113,"type":"cond-expr","locations":[{"start":{"line":113,"column":50},"end":{"line":113,"column":61}},{"start":{"line":113,"column":64},"end":{"line":113,"column":75}}]},"15":{"line":114,"type":"cond-expr","locations":[{"start":{"line":114,"column":53},"end":{"line":114,"column":66}},{"start":{"line":114,"column":69},"end":{"line":114,"column":81}}]},"16":{"line":115,"type":"cond-expr","locations":[{"start":{"line":115,"column":46},"end":{"line":115,"column":55}},{"start":{"line":115,"column":58},"end":{"line":115,"column":67}}]},"17":{"line":116,"type":"cond-expr","locations":[{"start":{"line":116,"column":54},"end":{"line":116,"column":67}},{"start":{"line":116,"column":70},"end":{"line":116,"column":83}}]},"18":{"line":117,"type":"cond-expr","locations":[{"start":{"line":117,"column":50},"end":{"line":117,"column":61}},{"start":{"line":117,"column":64},"end":{"line":117,"column":75}}]},"19":{"line":118,"type":"cond-expr","locations":[{"start":{"line":118,"column":64},"end":{"line":118,"column":83}},{"start":{"line":118,"column":86},"end":{"line":118,"column":103}}]},"20":{"line":119,"type":"cond-expr","locations":[{"start":{"line":119,"column":59},"end":{"line":119,"column":75}},{"start":{"line":119,"column":78},"end":{"line":119,"column":93}}]},"21":{"line":120,"type":"cond-expr","locations":[{"start":{"line":120,"column":87},"end":{"line":120,"column":121}},{"start":{"line":120,"column":124},"end":{"line":120,"column":149}}]},"22":{"line":121,"type":"cond-expr","locations":[{"start":{"line":121,"column":55},"end":{"line":121,"column":69}},{"start":{"line":121,"column":72},"end":{"line":121,"column":85}}]},"23":{"line":122,"type":"cond-expr","locations":[{"start":{"line":122,"column":48},"end":{"line":122,"column":58}},{"start":{"line":122,"column":61},"end":{"line":122,"column":71}}]},"24":{"line":123,"type":"cond-expr","locations":[{"start":{"line":123,"column":63},"end":{"line":123,"column":81}},{"start":{"line":123,"column":84},"end":{"line":123,"column":101}}]},"25":{"line":134,"type":"cond-expr","locations":[{"start":{"line":134,"column":27},"end":{"line":134,"column":168}},{"start":{"line":134,"column":171},"end":{"line":134,"column":175}}]},"26":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":8},"end":{"line":143,"column":8}},{"start":{"line":143,"column":8},"end":{"line":143,"column":8}}]},"27":{"line":143,"type":"binary-expr","locations":[{"start":{"line":143,"column":11},"end":{"line":143,"column":31}},{"start":{"line":143,"column":35},"end":{"line":143,"column":89}}]},"28":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":8},"end":{"line":146,"column":8}},{"start":{"line":146,"column":8},"end":{"line":146,"column":8}}]},"29":{"line":146,"type":"binary-expr","locations":[{"start":{"line":146,"column":11},"end":{"line":146,"column":29}},{"start":{"line":146,"column":33},"end":{"line":146,"column":69}}]},"30":{"line":149,"type":"cond-expr","locations":[{"start":{"line":149,"column":27},"end":{"line":149,"column":92}},{"start":{"line":149,"column":95},"end":{"line":149,"column":99}}]},"31":{"line":153,"type":"cond-expr","locations":[{"start":{"line":153,"column":29},"end":{"line":153,"column":80}},{"start":{"line":153,"column":83},"end":{"line":153,"column":87}}]}},"code":["\"use strict\";","","const Base = require(\"./Base\");","const CDN_URL = require(\"../rest/Endpoints\").CDN_URL;","const GuildChannel = require(\"./GuildChannel\");","const Collection = require(\"../util/Collection\");","const Member = require(\"./Member\");","const Role = require(\"./Role\");","const Constants = require(\"../Constants\");","","/**","* Represents a guild","* @prop {String} id The ID of the guild","* @prop {Number} createdAt Timestamp of the guild's creation","* @prop {String} name The name of the guild","* @prop {Number} verificationLevel The guild verification level","* @prop {String} region The region of the guild","* @prop {GuildChannel} defaultChannel The default channel of the guild","* @prop {String?} icon The hash of the guild icon, or null if no icon","* @prop {String} afkChannelID The ID of the AFK voice channel","* @prop {Number} afkTimeout The AFK timeout in seconds","* @prop {Number} defaultNotifications The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\"","* @prop {Number} mfaLevel The admin 2FA level for the server. 0 is not required, 1 is required","* @prop {Number} joinedAt Timestamp of when the bot account joined the guild","* @prop {String} ownerID The ID of the user that is the guild owner","* @prop {String?} splash The hash of the guild splash image, or null if no splash (VIP only)","* @prop {Boolean} unavailable Whether the guild is unavailable or not","* @prop {Boolean} large Whether the guild is \"large\" by \"some Discord standard\"","* @prop {Number} maxPresences The maximum number of people that can be online in a guild at once (returned from REST API only)","* @prop {Collection<GuildChannel>} channels Collection of Channels in the guild","* @prop {Collection<Member>} members Collection of Members in the guild","* @prop {Number} memberCount Number of members in the guild","* @prop {Collection<Role>} roles Collection of Roles in the guild","* @prop {Shard} shard The Shard that owns the guild","* @prop {Object[]} features An array of guild feature objects","* @prop {Object[]} emojis An array of guild emoji objects","* @prop {String?} iconURL The URL of the guild's icon","*/","class Guild extends Base {","    constructor(data, client) {","        super(data.id);","        this.shard = client.shards.get(client.guildShardMap[this.id]);","        this.unavailable = !!data.unavailable;","        this.joinedAt = Date.parse(data.joined_at);","        this.channels = new Collection(GuildChannel);","        this.members = new Collection(Member);","        this.memberCount = data.member_count;","        this.roles = new Collection(Role);","","        for(var role of data.roles) {","            this.roles.add(role, this);","        }","","        if(data.channels) {","            for(var channel of data.channels) {","                channel = this.channels.add(channel, this);","                client.channelGuildMap[channel.id] = this.id;","            }","","            this.defaultChannel = this.channels.get(this.id);","        }","","        if(data.members) {","            for(var member of data.members) {","                member.id = member.user.id;","                this.members.add(member, this);","            }","        }","","        if(data.presences) {","            for(var presence of data.presences) {","                if(!this.members.get(presence.user.id)) {","                    var userData = client.users.get(presence.user.id);","                    if(userData) {","                        userData = `{username: ${userData.username}, id: ${userData.id}, discriminator: ${userData.discriminator}}`;","                    }","                    client.emit(\"debug\", `Presence without member. ${presence.user.id}. In global user cache: ${userData}. ` + JSON.stringify(presence), this.shard.id);","                    continue;","                }","                presence.id = presence.user.id;","                this.members.update(presence);","            }","        }","","        if(data.voice_states) {","            if(!client.bot) {","                this.pendingVoiceStates = data.voice_states;","            } else {","                for(var voiceState of data.voice_states) {","                    if(!this.members.get(voiceState.user_id)) {","                        continue;","                    }","                    voiceState.id = voiceState.user_id;","                    try {","                        this.channels.get(voiceState.channel_id).voiceMembers.add(this.members.update(voiceState));","                    } catch(err) {","                        client.emit(\"error\", err, this.shard.id);","                        continue;","                    }","                    if(client.options.seedVoiceConnections && voiceState.id === client.user.id && !client.voiceConnections.get(this.id)) {","                        process.nextTick(() => this.shard.client.joinVoiceChannel(voiceState.channel_id, false));","                    }","                }","            }","        }","        this.update(data);","    }","","    update(data) {","        this.name = data.name !== undefined ? data.name : this.name;","        this.verificationLevel = data.verification_level !== undefined ? data.verification_level : this.verificationLevel;","        this.splash = data.splash !== undefined ? data.splash : this.splash;","        this.region = data.region !== undefined ? data.region : this.region;","        this.ownerID = data.owner_id !== undefined ? data.owner_id : this.ownerID;","        this.icon = data.icon !== undefined ? data.icon : this.icon;","        this.features = data.features !== undefined ? data.features : this.features; // TODO parse features","        this.emojis = data.emojis !== undefined ? data.emojis : this.emojis; // TODO parse emojis","        this.afkChannelID = data.afk_channel_id !== undefined ? data.afk_channel_id : this.afkChannelID;","        this.afkTimeout = data.afk_timeout !== undefined ? data.afk_timeout : this.afkTimeout;","        this.defaultNotifications = data.default_message_notifications !== undefined ? data.default_message_notifications : this.defaultNotifications;","        this.mfaLevel = data.mfa_level !== undefined ? data.mfa_level : this.mfaLevel;","        this.large = data.large !== undefined ? data.large : this.large;","        this.maxPresences = data.max_presences !== undefined ? data.max_presences : this.maxPresences;","    }","","    /**","    * Request all guild members from Discord","    */","    fetchAllMembers() {","        this.shard.getGuildMembers(this.id, Math.ceil(this.memberCount / 1000)); // TODO Promise with chunk timeout","    }","","    get iconURL() {","        return this.icon ? `${CDN_URL}/icons/${this.id}/${this.icon}.${this.shard.client.options.defaultImageFormat}?size=${this.shard.client.options.defaultImageSize}` : null;","    }","","    /**","    * Get the guild's icon with the given format and size","    * @arg {String} [format] The filetype of the icon (\"jpg\", \"png\", \"gif\", or \"webp\")","    * @arg {Number} [size] The size of the icon (128, 256, 512, 1024, 2048)","    */","    dynamicIconURL(format, size) {","        if(format === undefined || !~Constants.ImageFormats.indexOf(format.toLowerCase())) {","            format = this._client.options.defaultImageFormat;","        }","        if(size === undefined || !~Constants.ImageSizes.indexOf(size)) {","             size = this._client.options.defaultImageSize;","        }","        return this.icon ? `${CDN_URL}/icons/${this.id}/${this.icon}.${format}?size=${size}` : null;","    }","","    get splashURL() {","        return this.splash ? `${CDN_URL}/splashes/${this.id}/${this.splash}.jpg` : null;","    }","","    /**","    * Create a channel in the guild","    * @arg {String} name The name of the channel","    * @arg {String} [type=0] The type of the channel, either 0 or 2","    * @returns {Promise<GuildChannel>}","    */","    createChannel(name, type) {","        return this.shard.client.createChannel.call(this.shard.client, this.id, name, type);","    }","","    /**","    * Create a emoji in the guild (not for bot accounts)","    * @arg {Object} options Emoji options","    * @arg {String} options.name The name of emoji","    * @arg {String} options.image The base 64 encoded string","    * @arg {Array} [options.roles] An array containing authorized role IDs","    * @returns {Promise<Object>} A guild emoji object","    */","    createEmoji(options) {","        return this.shard.client.createGuildEmoji.call(this.shard.client, this.id, options);","    }","","    /**","    * Edit a emoji in the guild (not for bot accounts)","    * @arg {String} emojiID The ID of the emoji you want to modify","    * @arg {Object} options Emoji options","    * @arg {String} [options.name] The name of emoji","    * @arg {Array} [options.roles] An array containing authorized role IDs","    * @returns {Promise<Object>} A guild emoji object","    */","    editEmoji(emojiID, options) {","        return this.shard.client.editGuildEmoji.call(this.shard.client, this.id, emojiID, options);","    }","","    /**","    * Delete a emoji in the guild (not for bot accounts)","    * @arg {String} emojiID The ID of the emoji","    * @returns {Promise}","    */","    deleteEmoji(emojiID) {","        return this.shard.client.deleteGuildEmoji.call(this.shard.client, this.id, emojiID);","    }","","    /**","    * Create a guild role","    * @arg {Object} [options] The properties to set","    * @arg {String} [options.name] The name of the role","    * @arg {Number} [options.permissions] The role permissions number","    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3d15b3 or 4040115)","    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not","    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not","    * @returns {Promise<Role>}","    */","    createRole(options) {","        return this.shard.client.createRole.call(this.shard.client, this.id, options);","    }","","    /**","    * Get the prune count for the guild","    * @arg {Number} days The number of days of inactivity to prune for","    * @returns {Promise<Number>} Resolves with the number of users that would be pruned","    */","    getPruneCount(days) {","        return this.shard.client.getPruneCount.call(this.shard.client, this.id, days);","    }","","    /**","    * Begin pruning the guild","    * @arg {Number} days The number of days of inactivity to prune for","    * @returns {Promise<Number>} Resolves with the number of pruned users","    */","    pruneMembers(days) {","        return this.shard.client.pruneMembers.call(this.shard.client, this.id, days);","    }","","    /**","    * Get a guild's channels via the REST API. REST mode is required to use this endpoint.","    * @returns {Promise<GuildChannel[]>}","    */","    getRESTChannels() {","        return this.shard.client.getRESTGuildChannels.call(this.shard.client, this.id);","    }","","    /**","    * Get a guild's emojis via the REST API. REST mode is required to use this endpoint.","    * @returns {Promise<Object[]>} An array of guild emoji objects","    */","    getRESTEmojis() {","        return this.shard.client.getRESTGuildEmojis.call(this.shard.client, this.id);","    }","","    /**","    * Get a guild emoji via the REST API. REST mode is required to use this endpoint.","    * @arg {String} emojiID The ID of the emoji","    * @returns {Promise<Object>} An emoji object","    */","    getRESTEmoji(emojiID) {","        return this.shard.client.getRESTGuildEmoji.call(this.shard.client, this.id, emojiID);","    }","","    /**","    * Get a guild's members via the REST API. REST mode is required to use this endpoint.","    * @arg {Number} [limit=1] The max number of members to get (1 to 1000)","    * @arg {String} [after] The highest user ID of the previous page","    * @returns {Promise<Member[]>}","    */","    getRESTMembers(limit, after) {","        return this.shard.client.getRESTGuildMembers.call(this.shard.client, this.id, limit, after);","    }","","    /**","    * Get a guild's members via the REST API. REST mode is required to use this endpoint.","    * @arg {String} memberID The ID of the member","    * @returns {Promise<Member>}","    */","    getRESTMember(memberID) {","        return this.shard.client.getRESTGuildMember.call(this.shard.client, this.id, memberID);","    }","","    /**","    * Get a guild's roles via the REST API. REST mode is required to use this endpoint.","    * @returns {Promise<Role[]>}","    */","    getRESTRoles() {","        return this.shard.client.getRESTGuildRoles.call(this.shard.client, this.id);","    }","","    /**","    * Get a guild's embed object","    * @returns {Promise<Object>} A guild embed object","    */","    getEmbed() {","        return this.shard.client.getGuildEmbed.call(this.shard.client, this.id);","    }","","    /**","    * Get possible voice reigons for a guild","    * @returns {Promise<Object[]>} Resolves with an array of voice region objects","    */","    getVoiceRegions() {","        return this.shard.client.getVoiceRegions.call(this.shard.client, this.id);","    }","","    /**","    * Edit the guild role","    * @arg {String} roleID The ID of the role","    * @arg {Object} options The properties to edit","    * @arg {String} [options.name] The name of the role","    * @arg {Number} [options.permissions] The role permissions number","    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)","    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not","    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not","    * @returns {Promise<Role>}","    */","    editRole(roleID, options) {","        return this.shard.client.editRole.call(this.shard.client, this.id, roleID, options);","    }","","    /**","    * Delete a role","    * @arg {String} roleID The ID of the role","    * @returns {Promise}","    */","    deleteRole(roleID) {","        return this.shard.client.deleteRole.call(this.shard.client, this.id, roleID);","    }","","    /**","    * Get a list of integrations for the guild","    * @returns {Promise<GuildIntegration[]>}","    */","    getIntegrations() {","        return this.shard.client.getGuildIntegrations.call(this.shard.client, this.id);","    }","","    /**","    * Edit a guild integration","    * @arg {String} integrationID The ID of the integration","    * @arg {Object} options The properties to edit","    * @arg {String} [options.expireBehavior] What to do when a user's subscription runs out","    * @arg {String} [options.expireGracePeriod] How long before the integration's role is removed from an unsubscribed user","    * @arg {String} [options.enableEmoticons] Whether to enable integration emoticons or not","    * @returns {Promise}","    */","    editIntegration(integrationID, options) {","        return this.shard.client.editGuildIntegration.call(this.shard.client, this.id, integrationID, options);","    }","","    /**","    * Force a guild integration to sync","    * @arg {String} integrationID The ID of the integration","    * @returns {Promise}","    */","    syncIntegration(integrationID) {","        return this.shard.client.syncGuildIntegration.call(this.shard.client, this.id, integrationID);","    }","","    /**","    * Delete a guild integration","    * @arg {String} integrationID The ID of the integration","    * @returns {Promise}","    */","    deleteIntegration(integrationID) {","        return this.shard.client.deleteGuildIntegration.call(this.shard.client, this.id, integrationID);","    }","","    /**","    * Get all invites in the guild","    * @returns {Promise<Invite[]>}","    */","    getInvites() {","        return this.shard.client.getGuildInvites.call(this.shard.client, this.id);","    }","","    /**","    * Edit a guild member","    * @arg {String} memberID The ID of the member","    * @arg {Object} options The properties to edit","    * @arg {String[]} [options.roles] The array of role IDs the member should have","    * @arg {String} [options.nick] Set the member's server nickname, \"\" to remove","    * @arg {Boolean} [options.mute] Server mute the member","    * @arg {Boolean} [options.deaf] Server deafen the member","    * @arg {String} [options.channelID] The ID of the voice channel to move the member to (must be in voice)","    * @returns {Promise}","    */","    editMember(memberID, options) {","        return this.shard.client.editGuildMember.call(this.shard.client, this.id, memberID, options);","    }","","    /**","    * Add a role to a guild member","    * @arg {String} memberID The ID of the member","    * @arg {String} roleID The ID of the role","    * @returns {Promise}","    */","    addMemberRole(memberID, roleID) {","        return this.shard.client.addGuildMemberRole.call(this.shard.client, this.id, memberID, roleID);","    }","","    /**","    * Remve a role from a guild member","    * @arg {String} memberID The ID of the member","    * @arg {String} roleID The ID of the role","    * @returns {Promise}","    */","    removeMemberRole(memberID, roleID) {","        return this.shard.client.removeGuildMemberRole.call(this.shard.client, this.id, memberID, roleID);","    }","","    /**","    * Kick a member from the guild","    * @arg {String} userID The ID of the member","    * @returns {Promise}","    */","    kickMember(userID) {","        return this.shard.client.kickGuildMember.call(this.shard.client, this.id, userID);","    }","","    /**","    * Ban a user from the guild","    * @arg {String} userID The ID of the member","    * @arg {Number} [deleteMessageDays=0] Number of days to delete messages for","    * @returns {Promise}","    */","    banMember(userID, deleteMessageDays) {","        return this.shard.client.banGuildMember.call(this.shard.client, this.id, userID, deleteMessageDays);","    }","","    /**","    * Unban a user from the guild","    * @arg {String} userID The ID of the member","    * @returns {Promise}","    */","    unbanMember(userID) {","        return this.shard.client.unbanGuildMember.call(this.shard.client, this.id, userID);","    }","","    /**","    * Edit the guild","    * @arg {Object} options The properties to edit","    * @arg {String} [options.name] The ID of the guild","    * @arg {String} [options.region] The region of the guild","    * @arg {String} [options.icon] The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings","    * @arg {Number} [options.verificationLevel] The guild verification level","    * @arg {Number} [options.defaultNotifications] The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".","    * @arg {String} [options.afkChannelID] The ID of the AFK voice channel","    * @arg {Number} [options.afkTimeout] The AFK timeout in seconds","    * @arg {String} [options.ownerID] The ID of the member to transfer server ownership to (bot user must be owner)","    * @arg {String} [options.splash] The guild splash image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings","    * @returns {Promise<Guild>}","    */","    edit(options) {","        return this.shard.client.editGuild.call(this.shard.client, this.id, options);","    }","","    /**","    * Delete the guild (bot user must be owner)","    * @returns {Promise}","    */","    delete() {","        return this.shard.client.deleteGuild.call(this.shard.client, this.id);","    }","","    /**","    * Leave the guild","    * @returns {Promise}","    */","    leave() {","        return this.shard.client.leaveGuild.call(this.shard.client, this.id);","    }","","    /**","    * Get the ban list of the guild","    * @returns {Promise<User[]>}","    */","    getBans() {","        return this.shard.client.getGuildBans.call(this.shard.client, this.id);","    }","","    /**","    * Edit the bot's nickname in the guild","    * @arg {String} nick The nickname","    * @returns {Promise}","    */","    editNickname(nick) {","        return this.shard.client.editNickname.call(this.shard.client, this.id, nick);","    }","","    /**","    * Get all the webhooks in the guild","    * @returns {Promise<Object[]>} Resolves with an array of webhook objects","    */","    getWebhooks() {","        return this.shard.client.getGuildWebhooks.call(this.shard.client, this.id);","    }","}","","module.exports = Guild;",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"50":0,"51":0,"54":0,"55":0,"56":0,"57":0,"60":0,"63":0,"64":0,"65":0,"66":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"77":0,"78":0,"80":0,"81":0,"85":0,"86":0,"87":0,"89":0,"90":0,"91":0,"93":0,"94":0,"95":0,"97":0,"98":0,"100":0,"101":0,"106":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"130":0,"134":0,"143":0,"144":0,"146":0,"147":0,"149":0,"153":0,"163":0,"175":0,"187":0,"196":0,"210":0,"219":0,"228":0,"236":0,"244":0,"253":0,"263":0,"272":0,"280":0,"288":0,"296":0,"311":0,"320":0,"328":0,"341":0,"350":0,"359":0,"367":0,"382":0,"392":0,"402":0,"411":0,"421":0,"430":0,"448":0,"456":0,"464":0,"472":0,"481":0,"489":0,"493":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Role.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Role.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":22,"loc":{"start":{"line":22,"column":15},"end":{"line":22,"column":29}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":10},"end":{"line":28,"column":17}}},"3":{"name":"(anonymous_3)","line":42,"loc":{"start":{"line":42,"column":12},"end":{"line":42,"column":15}}},"4":{"name":"(anonymous_4)","line":46,"loc":{"start":{"line":46,"column":15},"end":{"line":46,"column":18}}},"5":{"name":"(anonymous_5)","line":60,"loc":{"start":{"line":60,"column":8},"end":{"line":60,"column":18}}},"6":{"name":"(anonymous_6)","line":69,"loc":{"start":{"line":69,"column":16},"end":{"line":69,"column":27}}},"7":{"name":"(anonymous_7)","line":77,"loc":{"start":{"line":77,"column":10},"end":{"line":77,"column":13}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":43}},"3":{"start":{"line":23,"column":8},"end":{"line":23,"column":23}},"4":{"start":{"line":24,"column":8},"end":{"line":24,"column":27}},"5":{"start":{"line":25,"column":8},"end":{"line":25,"column":26}},"6":{"start":{"line":29,"column":8},"end":{"line":29,"column":68}},"7":{"start":{"line":30,"column":8},"end":{"line":30,"column":96}},"8":{"start":{"line":31,"column":8},"end":{"line":31,"column":80}},"9":{"start":{"line":32,"column":8},"end":{"line":32,"column":72}},"10":{"start":{"line":33,"column":8},"end":{"line":33,"column":72}},"11":{"start":{"line":34,"column":8},"end":{"line":34,"column":84}},"12":{"start":{"line":35,"column":8},"end":{"line":35,"column":112}},"13":{"start":{"line":43,"column":8},"end":{"line":43,"column":37}},"14":{"start":{"line":47,"column":8},"end":{"line":47,"column":32}},"15":{"start":{"line":61,"column":8},"end":{"line":61,"column":111}},"16":{"start":{"line":70,"column":8},"end":{"line":70,"column":120}},"17":{"start":{"line":78,"column":8},"end":{"line":78,"column":104}},"18":{"start":{"line":82,"column":0},"end":{"line":82,"column":22}}},"branchMap":{"1":{"line":29,"type":"cond-expr","locations":[{"start":{"line":29,"column":46},"end":{"line":29,"column":55}},{"start":{"line":29,"column":58},"end":{"line":29,"column":67}}]},"2":{"line":30,"type":"cond-expr","locations":[{"start":{"line":30,"column":60},"end":{"line":30,"column":76}},{"start":{"line":30,"column":79},"end":{"line":30,"column":95}}]},"3":{"line":31,"type":"cond-expr","locations":[{"start":{"line":31,"column":52},"end":{"line":31,"column":64}},{"start":{"line":31,"column":67},"end":{"line":31,"column":79}}]},"4":{"line":32,"type":"cond-expr","locations":[{"start":{"line":32,"column":48},"end":{"line":32,"column":58}},{"start":{"line":32,"column":61},"end":{"line":32,"column":71}}]},"5":{"line":33,"type":"cond-expr","locations":[{"start":{"line":33,"column":48},"end":{"line":33,"column":58}},{"start":{"line":33,"column":61},"end":{"line":33,"column":71}}]},"6":{"line":34,"type":"cond-expr","locations":[{"start":{"line":34,"column":54},"end":{"line":34,"column":67}},{"start":{"line":34,"column":70},"end":{"line":34,"column":83}}]},"7":{"line":35,"type":"cond-expr","locations":[{"start":{"line":35,"column":60},"end":{"line":35,"column":92}},{"start":{"line":35,"column":95},"end":{"line":35,"column":111}}]}},"code":["\"use strict\";","","const Base = require(\"./Base\");","const Permission = require(\"./Permission\");","","/**","* Represents a role","* @prop {String} id The ID of the role","* @prop {Number} createdAt Timestamp of the role's creation","* @prop {Guild} guild The guild that owns the role","* @prop {String} mention A string that mentions the role","* @prop {Number} createdAt Timestamp of role creation","* @prop {String} name The name of the role","* @prop {Boolean} mentionable Whether the role is mentionable or not","* @prop {Boolean} managed Whether a guild integration manages this role or not","* @prop {Boolean} hoist Whether users with this role are hoisted in the user list or not","* @prop {Number} color The hex color of the role in base 10","* @prop {Number} position The position of the role","* @prop {Permission} permissions The permissions representation of the role","*/","class Role extends Base {","    constructor(data, guild) {","        super(data.id);","        this.guild = guild;","        this.update(data);","    }","","    update(data) {","        this.name = data.name !== undefined ? data.name : this.name;","        this.mentionable = data.mentionable !== undefined ? data.mentionable : this.mentionable;","        this.managed = data.managed !== undefined ? data.managed : this.managed;","        this.hoist = data.hoist !== undefined ? data.hoist : this.hoist;","        this.color = data.color !== undefined ? data.color : this.color;","        this.position = data.position !== undefined ? data.position : this.position;","        this.permissions = data.permissions !== undefined ? new Permission(data.permissions) : this.permissions;","    }","","    /**","    * Generates a JSON representation of the role permissions","    * @returns {Object}","    */","    get json() {","        return this.permissions.json;","    }","","    get mention() {","        return `<@&${this.id}>`;","    }","","    /**","    * Edit the guild role","    * @arg {Object} options The properties to edit","    * @arg {String} [options.name] The name of the role","    * @arg {Number} [options.permissions] The role permissions number","    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)","    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not","    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not","    * @returns {Promise<Role>}","    */","    edit(options) {","        return this.guild.shard.client.editRole.call(this.guild.shard.client, this.guild.id, this.id, options);","    }","","    /**","    * Edit the role's position. Note that role position numbers are highest on top and lowest at the bottom.","    * @arg {Number} position The new position of the role","    * @returns {Promise}","    */","    editPosition(position) {","        return this.guild.shard.client.editRolePosition.call(this.guild.shard.client, this.guild.id, this.id, position);","    }","","    /**","    * Delete the role","    * @returns {Promise}","    */","    delete() {","        return this.guild.shard.client.deleteRole.call(this.guild.shard.client, this.guild.id, this.id);","    }","}","","module.exports = Role;",""],"l":{"3":1,"4":1,"23":0,"24":0,"25":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"43":0,"47":0,"61":0,"70":0,"78":0,"82":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/GuildIntegration.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/GuildIntegration.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":15},"end":{"line":25,"column":29}}},"2":{"name":"(anonymous_2)","line":36,"loc":{"start":{"line":36,"column":10},"end":{"line":36,"column":17}}},"3":{"name":"(anonymous_3)","line":54,"loc":{"start":{"line":54,"column":8},"end":{"line":54,"column":18}}},"4":{"name":"(anonymous_4)","line":62,"loc":{"start":{"line":62,"column":10},"end":{"line":62,"column":13}}},"5":{"name":"(anonymous_5)","line":70,"loc":{"start":{"line":70,"column":8},"end":{"line":70,"column":11}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":26,"column":8},"end":{"line":26,"column":23}},"3":{"start":{"line":27,"column":8},"end":{"line":27,"column":27}},"4":{"start":{"line":28,"column":8},"end":{"line":28,"column":30}},"5":{"start":{"line":29,"column":8},"end":{"line":29,"column":30}},"6":{"start":{"line":30,"column":8},"end":{"line":30,"column":35}},"7":{"start":{"line":31,"column":8},"end":{"line":31,"column":80}},"8":{"start":{"line":32,"column":8},"end":{"line":32,"column":36}},"9":{"start":{"line":33,"column":8},"end":{"line":33,"column":26}},"10":{"start":{"line":37,"column":8},"end":{"line":37,"column":36}},"11":{"start":{"line":38,"column":8},"end":{"line":38,"column":36}},"12":{"start":{"line":39,"column":8},"end":{"line":39,"column":51}},"13":{"start":{"line":40,"column":8},"end":{"line":40,"column":58}},"14":{"start":{"line":41,"column":8},"end":{"line":41,"column":53}},"15":{"start":{"line":42,"column":8},"end":{"line":42,"column":53}},"16":{"start":{"line":43,"column":8},"end":{"line":43,"column":39}},"17":{"start":{"line":55,"column":8},"end":{"line":55,"column":123}},"18":{"start":{"line":63,"column":8},"end":{"line":63,"column":116}},"19":{"start":{"line":71,"column":8},"end":{"line":71,"column":114}},"20":{"start":{"line":75,"column":0},"end":{"line":75,"column":34}}},"branchMap":{},"code":["\"use strict\";","","const Base = require(\"./Base\");","","/**","* Represents a guild integration","* @prop {String} id The ID of the integration","* @prop {Number} createdAt Timestamp of the guild integration's creation","* @prop {String} name The name of the integration","* @prop {String} type The type of the integration","* @prop {String} roleID The ID of the role connected to the integration","* @prop {User} user The user connected to the integration","* @prop {Object} account Info on the integration account","* @prop {String} account.id The ID of the integration account","* @prop {String} account.name The name of the integration account","* @prop {Boolean} enabled Whether the integration is enabled or not","* @prop {Boolean} syncing Whether the integration is syncing or not","* @prop {Number} expireBehavior behavior of expired subscriptions","* @prop {Number} expireGracePeriod grace period for expired subscriptions","* @prop {Boolean} enableEmoticons Whether integration emoticons are enabled or not","* @prop {Number} subscriberCount number of subscribers","* @prop {Number} syncedAt Unix timestamp of last integration sync","*/","class GuildIntegration extends Base {","    constructor(data, guild) {","        super(data.id);","        this.guild = guild;","        this.name = data.name;","        this.type = data.type;","        this.roleID = data.role_id;","        this.user = guild.shard.client.users.add(data.user, guild.shard.client);","        this.account = data.account; // not worth making a class for","        this.update(data);","    }","","    update(data) {","        this.enabled = data.enabled;","        this.syncing = data.syncing;","        this.expireBehavior = data.expire_behavior;","        this.expireGracePeriod = data.expire_grace_period;","        this.enableEmoticons = data.enable_emoticons;","        this.subscriberCount = data.subscriber_count;","        this.syncedAt = data.synced_at;","    }","","    /**","    * Edit the guild integration","    * @arg {Object} options The properties to edit","    * @arg {String} [options.expireBehavior] What to do when a user's subscription runs out","    * @arg {String} [options.expireGracePeriod] How long before the integration's role is removed from an unsubscribed user","    * @arg {String} [options.enableEmoticons] Whether to enable integration emoticons or not","    * @returns {Promise}","    */","    edit(options) {","        return this.guild.shard.client.editGuildIntegration.call(this.guild.shard.client, this.guild.id, this.id, options);","    }","","    /**","    * Delete the guild integration","    * @returns {Promise}","    */","    delete() {","        return this.guild.shard.client.deleteGuildIntegration.call(this.guild.shard.client, this.guild.id, this.id);","    }","","    /**","    * Force the guild integration to sync","    * @returns {Promise}","    */","    sync() {","        return this.guild.shard.client.syncGuildIntegration.call(this.guild.shard.client, this.guild.id, this.id);","    }","}","","module.exports = GuildIntegration;"],"l":{"3":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"55":0,"63":0,"71":0,"75":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Invite.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Invite.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":15},"end":{"line":25,"column":30}}},"2":{"name":"(anonymous_2)","line":47,"loc":{"start":{"line":47,"column":17},"end":{"line":47,"column":20}}},"3":{"name":"(anonymous_3)","line":55,"loc":{"start":{"line":55,"column":10},"end":{"line":55,"column":13}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":26,"column":8},"end":{"line":26,"column":16}},"3":{"start":{"line":27,"column":8},"end":{"line":27,"column":30}},"4":{"start":{"line":28,"column":8},"end":{"line":28,"column":30}},"5":{"start":{"line":29,"column":8},"end":{"line":29,"column":36}},"6":{"start":{"line":30,"column":8},"end":{"line":35,"column":10}},"7":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"8":{"start":{"line":37,"column":12},"end":{"line":37,"column":66}},"9":{"start":{"line":39,"column":8},"end":{"line":39,"column":63}},"10":{"start":{"line":40,"column":8},"end":{"line":40,"column":74}},"11":{"start":{"line":41,"column":8},"end":{"line":41,"column":71}},"12":{"start":{"line":42,"column":8},"end":{"line":42,"column":78}},"13":{"start":{"line":43,"column":8},"end":{"line":43,"column":81}},"14":{"start":{"line":44,"column":8},"end":{"line":44,"column":72}},"15":{"start":{"line":48,"column":8},"end":{"line":48,"column":31}},"16":{"start":{"line":56,"column":8},"end":{"line":56,"column":71}},"17":{"start":{"line":60,"column":0},"end":{"line":60,"column":24}}},"branchMap":{"1":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":36,"column":8}},{"start":{"line":36,"column":8},"end":{"line":36,"column":8}}]},"2":{"line":39,"type":"cond-expr","locations":[{"start":{"line":39,"column":46},"end":{"line":39,"column":55}},{"start":{"line":39,"column":58},"end":{"line":39,"column":62}}]},"3":{"line":40,"type":"cond-expr","locations":[{"start":{"line":40,"column":53},"end":{"line":40,"column":66}},{"start":{"line":40,"column":69},"end":{"line":40,"column":73}}]},"4":{"line":41,"type":"cond-expr","locations":[{"start":{"line":41,"column":51},"end":{"line":41,"column":63}},{"start":{"line":41,"column":66},"end":{"line":41,"column":70}}]},"5":{"line":42,"type":"cond-expr","locations":[{"start":{"line":42,"column":56},"end":{"line":42,"column":70}},{"start":{"line":42,"column":73},"end":{"line":42,"column":77}}]},"6":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":58},"end":{"line":43,"column":73}},{"start":{"line":43,"column":76},"end":{"line":43,"column":80}}]},"7":{"line":44,"type":"cond-expr","locations":[{"start":{"line":44,"column":52},"end":{"line":44,"column":64}},{"start":{"line":44,"column":67},"end":{"line":44,"column":71}}]}},"code":["\"use strict\";","","const Base = require(\"./Base\");","","/**","* Represents an invite. The nullable properties will be null if the bot user does not have manage channel or manage server permissions for the invite's channel/server.","* @prop {String} code The invite code","* @prop {Object} channel Info on the invite channel","* @prop {String} channel.id The ID of the invite's channel","* @prop {String} channel.name The name of the invite's channel","* @prop {Object} guild Info on the invite guild","* @prop {String} guild.id The ID of the invite's guild","* @prop {String} guild.name The name of the invite's guild","* @prop {String?} guild.splash The hash of the invite splash screen","* @prop {String?} guild.icon The hash of the guild icon","* @prop {User?} inviter The invite creator","* @prop {Number?} uses The number of invite uses","* @prop {Number?} maxUses The max number of invite uses","* @prop {Number?} maxAge How long the invite lasts in seconds","* @prop {Boolean?} temporary Whether the invite is temporary or not","* @prop {Number?} createdAt Timestamp of invite creation","* @prop {Boolean?} revoked Whether the invite was revoked or not","*/","class Invite extends Base {","    constructor(data, client) {","        super();","        this._client = client;","        this.code = data.code;","        this.channel = data.channel;","        this.guild = {","            splash: data.guild.splash,","            icon: data.guild.icon,","            id: data.guild.id,","            name: data.guild.name","        };","        if(data.inviter) {","            this.inviter = client.users.add(data.inviter, client);","        }","        this.uses = data.uses !== undefined ? data.uses : null;","        this.maxUses = data.max_uses !== undefined ? data.max_uses : null;","        this.maxAge = data.max_age !== undefined ? data.max_age : null;","        this.temporary = data.temporary !== undefined ? data.temporary : null;","        this._createdAt = data.created_at !== undefined ? data.created_at : null;","        this.revoked = data.revoked !== undefined ? data.revoked : null;","    }","","    get createdAt() {","        return this._createdAt;","    }","","    /**","    * Delete the invite","    * @returns {Promise}","    */","    delete() {","        return this._client.deleteInvite.call(this._client, this.code);","    }","}","","module.exports = Invite;"],"l":{"3":1,"26":0,"27":0,"28":0,"29":0,"30":0,"36":0,"37":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"48":0,"56":0,"60":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Relationship.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/Relationship.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":15},"end":{"line":17,"column":30}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":10},"end":{"line":23,"column":17}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"3":{"start":{"line":19,"column":8},"end":{"line":19,"column":56}},"4":{"start":{"line":20,"column":8},"end":{"line":20,"column":26}},"5":{"start":{"line":24,"column":8},"end":{"line":24,"column":73}},"6":{"start":{"line":25,"column":8},"end":{"line":25,"column":89}},"7":{"start":{"line":26,"column":8},"end":{"line":26,"column":76}},"8":{"start":{"line":30,"column":0},"end":{"line":30,"column":30}}},"branchMap":{"1":{"line":24,"type":"cond-expr","locations":[{"start":{"line":24,"column":46},"end":{"line":24,"column":55}},{"start":{"line":24,"column":58},"end":{"line":24,"column":72}}]},"2":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":58},"end":{"line":24,"column":67}},{"start":{"line":24,"column":71},"end":{"line":24,"column":72}}]},"3":{"line":25,"type":"cond-expr","locations":[{"start":{"line":25,"column":50},"end":{"line":25,"column":61}},{"start":{"line":25,"column":64},"end":{"line":25,"column":88}}]},"4":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":64},"end":{"line":25,"column":75}},{"start":{"line":25,"column":79},"end":{"line":25,"column":88}}]},"5":{"line":26,"type":"cond-expr","locations":[{"start":{"line":26,"column":46},"end":{"line":26,"column":55}},{"start":{"line":26,"column":58},"end":{"line":26,"column":75}}]},"6":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":58},"end":{"line":26,"column":67}},{"start":{"line":26,"column":71},"end":{"line":26,"column":75}}]}},"code":["\"use strict\";","","const Base = require(\"./Base\");","","/**","* Represents a Relationship","* @prop {User} user The other user in the relationship","* @prop {Number} type The type of relationship. 1 is friend, 2 is block, 3 is incoming request, 4 is outgoing request","* @prop {String} status The other user's status. Either \"online\", \"idle\", or \"offline\"","* @prop {Object?} game The active game the other user is playing","* @prop {String} game.name The name of the active game","* @prop {Number} game.type The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)","* @prop {String?} game.url The url of the active game","*/","","class Relationship extends Base {","    constructor(data, client) {","        super(data.id);","        this.user = client.users.add(data.user, client);","        this.update(data);","    }","","    update(data) {","        this.type = data.type !== undefined ? data.type : this.type || 0;","        this.status = data.status !== undefined ? data.status : this.status || \"offline\";","        this.game = data.game !== undefined ? data.game : this.game || null;","    }","}","","module.exports = Relationship;",""],"l":{"3":1,"18":0,"19":0,"20":0,"24":0,"25":0,"26":0,"30":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/rest/RequestHandler.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/rest/RequestHandler.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":15},"end":{"line":12,"column":39}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":17},"end":{"line":32,"column":20}}},"3":{"name":"(anonymous_3)","line":39,"loc":{"start":{"line":39,"column":11},"end":{"line":39,"column":17}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":61},"end":{"line":40,"column":80}}},"5":{"name":"(anonymous_5)","line":56,"loc":{"start":{"line":56,"column":11},"end":{"line":56,"column":58}}},"6":{"name":"(anonymous_6)","line":83,"loc":{"start":{"line":83,"column":54},"end":{"line":83,"column":68}}},"7":{"name":"(anonymous_7)","line":86,"loc":{"start":{"line":86,"column":58},"end":{"line":86,"column":72}}},"8":{"name":"(anonymous_8)","line":221,"loc":{"start":{"line":221,"column":38},"end":{"line":221,"column":49}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":31}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":55}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":61}},"5":{"start":{"line":13,"column":8},"end":{"line":13,"column":30}},"6":{"start":{"line":14,"column":8},"end":{"line":14,"column":42}},"7":{"start":{"line":15,"column":8},"end":{"line":15,"column":118}},"8":{"start":{"line":16,"column":8},"end":{"line":16,"column":29}},"9":{"start":{"line":17,"column":8},"end":{"line":23,"column":10}},"10":{"start":{"line":24,"column":8},"end":{"line":24,"column":33}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":29}},"12":{"start":{"line":26,"column":8},"end":{"line":29,"column":9}},"13":{"start":{"line":27,"column":12},"end":{"line":27,"column":36}},"14":{"start":{"line":28,"column":12},"end":{"line":28,"column":75}},"15":{"start":{"line":28,"column":53},"end":{"line":28,"column":73}},"16":{"start":{"line":33,"column":8},"end":{"line":33,"column":33}},"17":{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},"18":{"start":{"line":35,"column":12},"end":{"line":35,"column":38}},"19":{"start":{"line":40,"column":8},"end":{"line":42,"column":57}},"20":{"start":{"line":41,"column":12},"end":{"line":41,"column":76}},"21":{"start":{"line":57,"column":8},"end":{"line":57,"column":48}},"22":{"start":{"line":59,"column":8},"end":{"line":242,"column":11}},"23":{"start":{"line":60,"column":12},"end":{"line":60,"column":29}},"24":{"start":{"line":62,"column":12},"end":{"line":227,"column":14}},"25":{"start":{"line":63,"column":16},"end":{"line":65,"column":18}},"26":{"start":{"line":66,"column":16},"end":{"line":66,"column":25}},"27":{"start":{"line":68,"column":16},"end":{"line":104,"column":17}},"28":{"start":{"line":69,"column":20},"end":{"line":71,"column":21}},"29":{"start":{"line":70,"column":24},"end":{"line":70,"column":67}},"30":{"start":{"line":72,"column":20},"end":{"line":99,"column":21}},"31":{"start":{"line":73,"column":24},"end":{"line":73,"column":51}},"32":{"start":{"line":74,"column":24},"end":{"line":74,"column":99}},"33":{"start":{"line":75,"column":24},"end":{"line":75,"column":66}},"34":{"start":{"line":76,"column":24},"end":{"line":78,"column":25}},"35":{"start":{"line":77,"column":28},"end":{"line":77,"column":62}},"36":{"start":{"line":79,"column":24},"end":{"line":79,"column":45}},"37":{"start":{"line":80,"column":27},"end":{"line":99,"column":21}},"38":{"start":{"line":81,"column":24},"end":{"line":98,"column":25}},"39":{"start":{"line":82,"column":28},"end":{"line":82,"column":40}},"40":{"start":{"line":83,"column":28},"end":{"line":93,"column":31}},"41":{"start":{"line":84,"column":32},"end":{"line":92,"column":33}},"42":{"start":{"line":85,"column":37},"end":{"line":91,"column":37}},"43":{"start":{"line":86,"column":40},"end":{"line":88,"column":43}},"44":{"start":{"line":87,"column":44},"end":{"line":87,"column":107}},"45":{"start":{"line":90,"column":40},"end":{"line":90,"column":109}},"46":{"start":{"line":94,"column":28},"end":{"line":94,"column":57}},"47":{"start":{"line":96,"column":28},"end":{"line":96,"column":56}},"48":{"start":{"line":97,"column":28},"end":{"line":97,"column":73}},"49":{"start":{"line":101,"column":20},"end":{"line":101,"column":25}},"50":{"start":{"line":102,"column":20},"end":{"line":102,"column":32}},"51":{"start":{"line":103,"column":20},"end":{"line":103,"column":27}},"52":{"start":{"line":106,"column":16},"end":{"line":111,"column":19}},"53":{"start":{"line":113,"column":16},"end":{"line":113,"column":29}},"54":{"start":{"line":115,"column":16},"end":{"line":120,"column":19}},"55":{"start":{"line":116,"column":20},"end":{"line":116,"column":25}},"56":{"start":{"line":117,"column":20},"end":{"line":117,"column":102}},"57":{"start":{"line":118,"column":20},"end":{"line":118,"column":39}},"58":{"start":{"line":119,"column":20},"end":{"line":119,"column":37}},"59":{"start":{"line":122,"column":16},"end":{"line":127,"column":19}},"60":{"start":{"line":123,"column":20},"end":{"line":123,"column":25}},"61":{"start":{"line":124,"column":20},"end":{"line":124,"column":102}},"62":{"start":{"line":125,"column":20},"end":{"line":125,"column":39}},"63":{"start":{"line":126,"column":20},"end":{"line":126,"column":37}},"64":{"start":{"line":129,"column":16},"end":{"line":132,"column":19}},"65":{"start":{"line":130,"column":20},"end":{"line":130,"column":35}},"66":{"start":{"line":131,"column":20},"end":{"line":131,"column":32}},"67":{"start":{"line":134,"column":16},"end":{"line":134,"column":41}},"68":{"start":{"line":136,"column":16},"end":{"line":219,"column":19}},"69":{"start":{"line":137,"column":20},"end":{"line":137,"column":51}},"70":{"start":{"line":138,"column":20},"end":{"line":138,"column":106}},"71":{"start":{"line":139,"column":20},"end":{"line":139,"column":108}},"72":{"start":{"line":141,"column":20},"end":{"line":141,"column":38}},"73":{"start":{"line":143,"column":20},"end":{"line":145,"column":23}},"74":{"start":{"line":144,"column":24},"end":{"line":144,"column":42}},"75":{"start":{"line":147,"column":20},"end":{"line":218,"column":23}},"76":{"start":{"line":148,"column":24},"end":{"line":148,"column":45}},"77":{"start":{"line":149,"column":24},"end":{"line":155,"column":25}},"78":{"start":{"line":150,"column":28},"end":{"line":150,"column":124}},"79":{"start":{"line":151,"column":28},"end":{"line":153,"column":29}},"80":{"start":{"line":152,"column":32},"end":{"line":152,"column":196}},"81":{"start":{"line":154,"column":28},"end":{"line":154,"column":68}},"82":{"start":{"line":157,"column":24},"end":{"line":159,"column":25}},"83":{"start":{"line":158,"column":28},"end":{"line":158,"column":94}},"84":{"start":{"line":161,"column":24},"end":{"line":161,"column":161}},"85":{"start":{"line":163,"column":24},"end":{"line":172,"column":25}},"86":{"start":{"line":164,"column":28},"end":{"line":169,"column":29}},"87":{"start":{"line":165,"column":32},"end":{"line":165,"column":56}},"88":{"start":{"line":166,"column":32},"end":{"line":166,"column":106}},"89":{"start":{"line":166,"column":49},"end":{"line":166,"column":69}},"90":{"start":{"line":168,"column":32},"end":{"line":168,"column":105}},"91":{"start":{"line":170,"column":31},"end":{"line":172,"column":25}},"92":{"start":{"line":171,"column":28},"end":{"line":171,"column":188}},"93":{"start":{"line":174,"column":24},"end":{"line":176,"column":25}},"94":{"start":{"line":175,"column":28},"end":{"line":175,"column":328}},"95":{"start":{"line":178,"column":24},"end":{"line":204,"column":25}},"96":{"start":{"line":179,"column":28},"end":{"line":197,"column":29}},"97":{"start":{"line":180,"column":32},"end":{"line":180,"column":426}},"98":{"start":{"line":181,"column":32},"end":{"line":190,"column":33}},"99":{"start":{"line":182,"column":36},"end":{"line":185,"column":69}},"100":{"start":{"line":183,"column":40},"end":{"line":183,"column":125}},"101":{"start":{"line":184,"column":40},"end":{"line":184,"column":45}},"102":{"start":{"line":186,"column":36},"end":{"line":186,"column":43}},"103":{"start":{"line":188,"column":36},"end":{"line":188,"column":121}},"104":{"start":{"line":189,"column":36},"end":{"line":189,"column":48}},"105":{"start":{"line":191,"column":35},"end":{"line":197,"column":29}},"106":{"start":{"line":192,"column":32},"end":{"line":192,"column":101}},"107":{"start":{"line":193,"column":32},"end":{"line":195,"column":75}},"108":{"start":{"line":194,"column":36},"end":{"line":194,"column":121}},"109":{"start":{"line":196,"column":32},"end":{"line":196,"column":44}},"110":{"start":{"line":198,"column":28},"end":{"line":198,"column":145}},"111":{"start":{"line":199,"column":28},"end":{"line":199,"column":44}},"112":{"start":{"line":200,"column":28},"end":{"line":200,"column":52}},"113":{"start":{"line":201,"column":28},"end":{"line":201,"column":42}},"114":{"start":{"line":202,"column":28},"end":{"line":202,"column":40}},"115":{"start":{"line":203,"column":28},"end":{"line":203,"column":40}},"116":{"start":{"line":205,"column":24},"end":{"line":215,"column":25}},"117":{"start":{"line":206,"column":28},"end":{"line":214,"column":29}},"118":{"start":{"line":207,"column":32},"end":{"line":213,"column":33}},"119":{"start":{"line":208,"column":36},"end":{"line":208,"column":68}},"120":{"start":{"line":210,"column":36},"end":{"line":210,"column":41}},"121":{"start":{"line":211,"column":36},"end":{"line":211,"column":48}},"122":{"start":{"line":212,"column":36},"end":{"line":212,"column":43}},"123":{"start":{"line":216,"column":24},"end":{"line":216,"column":29}},"124":{"start":{"line":217,"column":24},"end":{"line":217,"column":42}},"125":{"start":{"line":221,"column":16},"end":{"line":224,"column":19}},"126":{"start":{"line":222,"column":20},"end":{"line":222,"column":93}},"127":{"start":{"line":223,"column":20},"end":{"line":223,"column":32}},"128":{"start":{"line":226,"column":16},"end":{"line":226,"column":30}},"129":{"start":{"line":229,"column":12},"end":{"line":241,"column":13}},"130":{"start":{"line":230,"column":16},"end":{"line":235,"column":19}},"131":{"start":{"line":231,"column":20},"end":{"line":233,"column":21}},"132":{"start":{"line":232,"column":24},"end":{"line":232,"column":90}},"133":{"start":{"line":234,"column":20},"end":{"line":234,"column":68}},"134":{"start":{"line":237,"column":16},"end":{"line":239,"column":17}},"135":{"start":{"line":238,"column":20},"end":{"line":238,"column":86}},"136":{"start":{"line":240,"column":16},"end":{"line":240,"column":64}},"137":{"start":{"line":246,"column":0},"end":{"line":246,"column":32}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":8},"end":{"line":26,"column":8}},{"start":{"line":26,"column":8},"end":{"line":26,"column":8}}]},"2":{"line":41,"type":"cond-expr","locations":[{"start":{"line":41,"column":56},"end":{"line":41,"column":61}},{"start":{"line":41,"column":64},"end":{"line":41,"column":75}}]},"3":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":19},"end":{"line":41,"column":35}},{"start":{"line":41,"column":39},"end":{"line":41,"column":53}}]},"4":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":20},"end":{"line":57,"column":26}},{"start":{"line":57,"column":30},"end":{"line":57,"column":47}}]},"5":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":20},"end":{"line":69,"column":20}},{"start":{"line":69,"column":20},"end":{"line":69,"column":20}}]},"6":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":20},"end":{"line":72,"column":20}},{"start":{"line":72,"column":20},"end":{"line":72,"column":20}}]},"7":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":23},"end":{"line":72,"column":27}},{"start":{"line":72,"column":31},"end":{"line":72,"column":40}}]},"8":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":24},"end":{"line":76,"column":24}},{"start":{"line":76,"column":24},"end":{"line":76,"column":24}}]},"9":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":27},"end":{"line":80,"column":27}},{"start":{"line":80,"column":27},"end":{"line":80,"column":27}}]},"10":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":24},"end":{"line":81,"column":24}},{"start":{"line":81,"column":24},"end":{"line":81,"column":24}}]},"11":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":27},"end":{"line":81,"column":43}},{"start":{"line":81,"column":48},"end":{"line":81,"column":64}},{"start":{"line":81,"column":68},"end":{"line":81,"column":90}}]},"12":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":32},"end":{"line":84,"column":32}},{"start":{"line":84,"column":32},"end":{"line":84,"column":32}}]},"13":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":37},"end":{"line":85,"column":37}},{"start":{"line":85,"column":37},"end":{"line":85,"column":37}}]},"14":{"line":117,"type":"binary-expr","locations":[{"start":{"line":117,"column":31},"end":{"line":117,"column":39}},{"start":{"line":117,"column":43},"end":{"line":117,"column":101}}]},"15":{"line":124,"type":"binary-expr","locations":[{"start":{"line":124,"column":31},"end":{"line":124,"column":39}},{"start":{"line":124,"column":43},"end":{"line":124,"column":101}}]},"16":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":24},"end":{"line":149,"column":24}},{"start":{"line":149,"column":24},"end":{"line":149,"column":24}}]},"17":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":28},"end":{"line":151,"column":28}},{"start":{"line":151,"column":28},"end":{"line":151,"column":28}}]},"18":{"line":151,"type":"binary-expr","locations":[{"start":{"line":151,"column":31},"end":{"line":151,"column":95}},{"start":{"line":151,"column":99},"end":{"line":151,"column":147}}]},"19":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":24},"end":{"line":157,"column":24}},{"start":{"line":157,"column":24},"end":{"line":157,"column":24}}]},"20":{"line":161,"type":"cond-expr","locations":[{"start":{"line":161,"column":113},"end":{"line":161,"column":114}},{"start":{"line":161,"column":117},"end":{"line":161,"column":160}}]},"21":{"line":161,"type":"binary-expr","locations":[{"start":{"line":161,"column":117},"end":{"line":161,"column":155}},{"start":{"line":161,"column":159},"end":{"line":161,"column":160}}]},"22":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":24},"end":{"line":163,"column":24}},{"start":{"line":163,"column":24},"end":{"line":163,"column":24}}]},"23":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":28},"end":{"line":164,"column":28}},{"start":{"line":164,"column":28},"end":{"line":164,"column":28}}]},"24":{"line":166,"type":"binary-expr","locations":[{"start":{"line":166,"column":71},"end":{"line":166,"column":99}},{"start":{"line":166,"column":103},"end":{"line":166,"column":104}}]},"25":{"line":168,"type":"binary-expr","locations":[{"start":{"line":168,"column":64},"end":{"line":168,"column":92}},{"start":{"line":168,"column":96},"end":{"line":168,"column":97}}]},"26":{"line":170,"type":"if","locations":[{"start":{"line":170,"column":31},"end":{"line":170,"column":31}},{"start":{"line":170,"column":31},"end":{"line":170,"column":31}}]},"27":{"line":171,"type":"cond-expr","locations":[{"start":{"line":171,"column":141},"end":{"line":171,"column":144}},{"start":{"line":171,"column":147},"end":{"line":171,"column":151}}]},"28":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":24},"end":{"line":174,"column":24}},{"start":{"line":174,"column":24},"end":{"line":174,"column":24}}]},"29":{"line":175,"type":"binary-expr","locations":[{"start":{"line":175,"column":58},"end":{"line":175,"column":62}},{"start":{"line":175,"column":66},"end":{"line":175,"column":78}}]},"30":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":24},"end":{"line":178,"column":24}},{"start":{"line":178,"column":24},"end":{"line":178,"column":24}}]},"31":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":28},"end":{"line":179,"column":28}},{"start":{"line":179,"column":28},"end":{"line":179,"column":28}}]},"32":{"line":180,"type":"cond-expr","locations":[{"start":{"line":180,"column":98},"end":{"line":180,"column":106}},{"start":{"line":180,"column":109},"end":{"line":180,"column":121}}]},"33":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":156},"end":{"line":180,"column":160}},{"start":{"line":180,"column":164},"end":{"line":180,"column":176}}]},"34":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":32},"end":{"line":181,"column":32}},{"start":{"line":181,"column":32},"end":{"line":181,"column":32}}]},"35":{"line":191,"type":"if","locations":[{"start":{"line":191,"column":35},"end":{"line":191,"column":35}},{"start":{"line":191,"column":35},"end":{"line":191,"column":35}}]},"36":{"line":191,"type":"binary-expr","locations":[{"start":{"line":191,"column":38},"end":{"line":191,"column":61}},{"start":{"line":191,"column":65},"end":{"line":191,"column":79}}]},"37":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":24},"end":{"line":205,"column":24}},{"start":{"line":205,"column":24},"end":{"line":205,"column":24}}]},"38":{"line":206,"type":"if","locations":[{"start":{"line":206,"column":28},"end":{"line":206,"column":28}},{"start":{"line":206,"column":28},"end":{"line":206,"column":28}}]},"39":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":12},"end":{"line":229,"column":12}},{"start":{"line":229,"column":12},"end":{"line":229,"column":12}}]},"40":{"line":229,"type":"binary-expr","locations":[{"start":{"line":229,"column":15},"end":{"line":229,"column":31}},{"start":{"line":229,"column":35},"end":{"line":229,"column":39}}]},"41":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":20},"end":{"line":231,"column":20}},{"start":{"line":231,"column":20},"end":{"line":231,"column":20}}]},"42":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":16},"end":{"line":237,"column":16}},{"start":{"line":237,"column":16},"end":{"line":237,"column":16}}]}},"code":["\"use strict\";","","const Endpoints = require(\"./Endpoints\");","const HTTPS = require(\"https\");","const MultipartData = require(\"../util/MultipartData\");","const SequentialBucket = require(\"../util/SequentialBucket\");","","/**","* Handles APi requests","*/","class RequestHandler {","    constructor(client, forceQueueing) {","        this._client = client;","        this.baseURL = Endpoints.BASE_URL;","        this.userAgent = `DiscordBot (https://github.com/abalabahaha/eris, ${require(\"../../package.json\").version})`;","        this.ratelimits = {};","        this.latencyRef = {","            latency: 500,","            raw: [500, 500, 500, 500, 500, 500, 500, 500, 500, 500],","            total: 5000,","            timeOffset: 0,","            lastTimeOffsetCheck: 0","        };","        this.globalBlock = false;","        this.readyQueue = [];","        if(forceQueueing) {","            this.globalBlock = true;","            this._client.once(\"shardPreReady\", () => this.globalUnblock());","        }","    }","","    globalUnblock() {","        this.globalBlock = false;","        while(this.readyQueue.length > 0) {","            this.readyQueue.shift()();","        }","    }","","    routefy(url) {","        return url.replace(/\\/([a-z-]+)\\/(?:[0-9]{17,})+?/g, function(match, p) {","            return p === \"channels\" || p === \"guilds\" ? match : `/${p}/:id`;","        }).replace(/\\/reactions\\/.+/g, \"/reactions/:id\");","    }","","    /**","    * Make an API request","    * @arg {String} method Uppercase HTTP method","    * @arg {String} url URL of the endpoint","    * @arg {Boolean} auth Whether to add the Authorization header and token or not","    * @arg {Object} [body] Request payload","    * @arg {Object} [file] File object","    * @arg {String} file.file A buffer containing file data","    * @arg {String} file.name What to name the file","    * @returns {Promise<Object>} Resolves with the returned JSON data","    */","    request(method, url, auth, body, file, _route, short) {","        var route = _route || this.routefy(url);","","        return new Promise((resolve, reject) => {","            var attempts = 0;","","            var actualCall = (cb) => {","                var headers = {","                    \"User-Agent\": this.userAgent","                };","                var data;","","                try {","                    if(auth) {","                        headers.Authorization = this._client.token;","                    }","                    if(file && file.file) {","                        data = new MultipartData();","                        headers[\"Content-Type\"] = \"multipart/form-data; boundary=\" + data.boundary;","                        data.attach(\"file\", file.file, file.name);","                        if(body) {","                            data.attach(\"payload_json\", body);","                        }","                        data = data.finish();","                    } else if(body) {","                        if(method === \"GET\" || (method === \"PUT\" && url.includes(\"/bans/\"))) { // TODO remove PUT case when devs fix","                            var qs = \"\";","                            Object.keys(body).forEach(function(key) {","                                if(body[key] != undefined) {","                                     if(Array.isArray(body[key])) {","                                        body[key].forEach(function(val) {","                                            qs += `&${encodeURIComponent(key)}=${encodeURIComponent(val)}`;","                                        });","                                    } else {","                                        qs += `&${encodeURIComponent(key)}=${encodeURIComponent(body[key])}`;","                                    }","                                }","                            });","                            url += \"?\" + qs.substring(1);","                        } else {","                            data = JSON.stringify(body);","                            headers[\"Content-Type\"] = \"application/json\";","                        }","                    }","                } catch(err) {","                    cb();","                    reject(err);","                    return;","                }","","                var req = HTTPS.request({","                    method: method,","                    host: \"discordapp.com\",","                    path: this.baseURL + url,","                    headers: headers","                });","","                var reqError;","","                req.once(\"abort\", () => {","                    cb();","                    reqError = reqError || new Error(`Request aborted by client on ${method} ${url}`);","                    reqError.req = req;","                    reject(reqError);","                });","","                req.once(\"aborted\", () => {","                    cb();","                    reqError = reqError || new Error(`Request aborted by server on ${method} ${url}`);","                    reqError.req = req;","                    reject(reqError);","                });","","                req.once(\"error\", (err) => {","                    reqError = err;","                    req.abort();","                });","","                var latency = Date.now();","","                req.once(\"response\", (resp) => {","                    latency = Date.now() - latency;","                    this.latencyRef.total = this.latencyRef.total - this.latencyRef.raw.shift() + latency;","                    this.latencyRef.latency = ~~(this.latencyRef.total / this.latencyRef.raw.push(latency));","","                    var response = \"\";","","                    resp.on(\"data\", (chunk) => {","                        response += chunk;","                    });","","                    resp.once(\"end\", () => {","                        var now = Date.now();","                        if(this.latencyRef.lastTimeOffsetCheck < now - 60000) {","                            var timeOffset = Date.parse(resp.headers[\"date\"]) - (this.latencyRef.lastTimeOffsetCheck = now);","                            if(~~(this.latencyRef.timeOffset) - this.latencyRef.latency >= 5000 && ~~(timeOffset) - this.latencyRef.latency >= 5000) {","                                this._client.emit(\"error\", new Error(`Your clock is ${this.latencyRef.timeOffset}ms behind Discord's server clock. Please check your connection and system time.`));","                            }","                            this.latencyRef.timeOffset = timeOffset;","                        }","","                        if(resp.headers[\"x-ratelimit-limit\"]) {","                            this.ratelimits[route].limit = +resp.headers[\"x-ratelimit-limit\"];","                        }","","                        this.ratelimits[route].remaining = resp.headers[\"x-ratelimit-remaining\"] === undefined ? 1 : +resp.headers[\"x-ratelimit-remaining\"] || 0;","","                        if(resp.headers[\"retry-after\"]) {","                            if(resp.headers[\"x-ratelimit-global\"]) {","                                this.globalBlock = true;","                                setTimeout(() => this.globalUnblock(), +resp.headers[\"retry-after\"] || 1);","                            } else {","                                this.ratelimits[route].reset = (+resp.headers[\"retry-after\"] || 1) + now;","                            }","                        } else if(resp.headers[\"x-ratelimit-reset\"]) {","                            this.ratelimits[route].reset = Math.max(+resp.headers[\"x-ratelimit-reset\"] * (route.endsWith(\"/reactions/:id\") ? 250 : 1000) + this.latencyRef.timeOffset, now);","                        }","","                        if(resp.statusCode !== 429) {","                            this._client.emit(\"debug\", `${body && body.content} ${now} ${route} ${resp.statusCode}: ${latency}ms (${this.latencyRef.latency}ms avg) | ${this.ratelimits[route].remaining}/${this.ratelimits[route].limit} left | Reset ${this.ratelimits[route].reset} (${this.ratelimits[route].reset - now}ms left)`);","                        }","","                        if(resp.statusCode >= 300) {","                            if(resp.statusCode === 429) {","                                this._client.emit(\"warn\", `${resp.headers[\"x-ratelimit-global\"] ? \"Global\" : \"Unexpected\"} 429 (╯°□°）╯︵ ┻━┻: ${response}\\n${body && body.content} ${now} ${route} ${resp.statusCode}: ${latency}ms (${this.latencyRef.latency}ms avg) | ${this.ratelimits[route].remaining}/${this.ratelimits[route].limit} left | Reset ${this.ratelimits[route].reset} (${this.ratelimits[route].reset - now}ms left)`);","                                if(resp.headers[\"retry-after\"]) {","                                    setTimeout(() => {","                                        this.request(method, url, auth, body, file, route, true).then(resolve).catch(reject);","                                        cb();","                                    }, +resp.headers[\"retry-after\"]);","                                    return;","                                } else {","                                    this.request(method, url, auth, body, file, route, true).then(resolve).catch(reject);","                                    return cb();","                                }","                            } else if(resp.statusCode === 502 && ++attempts < 4) {","                                this._client.emit(\"warn\", \"A wild 502 appeared! Thanks CloudFlare!\");","                                setTimeout(() => {","                                    this.request(method, url, auth, body, file, route, true).then(resolve).catch(reject);","                                }, Math.floor(Math.random() * 1900 + 100));","                                return cb();","                            }","                            var err = new Error(`${resp.statusCode} ${resp.statusMessage} on ${method} ${url}\\n\\n${response.substring(0, 200)}`);","                            err.resp = resp;","                            err.response = response;","                            err.req = req;","                            reject(err);","                            return cb();","                        }","                        if(response.length > 0) {","                            if(resp.headers[\"content-type\"] === \"application/json\") {","                                try {","                                    response = JSON.parse(response);","                                } catch(err) {","                                    cb();","                                    reject(err);","                                    return;","                                }","                            }","                        }","                        cb();","                        resolve(response);","                    });","                });","","                req.setTimeout(15000, function() {","                    reqError = new Error(`Request timed out (>15000ms) on ${method} ${url}`);","                    req.abort();","                });","","                req.end(data);","            };","","            if(this.globalBlock && auth) {","                this.readyQueue.push(() => {","                    if(!this.ratelimits[route]) {","                        this.ratelimits[route] = new SequentialBucket(1, this.latencyRef);","                    }","                    this.ratelimits[route].queue(actualCall, short);","                });","            } else {","                if(!this.ratelimits[route]) {","                    this.ratelimits[route] = new SequentialBucket(1, this.latencyRef);","                }","                this.ratelimits[route].queue(actualCall, short);","            }","        });","    }","}","","module.exports = RequestHandler;",""],"l":{"3":1,"4":1,"5":1,"6":1,"13":0,"14":0,"15":0,"16":0,"17":0,"24":0,"25":0,"26":0,"27":0,"28":0,"33":0,"34":0,"35":0,"40":0,"41":0,"57":0,"59":0,"60":0,"62":0,"63":0,"66":0,"68":0,"69":0,"70":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"90":0,"94":0,"96":0,"97":0,"101":0,"102":0,"103":0,"106":0,"113":0,"115":0,"116":0,"117":0,"118":0,"119":0,"122":0,"123":0,"124":0,"125":0,"126":0,"129":0,"130":0,"131":0,"134":0,"136":0,"137":0,"138":0,"139":0,"141":0,"143":0,"144":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"154":0,"157":0,"158":0,"161":0,"163":0,"164":0,"165":0,"166":0,"168":0,"170":0,"171":0,"174":0,"175":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"186":0,"188":0,"189":0,"191":0,"192":0,"193":0,"194":0,"196":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"205":0,"206":0,"207":0,"208":0,"210":0,"211":0,"212":0,"216":0,"217":0,"221":0,"222":0,"223":0,"226":0,"229":0,"230":0,"231":0,"232":0,"234":0,"237":0,"238":0,"240":0,"246":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/util/MultipartData.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/util/MultipartData.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":4,"loc":{"start":{"line":4,"column":15},"end":{"line":4,"column":18}}},"2":{"name":"(anonymous_2)","line":9,"loc":{"start":{"line":9,"column":10},"end":{"line":9,"column":38}}},"3":{"name":"(anonymous_3)","line":32,"loc":{"start":{"line":32,"column":10},"end":{"line":32,"column":13}}}},"statementMap":{"1":{"start":{"line":5,"column":8},"end":{"line":5,"column":47}},"2":{"start":{"line":6,"column":8},"end":{"line":6,"column":33}},"3":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"4":{"start":{"line":11,"column":12},"end":{"line":11,"column":19}},"5":{"start":{"line":13,"column":8},"end":{"line":13,"column":110}},"6":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"7":{"start":{"line":15,"column":12},"end":{"line":15,"column":53}},"8":{"start":{"line":17,"column":8},"end":{"line":24,"column":9}},"9":{"start":{"line":18,"column":12},"end":{"line":18,"column":63}},"10":{"start":{"line":19,"column":15},"end":{"line":24,"column":9}},"11":{"start":{"line":20,"column":12},"end":{"line":20,"column":55}},"12":{"start":{"line":21,"column":12},"end":{"line":21,"column":52}},"13":{"start":{"line":23,"column":12},"end":{"line":23,"column":41}},"14":{"start":{"line":25,"column":8},"end":{"line":29,"column":11}},"15":{"start":{"line":33,"column":8},"end":{"line":36,"column":11}},"16":{"start":{"line":40,"column":0},"end":{"line":40,"column":31}}},"branchMap":{"1":{"line":10,"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":10,"column":8}},{"start":{"line":10,"column":8},"end":{"line":10,"column":8}}]},"2":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":14,"column":8}},{"start":{"line":14,"column":8},"end":{"line":14,"column":8}}]},"3":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":8},"end":{"line":17,"column":8}},{"start":{"line":17,"column":8},"end":{"line":17,"column":8}}]},"4":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":15},"end":{"line":19,"column":15}},{"start":{"line":19,"column":15},"end":{"line":19,"column":15}}]}},"code":["\"use strict\";","","class MultipartData {","    constructor() {","        this.boundary = \"----------------Eris\";","        this.buf = new Buffer(0);","    }","","    attach(fieldName, data, filename) {","        if(data === undefined) {","            return;","        }","        var str = \"\\r\\n--\" + this.boundary + \"\\r\\nContent-Disposition: form-data; name=\\\"\" + fieldName + \"\\\"\";","        if(filename) {","            str += \"; filename=\\\"\" + filename + \"\\\"\";","        }","        if(data instanceof Buffer) {","            str +=\"\\r\\nContent-Type: application/octet-stream\";","        } else if(typeof data === \"object\") {","            str +=\"\\r\\nContent-Type: application/json\";","            data = new Buffer(JSON.stringify(data));","        } else {","            data = new Buffer(\"\" + data);","        }","        this.buf = Buffer.concat([","            this.buf,","            new Buffer(str + \"\\r\\n\\r\\n\"),","            data","        ]);","    }","","    finish() {","        return this.buf = Buffer.concat([","            this.buf,","            new Buffer(\"\\r\\n--\" + this.boundary + \"--\")","        ]);","    }","}","","module.exports = MultipartData;",""],"l":{"5":0,"6":0,"10":0,"11":0,"13":0,"14":0,"15":0,"17":0,"18":0,"19":0,"20":0,"21":0,"23":0,"25":0,"33":0,"40":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/util/SequentialBucket.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/util/SequentialBucket.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":15},"end":{"line":17,"column":35}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":9},"end":{"line":32,"column":23}}},"3":{"name":"(anonymous_3)","line":41,"loc":{"start":{"line":41,"column":9},"end":{"line":41,"column":20}}}},"statementMap":{"1":{"start":{"line":18,"column":8},"end":{"line":18,"column":44}},"2":{"start":{"line":19,"column":8},"end":{"line":19,"column":31}},"3":{"start":{"line":20,"column":8},"end":{"line":20,"column":23}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":32}},"5":{"start":{"line":22,"column":8},"end":{"line":24,"column":10}},"6":{"start":{"line":25,"column":8},"end":{"line":25,"column":25}},"7":{"start":{"line":33,"column":8},"end":{"line":37,"column":9}},"8":{"start":{"line":34,"column":12},"end":{"line":34,"column":38}},"9":{"start":{"line":36,"column":12},"end":{"line":36,"column":35}},"10":{"start":{"line":38,"column":8},"end":{"line":38,"column":21}},"11":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"12":{"start":{"line":43,"column":12},"end":{"line":43,"column":19}},"13":{"start":{"line":45,"column":8},"end":{"line":45,"column":31}},"14":{"start":{"line":46,"column":8},"end":{"line":49,"column":9}},"15":{"start":{"line":47,"column":12},"end":{"line":47,"column":108}},"16":{"start":{"line":48,"column":12},"end":{"line":48,"column":40}},"17":{"start":{"line":50,"column":8},"end":{"line":50,"column":31}},"18":{"start":{"line":51,"column":8},"end":{"line":55,"column":9}},"19":{"start":{"line":52,"column":12},"end":{"line":54,"column":84}},"20":{"start":{"line":53,"column":16},"end":{"line":53,"column":33}},"21":{"start":{"line":56,"column":8},"end":{"line":56,"column":25}},"22":{"start":{"line":57,"column":8},"end":{"line":63,"column":11}},"23":{"start":{"line":58,"column":12},"end":{"line":62,"column":13}},"24":{"start":{"line":59,"column":16},"end":{"line":59,"column":33}},"25":{"start":{"line":61,"column":16},"end":{"line":61,"column":40}},"26":{"start":{"line":67,"column":0},"end":{"line":67,"column":34}}},"branchMap":{"1":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":26},"end":{"line":22,"column":36}},{"start":{"line":22,"column":40},"end":{"line":24,"column":9}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":33,"column":8}},{"start":{"line":33,"column":8},"end":{"line":33,"column":8}}]},"3":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":8}},{"start":{"line":42,"column":8},"end":{"line":42,"column":8}}]},"4":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":12},"end":{"line":42,"column":27}},{"start":{"line":42,"column":31},"end":{"line":42,"column":40}},{"start":{"line":42,"column":45},"end":{"line":42,"column":69}}]},"5":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"6":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":11},"end":{"line":46,"column":21}},{"start":{"line":46,"column":25},"end":{"line":46,"column":74}}]},"7":{"line":47,"type":"cond-expr","locations":[{"start":{"line":47,"column":46},"end":{"line":47,"column":103}},{"start":{"line":47,"column":106},"end":{"line":47,"column":107}}]},"8":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":51,"column":8}},{"start":{"line":51,"column":8},"end":{"line":51,"column":8}}]},"9":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":27},"end":{"line":54,"column":37}},{"start":{"line":54,"column":41},"end":{"line":54,"column":55}}]},"10":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":12},"end":{"line":58,"column":12}},{"start":{"line":58,"column":12},"end":{"line":58,"column":12}}]}},"code":["\"use strict\";","","/**","* Ratelimit requests and release in sequence","* @prop {Number} limit How many tokens the bucket can consume in the current interval","* @prop {Number} remaining How many tokens the bucket has left in the current interval","* @prop {Number} reset Timestamp of next reset","* @prop {Boolean} processing Whether the queue is being processed","*/","class SequentialBucket {","    /**","    * Construct a SequentialBucket","    * @arg {Number} tokenLimit The max number of tokens the bucket can consume per interval","    * @arg {Object} [latencyRef] An object","    * @arg {Number} latencyRef.latency Interval between consuming tokens","    */","    constructor(limit, latencyRef) {","        this.limit = this.remaining = limit;","        this.resetInterval = 0;","        this.reset = 0;","        this.processing = false;","        this.latencyRef = latencyRef || {","            latency: 0","        };","        this._queue = [];","    }","","    /**","    * Queue something in the SequentialBucket","    * @arg {Function} func A function to call when a token can be consumed. The function will be passed a callback argument, which must be called to allow the bucket to continue to work","    */","    queue(func, short) {","        if(short) {","            this._queue.unshift(func);","        } else {","            this._queue.push(func);","        }","        this.check();","    }","","    check(override) {","        if((this.processing && !override) || this._queue.length === 0) {","            return;","        }","        this.processing = true;","        if(this.reset && this.reset < Date.now() - this.latencyRef.latency) {","            this.reset = this.resetInterval ? Date.now() - this.latencyRef.latency + this.resetInterval : 0;","            this.remaining = this.limit;","        }","        this.last = Date.now();","        if(this.remaining <= 0) {","            return setTimeout(() => {","                this.check(true);","            }, Math.max(0, this.reset || 0 - Date.now()) + this.latencyRef.latency);","        }","        --this.remaining;","        this._queue.shift()(() => {","            if(this._queue.length > 0) {","                this.check(true);","            } else {","                this.processing = false;","            }","        });","    }","}","","module.exports = SequentialBucket;",""],"l":{"18":0,"19":0,"20":0,"21":0,"22":0,"25":0,"33":0,"34":0,"36":0,"38":0,"42":0,"43":0,"45":0,"46":0,"47":0,"48":0,"50":0,"51":0,"52":0,"53":0,"56":0,"57":0,"58":0,"59":0,"61":0,"67":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/gateway/ShardManager.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/gateway/ShardManager.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":15},"end":{"line":7,"column":24}}},"2":{"name":"(anonymous_2)","line":16,"loc":{"start":{"line":16,"column":18},"end":{"line":16,"column":21}}},"3":{"name":"(anonymous_3)","line":21,"loc":{"start":{"line":21,"column":11},"end":{"line":21,"column":19}}},"4":{"name":"(anonymous_4)","line":31,"loc":{"start":{"line":31,"column":14},"end":{"line":31,"column":17}}},"5":{"name":"(anonymous_5)","line":46,"loc":{"start":{"line":46,"column":9},"end":{"line":46,"column":14}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":49}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":33}},"3":{"start":{"line":8,"column":8},"end":{"line":8,"column":21}},"4":{"start":{"line":9,"column":8},"end":{"line":9,"column":29}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":31}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":29}},"7":{"start":{"line":13,"column":8},"end":{"line":13,"column":35}},"8":{"start":{"line":17,"column":8},"end":{"line":17,"column":38}},"9":{"start":{"line":18,"column":8},"end":{"line":18,"column":26}},"10":{"start":{"line":22,"column":8},"end":{"line":28,"column":9}},"11":{"start":{"line":22,"column":74},"end":{"line":22,"column":90}},"12":{"start":{"line":23,"column":12},"end":{"line":23,"column":28}},"13":{"start":{"line":24,"column":12},"end":{"line":24,"column":49}},"14":{"start":{"line":26,"column":12},"end":{"line":26,"column":42}},"15":{"start":{"line":27,"column":12},"end":{"line":27,"column":30}},"16":{"start":{"line":32,"column":8},"end":{"line":43,"column":9}},"17":{"start":{"line":33,"column":12},"end":{"line":42,"column":13}},"18":{"start":{"line":34,"column":16},"end":{"line":34,"column":54}},"19":{"start":{"line":35,"column":16},"end":{"line":35,"column":32}},"20":{"start":{"line":36,"column":16},"end":{"line":36,"column":53}},"21":{"start":{"line":37,"column":19},"end":{"line":42,"column":13}},"22":{"start":{"line":38,"column":16},"end":{"line":41,"column":25}},"23":{"start":{"line":39,"column":20},"end":{"line":39,"column":47}},"24":{"start":{"line":40,"column":20},"end":{"line":40,"column":38}},"25":{"start":{"line":47,"column":8},"end":{"line":47,"column":33}},"26":{"start":{"line":48,"column":8},"end":{"line":114,"column":9}},"27":{"start":{"line":49,"column":12},"end":{"line":49,"column":57}},"28":{"start":{"line":50,"column":12},"end":{"line":113,"column":15}},"29":{"start":{"line":56,"column":16},"end":{"line":56,"column":57}},"30":{"start":{"line":57,"column":16},"end":{"line":59,"column":17}},"31":{"start":{"line":58,"column":20},"end":{"line":58,"column":27}},"32":{"start":{"line":60,"column":16},"end":{"line":64,"column":17}},"33":{"start":{"line":61,"column":20},"end":{"line":63,"column":21}},"34":{"start":{"line":62,"column":24},"end":{"line":62,"column":31}},"35":{"start":{"line":65,"column":16},"end":{"line":65,"column":41}},"36":{"start":{"line":66,"column":16},"end":{"line":66,"column":51}},"37":{"start":{"line":71,"column":16},"end":{"line":71,"column":42}},"38":{"start":{"line":78,"column":16},"end":{"line":78,"column":58}},"39":{"start":{"line":79,"column":16},"end":{"line":81,"column":17}},"40":{"start":{"line":80,"column":20},"end":{"line":80,"column":27}},"41":{"start":{"line":82,"column":16},"end":{"line":86,"column":17}},"42":{"start":{"line":83,"column":20},"end":{"line":85,"column":21}},"43":{"start":{"line":84,"column":24},"end":{"line":84,"column":31}},"44":{"start":{"line":87,"column":16},"end":{"line":87,"column":41}},"45":{"start":{"line":88,"column":16},"end":{"line":88,"column":51}},"46":{"start":{"line":89,"column":16},"end":{"line":89,"column":42}},"47":{"start":{"line":97,"column":16},"end":{"line":97,"column":69}},"48":{"start":{"line":98,"column":16},"end":{"line":100,"column":17}},"49":{"start":{"line":99,"column":20},"end":{"line":99,"column":27}},"50":{"start":{"line":101,"column":16},"end":{"line":105,"column":17}},"51":{"start":{"line":102,"column":20},"end":{"line":104,"column":21}},"52":{"start":{"line":103,"column":24},"end":{"line":103,"column":31}},"53":{"start":{"line":106,"column":16},"end":{"line":106,"column":42}},"54":{"start":{"line":107,"column":16},"end":{"line":107,"column":42}},"55":{"start":{"line":112,"column":16},"end":{"line":112,"column":47}},"56":{"start":{"line":115,"column":8},"end":{"line":117,"column":9}},"57":{"start":{"line":116,"column":12},"end":{"line":116,"column":32}},"58":{"start":{"line":121,"column":0},"end":{"line":121,"column":30}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":8},"end":{"line":22,"column":8}},{"start":{"line":22,"column":8},"end":{"line":22,"column":8}}]},"2":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":11},"end":{"line":22,"column":48}},{"start":{"line":22,"column":52},"end":{"line":22,"column":91}}]},"3":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"4":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":12},"end":{"line":33,"column":12}},{"start":{"line":33,"column":12},"end":{"line":33,"column":12}}]},"5":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":19},"end":{"line":37,"column":19}},{"start":{"line":37,"column":19},"end":{"line":37,"column":19}}]},"6":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":8},"end":{"line":48,"column":8}},{"start":{"line":48,"column":8},"end":{"line":48,"column":8}}]},"7":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":16},"end":{"line":57,"column":16}},{"start":{"line":57,"column":16},"end":{"line":57,"column":16}}]},"8":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":20},"end":{"line":61,"column":20}},{"start":{"line":61,"column":20},"end":{"line":61,"column":20}}]},"9":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":16},"end":{"line":79,"column":16}},{"start":{"line":79,"column":16},"end":{"line":79,"column":16}}]},"10":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":20},"end":{"line":83,"column":20}},{"start":{"line":83,"column":20},"end":{"line":83,"column":20}}]},"11":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":16},"end":{"line":98,"column":16}},{"start":{"line":98,"column":16},"end":{"line":98,"column":16}}]},"12":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":20},"end":{"line":102,"column":20}},{"start":{"line":102,"column":20},"end":{"line":102,"column":20}}]},"13":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":8},"end":{"line":115,"column":8}},{"start":{"line":115,"column":8},"end":{"line":115,"column":8}}]}},"code":["\"use strict\";","","const Collection = require(\"../util/Collection\");","const Shard = require(\"./Shard\");","","class ShardManager extends Collection {","    constructor(client) {","        super(Shard);","        this.client = client;","","        this.connectQueue = [];","        this.lastConnect = 0;","        this.connectTimeout = null;","    }","","    _readyPacketCB() {","        this.lastConnect = Date.now();","        this.tryConnect();","    }","","    connect(shard) {","        if(this.lastConnect <= Date.now() - 5000 && !this.find((shard) => shard.connecting)) {","            shard.connect();","            this.lastConnect = Date.now() + 7500;","        } else {","            this.connectQueue.push(shard);","            this.tryConnect();","        }","    }","","    tryConnect() {","        if(this.connectQueue.length > 0) {","            if(this.lastConnect <= Date.now() - 5000) {","                var shard = this.connectQueue.shift();","                shard.connect();","                this.lastConnect = Date.now() + 7500;","            } else if(!this.connectTimeout) {","                this.connectTimeout = setTimeout(() => {","                    this.connectTimeout = null;","                    this.tryConnect();","                }, 1000);","            }","        }","    }","","    spawn(id) {","        var shard = this.get(id);","        if(!shard) {","            shard = this.add(new Shard(id, this.client));","            shard.on(\"ready\", () => {","                /**","                * Fired when a shard turns ready","                * @event Client#shardReady","                * @prop {Number} id The ID of the shard","                */","                this.client.emit(\"shardReady\", shard.id);","                if(this.client.ready) {","                    return;","                }","                for(var other of this) {","                    if(!other[1].ready) {","                        return;","                    }","                }","                this.client.ready = true;","                this.client.startTime = Date.now();","                /**","                * Fired when all shards turn ready","                * @event Client#ready","                */","                this.client.emit(\"ready\");","            }).on(\"resume\", () => {","                /**","                * Fired when a shard resumes","                * @event Client#shardResume","                * @prop {Number} id The ID of the shard","                */","                this.client.emit(\"shardResume\", shard.id);","                if(this.client.ready) {","                    return;","                }","                for(var other of this) {","                    if(!other[1].ready) {","                        return;","                    }","                }","                this.client.ready = true;","                this.client.startTime = Date.now();","                this.client.emit(\"ready\");","            }).on(\"disconnect\", (error) => {","                /**","                * Fired when a shard disconnects","                * @event Client#shardDisconnect","                * @prop {Error?} error The error, if any","                * @prop {Number} id The ID of the shard","                */","                this.client.emit(\"shardDisconnect\", error, shard.id);","                if(!this.client.ready) {","                    return;","                }","                for(var other of this) {","                    if(other[1].ready) {","                        return;","                    }","                }","                this.client.ready = false;","                this.client.startTime = 0;","                /**","                * Fired when all shards disconnect","                * @event Client#disconnect","                */","                this.client.emit(\"disconnect\");","            });","        }","        if(shard.status === \"disconnected\") {","            this.connect(shard);","        }","    }","}","","module.exports = ShardManager;",""],"l":{"3":1,"4":1,"8":0,"9":0,"11":0,"12":0,"13":0,"17":0,"18":0,"22":0,"23":0,"24":0,"26":0,"27":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"47":0,"48":0,"49":0,"50":0,"56":0,"57":0,"58":0,"60":0,"61":0,"62":0,"65":0,"66":0,"71":0,"78":0,"79":0,"80":0,"82":0,"83":0,"84":0,"87":0,"88":0,"89":0,"97":0,"98":0,"99":0,"101":0,"102":0,"103":0,"106":0,"107":0,"112":0,"115":0,"116":0,"121":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/gateway/Shard.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/gateway/Shard.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":0,"480":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":0,"497":0,"498":0,"499":0,"500":0,"501":0,"502":0,"503":0,"504":0,"505":0,"506":0,"507":0,"508":0,"509":0,"510":0,"511":0,"512":0,"513":0,"514":0,"515":0,"516":0,"517":0,"518":0,"519":0,"520":0,"521":0,"522":0,"523":0,"524":0,"525":0,"526":0,"527":0,"528":0,"529":0,"530":0,"531":0,"532":0,"533":0,"534":0,"535":0,"536":0,"537":0,"538":0,"539":0,"540":0,"541":0,"542":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"549":0,"550":0,"551":0,"552":0,"553":0,"554":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"561":0,"562":0,"563":0,"564":0,"565":0,"566":0,"567":0,"568":0,"569":0,"570":0,"571":0,"572":0,"573":0,"574":0,"575":0,"576":0,"577":0,"578":0,"579":0,"580":0,"581":0,"582":0,"583":0,"584":0,"585":0,"586":0,"587":0,"588":0,"589":0,"590":0,"591":0,"592":0,"593":0,"594":0,"595":0,"596":0,"597":0,"598":0,"599":0,"600":0,"601":0,"602":0,"603":0,"604":0,"605":0,"606":0,"607":0,"608":0,"609":0,"610":0,"611":0,"612":0,"613":0,"614":0,"615":0,"616":0,"617":0,"618":0,"619":0,"620":0,"621":0,"622":0,"623":0,"624":0,"625":0,"626":0,"627":0,"628":0,"629":0,"630":0,"631":0,"632":0,"633":0,"634":0,"635":0,"636":0,"637":0,"638":0,"639":0,"640":0,"641":0,"642":0,"643":0,"644":0,"645":0,"646":0,"647":0,"648":0,"649":0,"650":0,"651":0,"652":0,"653":0,"654":0,"655":0,"656":0,"657":0,"658":0,"659":0,"660":0,"661":0,"662":0,"663":0,"664":0,"665":0,"666":0,"667":0,"668":0,"669":0,"670":0,"671":0,"672":0,"673":0,"674":0,"675":0,"676":0,"677":0,"678":0,"679":0,"680":0,"681":0,"682":0,"683":0,"684":0,"685":0,"686":0,"687":0,"688":0,"689":0,"690":0,"691":0,"692":0,"693":0,"694":0,"695":0,"696":0,"697":0,"698":0,"699":0,"700":0,"701":0,"702":0,"703":0,"704":0,"705":0,"706":1},"b":{"1":[0,1],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"19":[0,0],"20":[0,0],"21":[0,0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0,0,0,0,0,0,0],"29":[0,0],"30":[0,0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0,0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[0,0],"115":[0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[0,0],"125":[0,0],"126":[0,0],"127":[0,0],"128":[0,0],"129":[0,0],"130":[0,0],"131":[0,0,0],"132":[0,0],"133":[0,0],"134":[0,0],"135":[0,0],"136":[0,0],"137":[0,0],"138":[0,0],"139":[0,0],"140":[0,0],"141":[0,0],"142":[0,0],"143":[0,0],"144":[0,0],"145":[0,0],"146":[0,0],"147":[0,0],"148":[0,0],"149":[0,0],"150":[0,0],"151":[0,0],"152":[0,0],"153":[0,0],"154":[0,0],"155":[0,0],"156":[0,0],"157":[0,0],"158":[0,0],"159":[0,0],"160":[0,0],"161":[0,0],"162":[0,0],"163":[0,0],"164":[0,0],"165":[0,0],"166":[0,0],"167":[0,0],"168":[0,0],"169":[0,0],"170":[0,0],"171":[0,0],"172":[0,0],"173":[0,0],"174":[0,0],"175":[0,0],"176":[0,0],"177":[0,0],"178":[0,0,0,0,0,0,0],"179":[0,0],"180":[0,0],"181":[0,0],"182":[0,0],"183":[0,0],"184":[0,0],"185":[0,0],"186":[0,0],"187":[0,0],"188":[0,0],"189":[0,0],"190":[0,0],"191":[0,0],"192":[0,0],"193":[0,0],"194":[0,0],"195":[0,0],"196":[0,0],"197":[0,0],"198":[0,0],"199":[0,0],"200":[0,0],"201":[0,0],"202":[0,0],"203":[0,0],"204":[0,0],"205":[0,0],"206":[0,0],"207":[0,0],"208":[0,0],"209":[0,0],"210":[0,0,0],"211":[0,0],"212":[0,0],"213":[0,0],"214":[0,0],"215":[0,0],"216":[0,0],"217":[0,0],"218":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"fnMap":{"1":{"name":"(anonymous_1)","line":46,"loc":{"start":{"line":46,"column":15},"end":{"line":46,"column":28}}},"2":{"name":"(anonymous_2)","line":55,"loc":{"start":{"line":55,"column":15},"end":{"line":55,"column":18}}},"3":{"name":"(anonymous_3)","line":62,"loc":{"start":{"line":62,"column":11},"end":{"line":62,"column":14}}},"4":{"name":"(anonymous_4)","line":77,"loc":{"start":{"line":77,"column":14},"end":{"line":77,"column":31}}},"5":{"name":"(anonymous_5)","line":130,"loc":{"start":{"line":130,"column":9},"end":{"line":130,"column":12}}},"6":{"name":"(anonymous_6)","line":146,"loc":{"start":{"line":146,"column":13},"end":{"line":146,"column":16}}},"7":{"name":"(anonymous_7)","line":161,"loc":{"start":{"line":161,"column":10},"end":{"line":161,"column":13}}},"8":{"name":"(anonymous_8)","line":169,"loc":{"start":{"line":169,"column":12},"end":{"line":169,"column":15}}},"9":{"name":"(anonymous_9)","line":190,"loc":{"start":{"line":190,"column":11},"end":{"line":190,"column":20}}},"10":{"name":"(anonymous_10)","line":1304,"loc":{"start":{"line":1304,"column":13},"end":{"line":1304,"column":23}}},"11":{"name":"(anonymous_11)","line":1317,"loc":{"start":{"line":1317,"column":20},"end":{"line":1317,"column":30}}},"12":{"name":"(anonymous_12)","line":1321,"loc":{"start":{"line":1321,"column":15},"end":{"line":1321,"column":24}}},"13":{"name":"(anonymous_13)","line":1334,"loc":{"start":{"line":1334,"column":29},"end":{"line":1334,"column":32}}},"14":{"name":"(anonymous_14)","line":1349,"loc":{"start":{"line":1349,"column":19},"end":{"line":1349,"column":41}}},"15":{"name":"(anonymous_15)","line":1363,"loc":{"start":{"line":1363,"column":23},"end":{"line":1363,"column":47}}},"16":{"name":"(anonymous_16)","line":1371,"loc":{"start":{"line":1371,"column":14},"end":{"line":1371,"column":17}}},"17":{"name":"(anonymous_17)","line":1399,"loc":{"start":{"line":1399,"column":16},"end":{"line":1399,"column":19}}},"18":{"name":"(anonymous_18)","line":1552,"loc":{"start":{"line":1552,"column":9},"end":{"line":1552,"column":19}}},"19":{"name":"(anonymous_19)","line":1571,"loc":{"start":{"line":1571,"column":13},"end":{"line":1571,"column":22}}},"20":{"name":"(anonymous_20)","line":1582,"loc":{"start":{"line":1582,"column":10},"end":{"line":1582,"column":22}}},"21":{"name":"(anonymous_21)","line":1609,"loc":{"start":{"line":1609,"column":14},"end":{"line":1609,"column":29}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":43}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":42}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":59}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":41}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":81}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":29}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":17}},"10":{"start":{"line":13,"column":0},"end":{"line":17,"column":1}},"11":{"start":{"line":14,"column":4},"end":{"line":14,"column":44}},"12":{"start":{"line":16,"column":4},"end":{"line":16,"column":50}},"13":{"start":{"line":18,"column":0},"end":{"line":18,"column":12}},"14":{"start":{"line":19,"column":0},"end":{"line":22,"column":1}},"15":{"start":{"line":20,"column":4},"end":{"line":20,"column":33}},"16":{"start":{"line":23,"column":0},"end":{"line":23,"column":9}},"17":{"start":{"line":24,"column":0},"end":{"line":27,"column":1}},"18":{"start":{"line":25,"column":4},"end":{"line":25,"column":27}},"19":{"start":{"line":28,"column":0},"end":{"line":31,"column":1}},"20":{"start":{"line":29,"column":4},"end":{"line":29,"column":31}},"21":{"start":{"line":47,"column":8},"end":{"line":47,"column":16}},"22":{"start":{"line":49,"column":8},"end":{"line":49,"column":21}},"23":{"start":{"line":50,"column":8},"end":{"line":50,"column":29}},"24":{"start":{"line":52,"column":8},"end":{"line":52,"column":25}},"25":{"start":{"line":56,"column":8},"end":{"line":56,"column":133}},"26":{"start":{"line":63,"column":8},"end":{"line":66,"column":9}},"27":{"start":{"line":64,"column":12},"end":{"line":64,"column":90}},"28":{"start":{"line":65,"column":12},"end":{"line":65,"column":19}},"29":{"start":{"line":67,"column":8},"end":{"line":67,"column":31}},"30":{"start":{"line":68,"column":8},"end":{"line":68,"column":31}},"31":{"start":{"line":69,"column":8},"end":{"line":69,"column":35}},"32":{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},"33":{"start":{"line":79,"column":12},"end":{"line":79,"column":19}},"34":{"start":{"line":81,"column":8},"end":{"line":81,"column":32}},"35":{"start":{"line":82,"column":8},"end":{"line":85,"column":9}},"36":{"start":{"line":83,"column":12},"end":{"line":83,"column":50}},"37":{"start":{"line":84,"column":12},"end":{"line":84,"column":42}},"38":{"start":{"line":86,"column":8},"end":{"line":110,"column":9}},"39":{"start":{"line":87,"column":12},"end":{"line":87,"column":40}},"40":{"start":{"line":88,"column":12},"end":{"line":102,"column":13}},"41":{"start":{"line":89,"column":16},"end":{"line":93,"column":17}},"42":{"start":{"line":90,"column":20},"end":{"line":90,"column":40}},"43":{"start":{"line":92,"column":20},"end":{"line":92,"column":36}},"44":{"start":{"line":101,"column":16},"end":{"line":101,"column":56}},"45":{"start":{"line":108,"column":12},"end":{"line":108,"column":51}},"46":{"start":{"line":109,"column":12},"end":{"line":109,"column":27}},"47":{"start":{"line":111,"column":8},"end":{"line":111,"column":37}},"48":{"start":{"line":112,"column":8},"end":{"line":112,"column":21}},"49":{"start":{"line":113,"column":8},"end":{"line":127,"column":9}},"50":{"start":{"line":120,"column":12},"end":{"line":120,"column":134}},"51":{"start":{"line":121,"column":12},"end":{"line":123,"column":39}},"52":{"start":{"line":122,"column":16},"end":{"line":122,"column":49}},"53":{"start":{"line":124,"column":12},"end":{"line":124,"column":115}},"54":{"start":{"line":125,"column":15},"end":{"line":127,"column":9}},"55":{"start":{"line":126,"column":12},"end":{"line":126,"column":29}},"56":{"start":{"line":131,"column":8},"end":{"line":131,"column":32}},"57":{"start":{"line":132,"column":8},"end":{"line":132,"column":27}},"58":{"start":{"line":133,"column":8},"end":{"line":133,"column":30}},"59":{"start":{"line":134,"column":8},"end":{"line":134,"column":35}},"60":{"start":{"line":135,"column":8},"end":{"line":135,"column":35}},"61":{"start":{"line":136,"column":8},"end":{"line":136,"column":35}},"62":{"start":{"line":137,"column":8},"end":{"line":137,"column":33}},"63":{"start":{"line":138,"column":8},"end":{"line":138,"column":38}},"64":{"start":{"line":139,"column":8},"end":{"line":139,"column":32}},"65":{"start":{"line":140,"column":8},"end":{"line":140,"column":37}},"66":{"start":{"line":141,"column":8},"end":{"line":141,"column":42}},"67":{"start":{"line":142,"column":8},"end":{"line":142,"column":38}},"68":{"start":{"line":143,"column":8},"end":{"line":143,"column":37}},"69":{"start":{"line":147,"column":8},"end":{"line":147,"column":21}},"70":{"start":{"line":148,"column":8},"end":{"line":148,"column":21}},"71":{"start":{"line":149,"column":8},"end":{"line":149,"column":30}},"72":{"start":{"line":150,"column":8},"end":{"line":150,"column":38}},"73":{"start":{"line":151,"column":8},"end":{"line":151,"column":33}},"74":{"start":{"line":152,"column":8},"end":{"line":152,"column":23}},"75":{"start":{"line":153,"column":8},"end":{"line":153,"column":38}},"76":{"start":{"line":154,"column":8},"end":{"line":154,"column":39}},"77":{"start":{"line":155,"column":8},"end":{"line":155,"column":30}},"78":{"start":{"line":156,"column":8},"end":{"line":156,"column":54}},"79":{"start":{"line":157,"column":8},"end":{"line":157,"column":60}},"80":{"start":{"line":158,"column":8},"end":{"line":158,"column":73}},"81":{"start":{"line":162,"column":8},"end":{"line":166,"column":17}},"82":{"start":{"line":170,"column":8},"end":{"line":180,"column":10}},"83":{"start":{"line":181,"column":8},"end":{"line":183,"column":9}},"84":{"start":{"line":182,"column":12},"end":{"line":182,"column":70}},"85":{"start":{"line":184,"column":8},"end":{"line":186,"column":9}},"86":{"start":{"line":185,"column":12},"end":{"line":185,"column":46}},"87":{"start":{"line":187,"column":8},"end":{"line":187,"column":54}},"88":{"start":{"line":193,"column":8},"end":{"line":1300,"column":9}},"89":{"start":{"line":195,"column":16},"end":{"line":218,"column":17}},"90":{"start":{"line":196,"column":20},"end":{"line":196,"column":71}},"91":{"start":{"line":197,"column":20},"end":{"line":197,"column":39}},"92":{"start":{"line":198,"column":20},"end":{"line":204,"column":21}},"93":{"start":{"line":199,"column":24},"end":{"line":203,"column":26}},"94":{"start":{"line":205,"column":20},"end":{"line":217,"column":21}},"95":{"start":{"line":206,"column":24},"end":{"line":206,"column":84}},"96":{"start":{"line":216,"column":24},"end":{"line":216,"column":70}},"97":{"start":{"line":219,"column":16},"end":{"line":242,"column":17}},"98":{"start":{"line":220,"column":20},"end":{"line":220,"column":51}},"99":{"start":{"line":221,"column":20},"end":{"line":221,"column":82}},"100":{"start":{"line":222,"column":20},"end":{"line":224,"column":21}},"101":{"start":{"line":223,"column":24},"end":{"line":223,"column":31}},"102":{"start":{"line":225,"column":20},"end":{"line":228,"column":22}},"103":{"start":{"line":240,"column":20},"end":{"line":240,"column":112}},"104":{"start":{"line":241,"column":20},"end":{"line":241,"column":26}},"105":{"start":{"line":243,"column":16},"end":{"line":243,"column":70}},"106":{"start":{"line":244,"column":16},"end":{"line":247,"column":17}},"107":{"start":{"line":245,"column":20},"end":{"line":245,"column":106}},"108":{"start":{"line":246,"column":20},"end":{"line":246,"column":26}},"109":{"start":{"line":248,"column":16},"end":{"line":248,"column":79}},"110":{"start":{"line":249,"column":16},"end":{"line":249,"column":39}},"111":{"start":{"line":250,"column":16},"end":{"line":255,"column":17}},"112":{"start":{"line":251,"column":20},"end":{"line":254,"column":22}},"113":{"start":{"line":256,"column":16},"end":{"line":259,"column":17}},"114":{"start":{"line":257,"column":20},"end":{"line":257,"column":67}},"115":{"start":{"line":258,"column":20},"end":{"line":258,"column":76}},"116":{"start":{"line":260,"column":16},"end":{"line":260,"column":22}},"117":{"start":{"line":263,"column":16},"end":{"line":296,"column":17}},"118":{"start":{"line":264,"column":20},"end":{"line":264,"column":51}},"119":{"start":{"line":265,"column":20},"end":{"line":294,"column":21}},"120":{"start":{"line":266,"column":24},"end":{"line":266,"column":41}},"121":{"start":{"line":267,"column":24},"end":{"line":273,"column":25}},"122":{"start":{"line":268,"column":28},"end":{"line":268,"column":90}},"123":{"start":{"line":269,"column":28},"end":{"line":272,"column":29}},"124":{"start":{"line":270,"column":32},"end":{"line":270,"column":44}},"125":{"start":{"line":271,"column":32},"end":{"line":271,"column":38}},"126":{"start":{"line":274,"column":24},"end":{"line":286,"column":25}},"127":{"start":{"line":275,"column":28},"end":{"line":281,"column":29}},"128":{"start":{"line":276,"column":32},"end":{"line":276,"column":98}},"129":{"start":{"line":277,"column":32},"end":{"line":280,"column":33}},"130":{"start":{"line":278,"column":36},"end":{"line":278,"column":48}},"131":{"start":{"line":279,"column":36},"end":{"line":279,"column":42}},"132":{"start":{"line":282,"column":28},"end":{"line":285,"column":29}},"133":{"start":{"line":283,"column":32},"end":{"line":283,"column":123}},"134":{"start":{"line":284,"column":32},"end":{"line":284,"column":38}},"135":{"start":{"line":288,"column":24},"end":{"line":288,"column":82}},"136":{"start":{"line":289,"column":24},"end":{"line":292,"column":25}},"137":{"start":{"line":290,"column":28},"end":{"line":290,"column":106}},"138":{"start":{"line":291,"column":28},"end":{"line":291,"column":34}},"139":{"start":{"line":293,"column":24},"end":{"line":293,"column":88}},"140":{"start":{"line":295,"column":20},"end":{"line":295,"column":26}},"141":{"start":{"line":297,"column":16},"end":{"line":297,"column":70}},"142":{"start":{"line":298,"column":16},"end":{"line":300,"column":17}},"143":{"start":{"line":299,"column":20},"end":{"line":299,"column":26}},"144":{"start":{"line":301,"column":16},"end":{"line":304,"column":17}},"145":{"start":{"line":302,"column":20},"end":{"line":302,"column":60}},"146":{"start":{"line":303,"column":20},"end":{"line":303,"column":26}},"147":{"start":{"line":305,"column":16},"end":{"line":305,"column":79}},"148":{"start":{"line":306,"column":16},"end":{"line":314,"column":17}},"149":{"start":{"line":307,"column":20},"end":{"line":307,"column":128}},"150":{"start":{"line":307,"column":67},"end":{"line":307,"column":126}},"151":{"start":{"line":308,"column":20},"end":{"line":312,"column":21}},"152":{"start":{"line":309,"column":24},"end":{"line":309,"column":62}},"153":{"start":{"line":310,"column":24},"end":{"line":310,"column":123}},"154":{"start":{"line":311,"column":24},"end":{"line":311,"column":30}},"155":{"start":{"line":313,"column":20},"end":{"line":313,"column":26}},"156":{"start":{"line":315,"column":16},"end":{"line":320,"column":18}},"157":{"start":{"line":321,"column":16},"end":{"line":321,"column":63}},"158":{"start":{"line":322,"column":16},"end":{"line":322,"column":53}},"159":{"start":{"line":323,"column":16},"end":{"line":328,"column":17}},"160":{"start":{"line":324,"column":20},"end":{"line":324,"column":94}},"161":{"start":{"line":325,"column":20},"end":{"line":327,"column":21}},"162":{"start":{"line":326,"column":24},"end":{"line":326,"column":81}},"163":{"start":{"line":329,"column":16},"end":{"line":363,"column":17}},"164":{"start":{"line":330,"column":20},"end":{"line":330,"column":47}},"165":{"start":{"line":331,"column":20},"end":{"line":333,"column":21}},"166":{"start":{"line":332,"column":24},"end":{"line":332,"column":70}},"167":{"start":{"line":334,"column":20},"end":{"line":362,"column":21}},"168":{"start":{"line":335,"column":24},"end":{"line":353,"column":25}},"169":{"start":{"line":343,"column":28},"end":{"line":343,"column":67}},"170":{"start":{"line":344,"column":28},"end":{"line":344,"column":135}},"171":{"start":{"line":352,"column":28},"end":{"line":352,"column":121}},"172":{"start":{"line":354,"column":27},"end":{"line":362,"column":21}},"173":{"start":{"line":361,"column":24},"end":{"line":361,"column":114}},"174":{"start":{"line":364,"column":16},"end":{"line":376,"column":17}},"175":{"start":{"line":375,"column":20},"end":{"line":375,"column":75}},"176":{"start":{"line":377,"column":16},"end":{"line":377,"column":22}},"177":{"start":{"line":380,"column":16},"end":{"line":388,"column":17}},"178":{"start":{"line":387,"column":20},"end":{"line":387,"column":138}},"179":{"start":{"line":389,"column":16},"end":{"line":389,"column":22}},"180":{"start":{"line":392,"column":16},"end":{"line":392,"column":74}},"181":{"start":{"line":393,"column":16},"end":{"line":403,"column":17}},"182":{"start":{"line":394,"column":20},"end":{"line":394,"column":56}},"183":{"start":{"line":400,"column":20},"end":{"line":400,"column":99}},"184":{"start":{"line":402,"column":20},"end":{"line":402,"column":119}},"185":{"start":{"line":404,"column":16},"end":{"line":404,"column":22}},"186":{"start":{"line":407,"column":16},"end":{"line":407,"column":74}},"187":{"start":{"line":408,"column":16},"end":{"line":410,"column":17}},"188":{"start":{"line":409,"column":20},"end":{"line":409,"column":26}},"189":{"start":{"line":411,"column":16},"end":{"line":411,"column":64}},"190":{"start":{"line":412,"column":16},"end":{"line":414,"column":18}},"191":{"start":{"line":415,"column":16},"end":{"line":427,"column":17}},"192":{"start":{"line":416,"column":20},"end":{"line":426,"column":22}},"193":{"start":{"line":444,"column":16},"end":{"line":444,"column":110}},"194":{"start":{"line":445,"column":16},"end":{"line":445,"column":22}},"195":{"start":{"line":448,"column":16},"end":{"line":448,"column":74}},"196":{"start":{"line":449,"column":16},"end":{"line":451,"column":17}},"197":{"start":{"line":450,"column":20},"end":{"line":450,"column":26}},"198":{"start":{"line":457,"column":16},"end":{"line":460,"column":19}},"199":{"start":{"line":461,"column":16},"end":{"line":461,"column":22}},"200":{"start":{"line":464,"column":16},"end":{"line":464,"column":74}},"201":{"start":{"line":465,"column":16},"end":{"line":467,"column":17}},"202":{"start":{"line":466,"column":20},"end":{"line":466,"column":26}},"203":{"start":{"line":474,"column":16},"end":{"line":479,"column":21}},"204":{"start":{"line":474,"column":80},"end":{"line":479,"column":17}},"205":{"start":{"line":480,"column":16},"end":{"line":480,"column":22}},"206":{"start":{"line":483,"column":16},"end":{"line":483,"column":74}},"207":{"start":{"line":484,"column":16},"end":{"line":486,"column":17}},"208":{"start":{"line":485,"column":20},"end":{"line":485,"column":26}},"209":{"start":{"line":487,"column":16},"end":{"line":487,"column":72}},"210":{"start":{"line":488,"column":16},"end":{"line":501,"column":17}},"211":{"start":{"line":489,"column":20},"end":{"line":489,"column":123}},"212":{"start":{"line":490,"column":20},"end":{"line":500,"column":21}},"213":{"start":{"line":491,"column":24},"end":{"line":491,"column":60}},"214":{"start":{"line":492,"column":24},"end":{"line":494,"column":25}},"215":{"start":{"line":493,"column":28},"end":{"line":493,"column":66}},"216":{"start":{"line":496,"column":24},"end":{"line":499,"column":26}},"217":{"start":{"line":511,"column":16},"end":{"line":514,"column":53}},"218":{"start":{"line":515,"column":16},"end":{"line":515,"column":22}},"219":{"start":{"line":518,"column":16},"end":{"line":518,"column":74}},"220":{"start":{"line":519,"column":16},"end":{"line":521,"column":17}},"221":{"start":{"line":520,"column":20},"end":{"line":520,"column":26}},"222":{"start":{"line":522,"column":16},"end":{"line":522,"column":72}},"223":{"start":{"line":523,"column":16},"end":{"line":531,"column":17}},"224":{"start":{"line":524,"column":20},"end":{"line":524,"column":123}},"225":{"start":{"line":525,"column":20},"end":{"line":530,"column":21}},"226":{"start":{"line":526,"column":24},"end":{"line":526,"column":60}},"227":{"start":{"line":527,"column":24},"end":{"line":529,"column":25}},"228":{"start":{"line":528,"column":28},"end":{"line":528,"column":67}},"229":{"start":{"line":541,"column":16},"end":{"line":544,"column":53}},"230":{"start":{"line":545,"column":16},"end":{"line":545,"column":22}},"231":{"start":{"line":548,"column":16},"end":{"line":548,"column":74}},"232":{"start":{"line":549,"column":16},"end":{"line":551,"column":17}},"233":{"start":{"line":550,"column":20},"end":{"line":550,"column":26}},"234":{"start":{"line":561,"column":16},"end":{"line":564,"column":19}},"235":{"start":{"line":565,"column":16},"end":{"line":565,"column":22}},"236":{"start":{"line":568,"column":16},"end":{"line":568,"column":70}},"237":{"start":{"line":569,"column":16},"end":{"line":569,"column":47}},"238":{"start":{"line":570,"column":16},"end":{"line":570,"column":36}},"239":{"start":{"line":577,"column":16},"end":{"line":577,"column":94}},"240":{"start":{"line":578,"column":16},"end":{"line":578,"column":22}},"241":{"start":{"line":581,"column":16},"end":{"line":581,"column":70}},"242":{"start":{"line":582,"column":16},"end":{"line":582,"column":79}},"243":{"start":{"line":583,"column":16},"end":{"line":583,"column":37}},"244":{"start":{"line":584,"column":16},"end":{"line":589,"column":17}},"245":{"start":{"line":585,"column":20},"end":{"line":588,"column":22}},"246":{"start":{"line":590,"column":16},"end":{"line":590,"column":63}},"247":{"start":{"line":600,"column":16},"end":{"line":600,"column":80}},"248":{"start":{"line":601,"column":16},"end":{"line":601,"column":22}},"249":{"start":{"line":604,"column":16},"end":{"line":606,"column":17}},"250":{"start":{"line":605,"column":20},"end":{"line":605,"column":26}},"251":{"start":{"line":607,"column":16},"end":{"line":607,"column":70}},"252":{"start":{"line":608,"column":16},"end":{"line":608,"column":36}},"253":{"start":{"line":609,"column":16},"end":{"line":609,"column":47}},"254":{"start":{"line":616,"column":16},"end":{"line":619,"column":19}},"255":{"start":{"line":620,"column":16},"end":{"line":620,"column":22}},"256":{"start":{"line":623,"column":16},"end":{"line":653,"column":17}},"257":{"start":{"line":624,"column":20},"end":{"line":624,"column":59}},"258":{"start":{"line":625,"column":20},"end":{"line":644,"column":21}},"259":{"start":{"line":626,"column":24},"end":{"line":640,"column":25}},"260":{"start":{"line":632,"column":28},"end":{"line":632,"column":70}},"261":{"start":{"line":639,"column":28},"end":{"line":639,"column":67}},"262":{"start":{"line":642,"column":24},"end":{"line":642,"column":71}},"263":{"start":{"line":643,"column":24},"end":{"line":643,"column":57}},"264":{"start":{"line":646,"column":20},"end":{"line":646,"column":56}},"265":{"start":{"line":652,"column":20},"end":{"line":652,"column":121}},"266":{"start":{"line":654,"column":16},"end":{"line":654,"column":22}},"267":{"start":{"line":657,"column":16},"end":{"line":657,"column":64}},"268":{"start":{"line":658,"column":16},"end":{"line":658,"column":36}},"269":{"start":{"line":659,"column":16},"end":{"line":670,"column":18}},"270":{"start":{"line":687,"column":16},"end":{"line":687,"column":108}},"271":{"start":{"line":688,"column":16},"end":{"line":688,"column":22}},"272":{"start":{"line":691,"column":16},"end":{"line":691,"column":62}},"273":{"start":{"line":692,"column":16},"end":{"line":692,"column":64}},"274":{"start":{"line":693,"column":16},"end":{"line":697,"column":17}},"275":{"start":{"line":694,"column":20},"end":{"line":696,"column":23}},"276":{"start":{"line":695,"column":24},"end":{"line":695,"column":71}},"277":{"start":{"line":698,"column":16},"end":{"line":714,"column":17}},"278":{"start":{"line":704,"column":20},"end":{"line":704,"column":115}},"279":{"start":{"line":711,"column":20},"end":{"line":713,"column":23}},"280":{"start":{"line":715,"column":16},"end":{"line":715,"column":22}},"281":{"start":{"line":724,"column":16},"end":{"line":724,"column":142}},"282":{"start":{"line":725,"column":16},"end":{"line":725,"column":22}},"283":{"start":{"line":734,"column":16},"end":{"line":734,"column":145}},"284":{"start":{"line":735,"column":16},"end":{"line":735,"column":22}},"285":{"start":{"line":744,"column":16},"end":{"line":744,"column":70}},"286":{"start":{"line":745,"column":16},"end":{"line":745,"column":98}},"287":{"start":{"line":746,"column":16},"end":{"line":746,"column":22}},"288":{"start":{"line":749,"column":16},"end":{"line":749,"column":70}},"289":{"start":{"line":750,"column":16},"end":{"line":750,"column":65}},"290":{"start":{"line":751,"column":16},"end":{"line":751,"column":35}},"291":{"start":{"line":752,"column":16},"end":{"line":761,"column":17}},"292":{"start":{"line":753,"column":20},"end":{"line":760,"column":22}},"293":{"start":{"line":775,"column":16},"end":{"line":775,"column":110}},"294":{"start":{"line":776,"column":16},"end":{"line":776,"column":22}},"295":{"start":{"line":785,"column":16},"end":{"line":785,"column":70}},"296":{"start":{"line":786,"column":16},"end":{"line":788,"column":17}},"297":{"start":{"line":787,"column":20},"end":{"line":787,"column":107}},"298":{"start":{"line":789,"column":16},"end":{"line":789,"column":22}},"299":{"start":{"line":792,"column":16},"end":{"line":816,"column":17}},"300":{"start":{"line":793,"column":20},"end":{"line":801,"column":21}},"301":{"start":{"line":799,"column":24},"end":{"line":799,"column":95}},"302":{"start":{"line":800,"column":24},"end":{"line":800,"column":114}},"303":{"start":{"line":802,"column":23},"end":{"line":816,"column":17}},"304":{"start":{"line":803,"column":20},"end":{"line":803,"column":74}},"305":{"start":{"line":804,"column":20},"end":{"line":806,"column":21}},"306":{"start":{"line":805,"column":24},"end":{"line":805,"column":30}},"307":{"start":{"line":807,"column":20},"end":{"line":807,"column":70}},"308":{"start":{"line":808,"column":20},"end":{"line":808,"column":81}},"309":{"start":{"line":809,"column":20},"end":{"line":809,"column":63}},"310":{"start":{"line":810,"column":23},"end":{"line":816,"column":17}},"311":{"start":{"line":811,"column":20},"end":{"line":813,"column":21}},"312":{"start":{"line":812,"column":24},"end":{"line":812,"column":112}},"313":{"start":{"line":815,"column":20},"end":{"line":815,"column":119}},"314":{"start":{"line":817,"column":16},"end":{"line":817,"column":22}},"315":{"start":{"line":820,"column":16},"end":{"line":820,"column":66}},"316":{"start":{"line":821,"column":16},"end":{"line":823,"column":17}},"317":{"start":{"line":822,"column":20},"end":{"line":822,"column":27}},"318":{"start":{"line":824,"column":16},"end":{"line":833,"column":17}},"319":{"start":{"line":825,"column":20},"end":{"line":827,"column":21}},"320":{"start":{"line":826,"column":24},"end":{"line":826,"column":30}},"321":{"start":{"line":828,"column":20},"end":{"line":832,"column":22}},"322":{"start":{"line":834,"column":16},"end":{"line":842,"column":17}},"323":{"start":{"line":835,"column":20},"end":{"line":841,"column":22}},"324":{"start":{"line":843,"column":16},"end":{"line":843,"column":41}},"325":{"start":{"line":855,"column":16},"end":{"line":855,"column":71}},"326":{"start":{"line":856,"column":16},"end":{"line":856,"column":22}},"327":{"start":{"line":859,"column":16},"end":{"line":890,"column":17}},"328":{"start":{"line":860,"column":20},"end":{"line":871,"column":21}},"329":{"start":{"line":861,"column":24},"end":{"line":861,"column":83}},"330":{"start":{"line":862,"column":24},"end":{"line":870,"column":25}},"331":{"start":{"line":863,"column":28},"end":{"line":863,"column":87}},"332":{"start":{"line":869,"column":28},"end":{"line":869,"column":71}},"333":{"start":{"line":872,"column":23},"end":{"line":890,"column":17}},"334":{"start":{"line":873,"column":20},"end":{"line":873,"column":68}},"335":{"start":{"line":874,"column":20},"end":{"line":874,"column":102}},"336":{"start":{"line":875,"column":20},"end":{"line":877,"column":21}},"337":{"start":{"line":876,"column":24},"end":{"line":876,"column":31}},"338":{"start":{"line":878,"column":20},"end":{"line":882,"column":21}},"339":{"start":{"line":879,"column":24},"end":{"line":881,"column":27}},"340":{"start":{"line":880,"column":28},"end":{"line":880,"column":112}},"341":{"start":{"line":883,"column":20},"end":{"line":883,"column":63}},"342":{"start":{"line":884,"column":23},"end":{"line":890,"column":17}},"343":{"start":{"line":885,"column":20},"end":{"line":887,"column":21}},"344":{"start":{"line":886,"column":24},"end":{"line":886,"column":102}},"345":{"start":{"line":889,"column":20},"end":{"line":889,"column":119}},"346":{"start":{"line":891,"column":16},"end":{"line":891,"column":22}},"347":{"start":{"line":894,"column":16},"end":{"line":894,"column":50}},"348":{"start":{"line":895,"column":16},"end":{"line":895,"column":74}},"349":{"start":{"line":896,"column":16},"end":{"line":919,"column":17}},"350":{"start":{"line":897,"column":20},"end":{"line":897,"column":50}},"351":{"start":{"line":899,"column":20},"end":{"line":899,"column":63}},"352":{"start":{"line":900,"column":20},"end":{"line":900,"column":43}},"353":{"start":{"line":901,"column":20},"end":{"line":901,"column":40}},"354":{"start":{"line":902,"column":20},"end":{"line":902,"column":95}},"355":{"start":{"line":902,"column":78},"end":{"line":902,"column":93}},"356":{"start":{"line":903,"column":20},"end":{"line":914,"column":21}},"357":{"start":{"line":904,"column":24},"end":{"line":907,"column":25}},"358":{"start":{"line":905,"column":28},"end":{"line":905,"column":40}},"359":{"start":{"line":906,"column":28},"end":{"line":906,"column":45}},"360":{"start":{"line":908,"column":24},"end":{"line":913,"column":25}},"361":{"start":{"line":909,"column":28},"end":{"line":909,"column":44}},"362":{"start":{"line":910,"column":28},"end":{"line":910,"column":72}},"363":{"start":{"line":912,"column":28},"end":{"line":912,"column":70}},"364":{"start":{"line":915,"column":20},"end":{"line":917,"column":21}},"365":{"start":{"line":916,"column":24},"end":{"line":916,"column":65}},"366":{"start":{"line":918,"column":20},"end":{"line":918,"column":74}},"367":{"start":{"line":925,"column":16},"end":{"line":925,"column":61}},"368":{"start":{"line":926,"column":16},"end":{"line":926,"column":22}},"369":{"start":{"line":929,"column":16},"end":{"line":929,"column":74}},"370":{"start":{"line":930,"column":16},"end":{"line":932,"column":17}},"371":{"start":{"line":931,"column":20},"end":{"line":931,"column":75}},"372":{"start":{"line":933,"column":16},"end":{"line":939,"column":18}},"373":{"start":{"line":951,"column":16},"end":{"line":951,"column":87}},"374":{"start":{"line":952,"column":16},"end":{"line":952,"column":22}},"375":{"start":{"line":955,"column":16},"end":{"line":955,"column":74}},"376":{"start":{"line":956,"column":16},"end":{"line":958,"column":17}},"377":{"start":{"line":957,"column":20},"end":{"line":957,"column":75}},"378":{"start":{"line":959,"column":16},"end":{"line":959,"column":48}},"379":{"start":{"line":960,"column":16},"end":{"line":960,"column":36}},"380":{"start":{"line":966,"column":16},"end":{"line":966,"column":65}},"381":{"start":{"line":967,"column":16},"end":{"line":967,"column":22}},"382":{"start":{"line":970,"column":16},"end":{"line":970,"column":81}},"383":{"start":{"line":977,"column":16},"end":{"line":977,"column":140}},"384":{"start":{"line":978,"column":16},"end":{"line":978,"column":22}},"385":{"start":{"line":981,"column":16},"end":{"line":981,"column":81}},"386":{"start":{"line":988,"column":16},"end":{"line":988,"column":110}},"387":{"start":{"line":989,"column":16},"end":{"line":989,"column":22}},"388":{"start":{"line":1001,"column":16},"end":{"line":1001,"column":111}},"389":{"start":{"line":1002,"column":16},"end":{"line":1002,"column":22}},"390":{"start":{"line":1010,"column":16},"end":{"line":1010,"column":110}},"391":{"start":{"line":1011,"column":16},"end":{"line":1011,"column":22}},"392":{"start":{"line":1014,"column":16},"end":{"line":1014,"column":70}},"393":{"start":{"line":1015,"column":16},"end":{"line":1022,"column":17}},"394":{"start":{"line":1016,"column":20},"end":{"line":1021,"column":21}},"395":{"start":{"line":1017,"column":24},"end":{"line":1017,"column":63}},"396":{"start":{"line":1018,"column":24},"end":{"line":1018,"column":42}},"397":{"start":{"line":1020,"column":24},"end":{"line":1020,"column":58}},"398":{"start":{"line":1030,"column":16},"end":{"line":1033,"column":20}},"399":{"start":{"line":1031,"column":20},"end":{"line":1031,"column":47}},"400":{"start":{"line":1032,"column":20},"end":{"line":1032,"column":60}},"401":{"start":{"line":1035,"column":16},"end":{"line":1035,"column":45}},"402":{"start":{"line":1039,"column":16},"end":{"line":1039,"column":22}},"403":{"start":{"line":1042,"column":16},"end":{"line":1042,"column":64}},"404":{"start":{"line":1043,"column":16},"end":{"line":1046,"column":17}},"405":{"start":{"line":1044,"column":20},"end":{"line":1044,"column":47}},"406":{"start":{"line":1045,"column":20},"end":{"line":1045,"column":53}},"407":{"start":{"line":1047,"column":16},"end":{"line":1058,"column":17}},"408":{"start":{"line":1048,"column":20},"end":{"line":1055,"column":21}},"409":{"start":{"line":1049,"column":24},"end":{"line":1049,"column":79}},"410":{"start":{"line":1050,"column":24},"end":{"line":1052,"column":25}},"411":{"start":{"line":1051,"column":28},"end":{"line":1051,"column":136}},"412":{"start":{"line":1053,"column":24},"end":{"line":1053,"column":171}},"413":{"start":{"line":1054,"column":24},"end":{"line":1054,"column":33}},"414":{"start":{"line":1056,"column":20},"end":{"line":1056,"column":51}},"415":{"start":{"line":1057,"column":20},"end":{"line":1057,"column":51}},"416":{"start":{"line":1059,"column":16},"end":{"line":1075,"column":17}},"417":{"start":{"line":1060,"column":20},"end":{"line":1074,"column":21}},"418":{"start":{"line":1061,"column":24},"end":{"line":1063,"column":25}},"419":{"start":{"line":1062,"column":28},"end":{"line":1062,"column":37}},"420":{"start":{"line":1064,"column":24},"end":{"line":1064,"column":59}},"421":{"start":{"line":1065,"column":24},"end":{"line":1065,"column":80}},"422":{"start":{"line":1066,"column":24},"end":{"line":1073,"column":25}},"423":{"start":{"line":1067,"column":28},"end":{"line":1067,"column":87}},"424":{"start":{"line":1068,"column":28},"end":{"line":1070,"column":29}},"425":{"start":{"line":1069,"column":32},"end":{"line":1069,"column":80}},"426":{"start":{"line":1072,"column":28},"end":{"line":1072,"column":169}},"427":{"start":{"line":1076,"column":16},"end":{"line":1076,"column":48}},"428":{"start":{"line":1077,"column":16},"end":{"line":1077,"column":38}},"429":{"start":{"line":1078,"column":16},"end":{"line":1078,"column":34}},"430":{"start":{"line":1079,"column":16},"end":{"line":1079,"column":22}},"431":{"start":{"line":1083,"column":16},"end":{"line":1083,"column":41}},"432":{"start":{"line":1084,"column":16},"end":{"line":1084,"column":46}},"433":{"start":{"line":1086,"column":16},"end":{"line":1086,"column":40}},"434":{"start":{"line":1087,"column":16},"end":{"line":1087,"column":42}},"435":{"start":{"line":1088,"column":16},"end":{"line":1088,"column":48}},"436":{"start":{"line":1089,"column":16},"end":{"line":1089,"column":52}},"437":{"start":{"line":1091,"column":16},"end":{"line":1102,"column":17}},"438":{"start":{"line":1092,"column":20},"end":{"line":1092,"column":41}},"439":{"start":{"line":1093,"column":20},"end":{"line":1093,"column":38}},"440":{"start":{"line":1100,"column":20},"end":{"line":1100,"column":40}},"441":{"start":{"line":1101,"column":20},"end":{"line":1101,"column":26}},"442":{"start":{"line":1104,"column":16},"end":{"line":1104,"column":116}},"443":{"start":{"line":1105,"column":16},"end":{"line":1114,"column":17}},"444":{"start":{"line":1106,"column":20},"end":{"line":1106,"column":43}},"445":{"start":{"line":1107,"column":20},"end":{"line":1109,"column":21}},"446":{"start":{"line":1108,"column":24},"end":{"line":1108,"column":71}},"447":{"start":{"line":1111,"column":20},"end":{"line":1111,"column":44}},"448":{"start":{"line":1112,"column":20},"end":{"line":1112,"column":81}},"449":{"start":{"line":1113,"column":20},"end":{"line":1113,"column":70}},"450":{"start":{"line":1116,"column":16},"end":{"line":1118,"column":17}},"451":{"start":{"line":1117,"column":20},"end":{"line":1117,"column":62}},"452":{"start":{"line":1120,"column":16},"end":{"line":1120,"column":53}},"453":{"start":{"line":1122,"column":16},"end":{"line":1129,"column":19}},"454":{"start":{"line":1123,"column":20},"end":{"line":1128,"column":21}},"455":{"start":{"line":1124,"column":24},"end":{"line":1124,"column":57}},"456":{"start":{"line":1125,"column":24},"end":{"line":1125,"column":84}},"457":{"start":{"line":1127,"column":24},"end":{"line":1127,"column":86}},"458":{"start":{"line":1131,"column":16},"end":{"line":1140,"column":19}},"459":{"start":{"line":1132,"column":20},"end":{"line":1139,"column":21}},"460":{"start":{"line":1133,"column":24},"end":{"line":1133,"column":93}},"461":{"start":{"line":1134,"column":24},"end":{"line":1134,"column":84}},"462":{"start":{"line":1135,"column":27},"end":{"line":1139,"column":21}},"463":{"start":{"line":1136,"column":24},"end":{"line":1136,"column":82}},"464":{"start":{"line":1138,"column":24},"end":{"line":1138,"column":131}},"465":{"start":{"line":1142,"column":16},"end":{"line":1146,"column":17}},"466":{"start":{"line":1143,"column":20},"end":{"line":1145,"column":23}},"467":{"start":{"line":1144,"column":24},"end":{"line":1144,"column":87}},"468":{"start":{"line":1148,"column":16},"end":{"line":1155,"column":17}},"469":{"start":{"line":1149,"column":20},"end":{"line":1154,"column":23}},"470":{"start":{"line":1150,"column":24},"end":{"line":1153,"column":25}},"471":{"start":{"line":1151,"column":28},"end":{"line":1151,"column":59}},"472":{"start":{"line":1152,"column":28},"end":{"line":1152,"column":83}},"473":{"start":{"line":1157,"column":16},"end":{"line":1159,"column":17}},"474":{"start":{"line":1158,"column":20},"end":{"line":1158,"column":55}},"475":{"start":{"line":1161,"column":16},"end":{"line":1161,"column":37}},"476":{"start":{"line":1167,"column":16},"end":{"line":1167,"column":59}},"477":{"start":{"line":1169,"column":16},"end":{"line":1173,"column":17}},"478":{"start":{"line":1170,"column":20},"end":{"line":1170,"column":53}},"479":{"start":{"line":1172,"column":20},"end":{"line":1172,"column":38}},"480":{"start":{"line":1177,"column":16},"end":{"line":1177,"column":22}},"481":{"start":{"line":1180,"column":16},"end":{"line":1180,"column":53}},"482":{"start":{"line":1181,"column":16},"end":{"line":1181,"column":55}},"483":{"start":{"line":1182,"column":16},"end":{"line":1182,"column":38}},"484":{"start":{"line":1183,"column":16},"end":{"line":1183,"column":73}},"485":{"start":{"line":1184,"column":16},"end":{"line":1184,"column":22}},"486":{"start":{"line":1187,"column":16},"end":{"line":1187,"column":64}},"487":{"start":{"line":1188,"column":16},"end":{"line":1188,"column":22}},"488":{"start":{"line":1191,"column":16},"end":{"line":1193,"column":17}},"489":{"start":{"line":1192,"column":20},"end":{"line":1192,"column":26}},"490":{"start":{"line":1194,"column":16},"end":{"line":1194,"column":78}},"491":{"start":{"line":1195,"column":16},"end":{"line":1214,"column":17}},"492":{"start":{"line":1196,"column":20},"end":{"line":1198,"column":22}},"493":{"start":{"line":1206,"column":20},"end":{"line":1206,"column":120}},"494":{"start":{"line":1213,"column":20},"end":{"line":1213,"column":110}},"495":{"start":{"line":1215,"column":16},"end":{"line":1215,"column":22}},"496":{"start":{"line":1218,"column":16},"end":{"line":1220,"column":17}},"497":{"start":{"line":1219,"column":20},"end":{"line":1219,"column":26}},"498":{"start":{"line":1226,"column":16},"end":{"line":1226,"column":99}},"499":{"start":{"line":1227,"column":16},"end":{"line":1227,"column":22}},"500":{"start":{"line":1230,"column":16},"end":{"line":1230,"column":70}},"501":{"start":{"line":1231,"column":16},"end":{"line":1231,"column":45}},"502":{"start":{"line":1232,"column":16},"end":{"line":1232,"column":39}},"503":{"start":{"line":1240,"column":16},"end":{"line":1240,"column":86}},"504":{"start":{"line":1241,"column":16},"end":{"line":1241,"column":22}},"505":{"start":{"line":1244,"column":16},"end":{"line":1244,"column":74}},"506":{"start":{"line":1245,"column":16},"end":{"line":1248,"column":17}},"507":{"start":{"line":1246,"column":20},"end":{"line":1246,"column":117}},"508":{"start":{"line":1247,"column":20},"end":{"line":1247,"column":26}},"509":{"start":{"line":1249,"column":16},"end":{"line":1249,"column":60}},"510":{"start":{"line":1250,"column":16},"end":{"line":1250,"column":74}},"511":{"start":{"line":1258,"column":16},"end":{"line":1258,"column":102}},"512":{"start":{"line":1259,"column":16},"end":{"line":1259,"column":22}},"513":{"start":{"line":1262,"column":16},"end":{"line":1273,"column":17}},"514":{"start":{"line":1263,"column":20},"end":{"line":1263,"column":74}},"515":{"start":{"line":1264,"column":20},"end":{"line":1267,"column":21}},"516":{"start":{"line":1265,"column":24},"end":{"line":1265,"column":114}},"517":{"start":{"line":1266,"column":24},"end":{"line":1266,"column":33}},"518":{"start":{"line":1268,"column":20},"end":{"line":1268,"column":69}},"519":{"start":{"line":1269,"column":20},"end":{"line":1272,"column":21}},"520":{"start":{"line":1270,"column":24},"end":{"line":1270,"column":55}},"521":{"start":{"line":1271,"column":24},"end":{"line":1271,"column":48}},"522":{"start":{"line":1274,"column":16},"end":{"line":1274,"column":22}},"523":{"start":{"line":1277,"column":16},"end":{"line":1281,"column":17}},"524":{"start":{"line":1278,"column":20},"end":{"line":1278,"column":67}},"525":{"start":{"line":1280,"column":20},"end":{"line":1280,"column":51}},"526":{"start":{"line":1282,"column":16},"end":{"line":1282,"column":22}},"527":{"start":{"line":1288,"column":16},"end":{"line":1288,"column":22}},"528":{"start":{"line":1297,"column":16},"end":{"line":1297,"column":61}},"529":{"start":{"line":1298,"column":16},"end":{"line":1298,"column":22}},"530":{"start":{"line":1305,"column":8},"end":{"line":1314,"column":9}},"531":{"start":{"line":1306,"column":12},"end":{"line":1306,"column":55}},"532":{"start":{"line":1307,"column":12},"end":{"line":1307,"column":44}},"533":{"start":{"line":1308,"column":12},"end":{"line":1308,"column":63}},"534":{"start":{"line":1309,"column":15},"end":{"line":1314,"column":9}},"535":{"start":{"line":1310,"column":12},"end":{"line":1310,"column":45}},"536":{"start":{"line":1312,"column":12},"end":{"line":1312,"column":46}},"537":{"start":{"line":1313,"column":12},"end":{"line":1313,"column":60}},"538":{"start":{"line":1318,"column":8},"end":{"line":1318,"column":49}},"539":{"start":{"line":1322,"column":8},"end":{"line":1322,"column":55}},"540":{"start":{"line":1323,"column":8},"end":{"line":1323,"column":70}},"541":{"start":{"line":1324,"column":8},"end":{"line":1327,"column":9}},"542":{"start":{"line":1325,"column":12},"end":{"line":1325,"column":34}},"543":{"start":{"line":1326,"column":12},"end":{"line":1326,"column":37}},"544":{"start":{"line":1328,"column":8},"end":{"line":1330,"column":9}},"545":{"start":{"line":1329,"column":12},"end":{"line":1329,"column":36}},"546":{"start":{"line":1331,"column":8},"end":{"line":1331,"column":21}},"547":{"start":{"line":1335,"column":8},"end":{"line":1338,"column":9}},"548":{"start":{"line":1336,"column":12},"end":{"line":1336,"column":50}},"549":{"start":{"line":1337,"column":12},"end":{"line":1337,"column":43}},"550":{"start":{"line":1339,"column":8},"end":{"line":1346,"column":9}},"551":{"start":{"line":1340,"column":12},"end":{"line":1342,"column":13}},"552":{"start":{"line":1341,"column":16},"end":{"line":1341,"column":41}},"553":{"start":{"line":1343,"column":12},"end":{"line":1345,"column":55}},"554":{"start":{"line":1344,"column":16},"end":{"line":1344,"column":34}},"555":{"start":{"line":1350,"column":8},"end":{"line":1350,"column":52}},"556":{"start":{"line":1351,"column":8},"end":{"line":1360,"column":9}},"557":{"start":{"line":1352,"column":12},"end":{"line":1352,"column":60}},"558":{"start":{"line":1353,"column":12},"end":{"line":1353,"column":46}},"559":{"start":{"line":1354,"column":12},"end":{"line":1354,"column":60}},"560":{"start":{"line":1355,"column":15},"end":{"line":1360,"column":9}},"561":{"start":{"line":1356,"column":12},"end":{"line":1356,"column":48}},"562":{"start":{"line":1358,"column":12},"end":{"line":1358,"column":48}},"563":{"start":{"line":1359,"column":12},"end":{"line":1359,"column":57}},"564":{"start":{"line":1364,"column":8},"end":{"line":1368,"column":11}},"565":{"start":{"line":1372,"column":8},"end":{"line":1396,"column":9}},"566":{"start":{"line":1373,"column":12},"end":{"line":1378,"column":13}},"567":{"start":{"line":1374,"column":16},"end":{"line":1374,"column":59}},"568":{"start":{"line":1375,"column":16},"end":{"line":1375,"column":41}},"569":{"start":{"line":1376,"column":16},"end":{"line":1376,"column":46}},"570":{"start":{"line":1377,"column":16},"end":{"line":1377,"column":23}},"571":{"start":{"line":1379,"column":12},"end":{"line":1381,"column":13}},"572":{"start":{"line":1380,"column":16},"end":{"line":1380,"column":23}},"573":{"start":{"line":1382,"column":12},"end":{"line":1387,"column":13}},"574":{"start":{"line":1383,"column":16},"end":{"line":1383,"column":64}},"575":{"start":{"line":1384,"column":16},"end":{"line":1384,"column":43}},"576":{"start":{"line":1385,"column":16},"end":{"line":1385,"column":43}},"577":{"start":{"line":1386,"column":16},"end":{"line":1386,"column":23}},"578":{"start":{"line":1388,"column":12},"end":{"line":1395,"column":13}},"579":{"start":{"line":1389,"column":16},"end":{"line":1389,"column":34}},"580":{"start":{"line":1394,"column":16},"end":{"line":1394,"column":35}},"581":{"start":{"line":1400,"column":8},"end":{"line":1400,"column":35}},"582":{"start":{"line":1401,"column":8},"end":{"line":1401,"column":56}},"583":{"start":{"line":1402,"column":8},"end":{"line":1414,"column":10}},"584":{"start":{"line":1403,"column":12},"end":{"line":1405,"column":13}},"585":{"start":{"line":1404,"column":16},"end":{"line":1404,"column":79}},"586":{"start":{"line":1406,"column":12},"end":{"line":1406,"column":40}},"587":{"start":{"line":1412,"column":12},"end":{"line":1412,"column":49}},"588":{"start":{"line":1413,"column":12},"end":{"line":1413,"column":41}},"589":{"start":{"line":1415,"column":8},"end":{"line":1500,"column":10}},"590":{"start":{"line":1416,"column":12},"end":{"line":1499,"column":13}},"591":{"start":{"line":1417,"column":16},"end":{"line":1417,"column":43}},"592":{"start":{"line":1419,"column":16},"end":{"line":1427,"column":17}},"593":{"start":{"line":1426,"column":20},"end":{"line":1426,"column":63}},"594":{"start":{"line":1429,"column":16},"end":{"line":1442,"column":17}},"595":{"start":{"line":1430,"column":20},"end":{"line":1440,"column":21}},"596":{"start":{"line":1437,"column":24},"end":{"line":1437,"column":105}},"597":{"start":{"line":1438,"column":24},"end":{"line":1438,"column":44}},"598":{"start":{"line":1439,"column":24},"end":{"line":1439,"column":38}},"599":{"start":{"line":1441,"column":20},"end":{"line":1441,"column":40}},"600":{"start":{"line":1444,"column":16},"end":{"line":1496,"column":17}},"601":{"start":{"line":1446,"column":24},"end":{"line":1448,"column":25}},"602":{"start":{"line":1447,"column":28},"end":{"line":1447,"column":49}},"603":{"start":{"line":1449,"column":24},"end":{"line":1449,"column":30}},"604":{"start":{"line":1452,"column":24},"end":{"line":1452,"column":41}},"605":{"start":{"line":1453,"column":24},"end":{"line":1453,"column":30}},"606":{"start":{"line":1456,"column":24},"end":{"line":1456,"column":37}},"607":{"start":{"line":1457,"column":24},"end":{"line":1457,"column":46}},"608":{"start":{"line":1458,"column":24},"end":{"line":1458,"column":93}},"609":{"start":{"line":1459,"column":24},"end":{"line":1459,"column":40}},"610":{"start":{"line":1460,"column":24},"end":{"line":1460,"column":30}},"611":{"start":{"line":1463,"column":24},"end":{"line":1465,"column":27}},"612":{"start":{"line":1466,"column":24},"end":{"line":1466,"column":30}},"613":{"start":{"line":1469,"column":24},"end":{"line":1474,"column":25}},"614":{"start":{"line":1470,"column":28},"end":{"line":1472,"column":29}},"615":{"start":{"line":1471,"column":32},"end":{"line":1471,"column":70}},"616":{"start":{"line":1473,"column":28},"end":{"line":1473,"column":122}},"617":{"start":{"line":1473,"column":71},"end":{"line":1473,"column":91}},"618":{"start":{"line":1476,"column":24},"end":{"line":1476,"column":66}},"619":{"start":{"line":1477,"column":24},"end":{"line":1477,"column":48}},"620":{"start":{"line":1479,"column":24},"end":{"line":1483,"column":25}},"621":{"start":{"line":1480,"column":28},"end":{"line":1480,"column":42}},"622":{"start":{"line":1482,"column":28},"end":{"line":1482,"column":44}},"623":{"start":{"line":1484,"column":24},"end":{"line":1484,"column":41}},"624":{"start":{"line":1485,"column":24},"end":{"line":1485,"column":30}},"625":{"start":{"line":1488,"column":24},"end":{"line":1488,"column":53}},"626":{"start":{"line":1489,"column":24},"end":{"line":1489,"column":74}},"627":{"start":{"line":1490,"column":24},"end":{"line":1490,"column":30}},"628":{"start":{"line":1493,"column":24},"end":{"line":1493,"column":69}},"629":{"start":{"line":1494,"column":24},"end":{"line":1494,"column":30}},"630":{"start":{"line":1498,"column":16},"end":{"line":1498,"column":56}},"631":{"start":{"line":1501,"column":8},"end":{"line":1503,"column":10}},"632":{"start":{"line":1502,"column":12},"end":{"line":1502,"column":54}},"633":{"start":{"line":1504,"column":8},"end":{"line":1541,"column":10}},"634":{"start":{"line":1505,"column":12},"end":{"line":1505,"column":95}},"635":{"start":{"line":1506,"column":12},"end":{"line":1537,"column":13}},"636":{"start":{"line":1507,"column":16},"end":{"line":1507,"column":139}},"637":{"start":{"line":1508,"column":16},"end":{"line":1534,"column":17}},"638":{"start":{"line":1509,"column":20},"end":{"line":1509,"column":72}},"639":{"start":{"line":1510,"column":23},"end":{"line":1534,"column":17}},"640":{"start":{"line":1511,"column":20},"end":{"line":1511,"column":72}},"641":{"start":{"line":1512,"column":23},"end":{"line":1534,"column":17}},"642":{"start":{"line":1513,"column":20},"end":{"line":1513,"column":57}},"643":{"start":{"line":1514,"column":23},"end":{"line":1534,"column":17}},"644":{"start":{"line":1515,"column":20},"end":{"line":1515,"column":61}},"645":{"start":{"line":1516,"column":23},"end":{"line":1534,"column":17}},"646":{"start":{"line":1517,"column":20},"end":{"line":1517,"column":61}},"647":{"start":{"line":1518,"column":23},"end":{"line":1534,"column":17}},"648":{"start":{"line":1519,"column":20},"end":{"line":1519,"column":42}},"649":{"start":{"line":1520,"column":20},"end":{"line":1520,"column":55}},"650":{"start":{"line":1521,"column":23},"end":{"line":1534,"column":17}},"651":{"start":{"line":1522,"column":20},"end":{"line":1522,"column":76}},"652":{"start":{"line":1523,"column":20},"end":{"line":1523,"column":33}},"653":{"start":{"line":1524,"column":23},"end":{"line":1534,"column":17}},"654":{"start":{"line":1525,"column":20},"end":{"line":1525,"column":74}},"655":{"start":{"line":1526,"column":23},"end":{"line":1534,"column":17}},"656":{"start":{"line":1527,"column":20},"end":{"line":1527,"column":57}},"657":{"start":{"line":1528,"column":23},"end":{"line":1534,"column":17}},"658":{"start":{"line":1529,"column":20},"end":{"line":1529,"column":73}},"659":{"start":{"line":1530,"column":23},"end":{"line":1534,"column":17}},"660":{"start":{"line":1531,"column":20},"end":{"line":1531,"column":64}},"661":{"start":{"line":1532,"column":23},"end":{"line":1534,"column":17}},"662":{"start":{"line":1533,"column":20},"end":{"line":1533,"column":70}},"663":{"start":{"line":1536,"column":16},"end":{"line":1536,"column":57}},"664":{"start":{"line":1538,"column":12},"end":{"line":1540,"column":20}},"665":{"start":{"line":1543,"column":8},"end":{"line":1549,"column":50}},"666":{"start":{"line":1544,"column":12},"end":{"line":1548,"column":13}},"667":{"start":{"line":1545,"column":16},"end":{"line":1547,"column":52}},"668":{"start":{"line":1553,"column":8},"end":{"line":1553,"column":32}},"669":{"start":{"line":1554,"column":8},"end":{"line":1568,"column":9}},"670":{"start":{"line":1555,"column":12},"end":{"line":1557,"column":13}},"671":{"start":{"line":1556,"column":16},"end":{"line":1556,"column":40}},"672":{"start":{"line":1558,"column":12},"end":{"line":1558,"column":40}},"673":{"start":{"line":1560,"column":12},"end":{"line":1566,"column":13}},"674":{"start":{"line":1561,"column":16},"end":{"line":1563,"column":19}},"675":{"start":{"line":1564,"column":19},"end":{"line":1566,"column":13}},"676":{"start":{"line":1565,"column":16},"end":{"line":1565,"column":57}},"677":{"start":{"line":1567,"column":12},"end":{"line":1567,"column":36}},"678":{"start":{"line":1572,"column":8},"end":{"line":1576,"column":9}},"679":{"start":{"line":1573,"column":12},"end":{"line":1575,"column":100}},"680":{"start":{"line":1577,"column":8},"end":{"line":1577,"column":38}},"681":{"start":{"line":1578,"column":8},"end":{"line":1578,"column":54}},"682":{"start":{"line":1579,"column":8},"end":{"line":1579,"column":55}},"683":{"start":{"line":1583,"column":8},"end":{"line":1598,"column":9}},"684":{"start":{"line":1584,"column":12},"end":{"line":1584,"column":22}},"685":{"start":{"line":1585,"column":12},"end":{"line":1585,"column":28}},"686":{"start":{"line":1586,"column":12},"end":{"line":1592,"column":14}},"687":{"start":{"line":1587,"column":16},"end":{"line":1591,"column":17}},"688":{"start":{"line":1588,"column":20},"end":{"line":1588,"column":111}},"689":{"start":{"line":1589,"column":20},"end":{"line":1589,"column":39}},"690":{"start":{"line":1590,"column":20},"end":{"line":1590,"column":91}},"691":{"start":{"line":1593,"column":12},"end":{"line":1596,"column":13}},"692":{"start":{"line":1594,"column":16},"end":{"line":1594,"column":26}},"693":{"start":{"line":1595,"column":16},"end":{"line":1595,"column":54}},"694":{"start":{"line":1597,"column":12},"end":{"line":1597,"column":42}},"695":{"start":{"line":1610,"column":8},"end":{"line":1613,"column":9}},"696":{"start":{"line":1611,"column":12},"end":{"line":1611,"column":26}},"697":{"start":{"line":1612,"column":12},"end":{"line":1612,"column":31}},"698":{"start":{"line":1614,"column":8},"end":{"line":1616,"column":9}},"699":{"start":{"line":1615,"column":12},"end":{"line":1615,"column":42}},"700":{"start":{"line":1617,"column":8},"end":{"line":1619,"column":9}},"701":{"start":{"line":1618,"column":12},"end":{"line":1618,"column":38}},"702":{"start":{"line":1621,"column":8},"end":{"line":1626,"column":11}},"703":{"start":{"line":1628,"column":8},"end":{"line":1632,"column":11}},"704":{"start":{"line":1629,"column":12},"end":{"line":1631,"column":13}},"705":{"start":{"line":1630,"column":16},"end":{"line":1630,"column":77}},"706":{"start":{"line":1636,"column":0},"end":{"line":1636,"column":23}}},"branchMap":{"1":{"line":9,"type":"cond-expr","locations":[{"start":{"line":9,"column":48},"end":{"line":9,"column":64}},{"start":{"line":9,"column":67},"end":{"line":9,"column":80}}]},"2":{"line":56,"type":"cond-expr","locations":[{"start":{"line":56,"column":70},"end":{"line":56,"column":121}},{"start":{"line":56,"column":124},"end":{"line":56,"column":132}}]},"3":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":15},"end":{"line":56,"column":37}},{"start":{"line":56,"column":41},"end":{"line":56,"column":67}}]},"4":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":8}},{"start":{"line":63,"column":8},"end":{"line":63,"column":8}}]},"5":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":11},"end":{"line":63,"column":18}},{"start":{"line":63,"column":22},"end":{"line":63,"column":60}}]},"6":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":78,"column":8}},{"start":{"line":78,"column":8},"end":{"line":78,"column":8}}]},"7":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":18},"end":{"line":81,"column":25}},{"start":{"line":81,"column":29},"end":{"line":81,"column":31}}]},"8":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":82,"column":8}},{"start":{"line":82,"column":8},"end":{"line":82,"column":8}}]},"9":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":86,"column":8}},{"start":{"line":86,"column":8},"end":{"line":86,"column":8}}]},"10":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":16},"end":{"line":89,"column":16}},{"start":{"line":89,"column":16},"end":{"line":89,"column":16}}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":19},"end":{"line":89,"column":36}},{"start":{"line":89,"column":40},"end":{"line":89,"column":54}}]},"12":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":36},"end":{"line":108,"column":41}},{"start":{"line":108,"column":45},"end":{"line":108,"column":49}}]},"13":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":8},"end":{"line":113,"column":8}},{"start":{"line":113,"column":8},"end":{"line":113,"column":8}}]},"14":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":11},"end":{"line":113,"column":39}},{"start":{"line":113,"column":43},"end":{"line":113,"column":76}}]},"15":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":15},"end":{"line":125,"column":15}},{"start":{"line":125,"column":15},"end":{"line":125,"column":15}}]},"16":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":8},"end":{"line":181,"column":8}},{"start":{"line":181,"column":8},"end":{"line":181,"column":8}}]},"17":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":8},"end":{"line":184,"column":8}},{"start":{"line":184,"column":8},"end":{"line":184,"column":8}}]},"18":{"line":193,"type":"switch","locations":[{"start":{"line":194,"column":12},"end":{"line":261,"column":13}},{"start":{"line":262,"column":12},"end":{"line":378,"column":13}},{"start":{"line":379,"column":12},"end":{"line":390,"column":13}},{"start":{"line":391,"column":12},"end":{"line":405,"column":13}},{"start":{"line":406,"column":12},"end":{"line":446,"column":13}},{"start":{"line":447,"column":12},"end":{"line":462,"column":13}},{"start":{"line":463,"column":12},"end":{"line":481,"column":13}},{"start":{"line":482,"column":12},"end":{"line":516,"column":13}},{"start":{"line":517,"column":12},"end":{"line":546,"column":13}},{"start":{"line":547,"column":12},"end":{"line":566,"column":13}},{"start":{"line":567,"column":12},"end":{"line":579,"column":13}},{"start":{"line":580,"column":12},"end":{"line":602,"column":13}},{"start":{"line":603,"column":12},"end":{"line":621,"column":13}},{"start":{"line":622,"column":12},"end":{"line":655,"column":13}},{"start":{"line":656,"column":12},"end":{"line":689,"column":13}},{"start":{"line":690,"column":12},"end":{"line":716,"column":13}},{"start":{"line":717,"column":12},"end":{"line":726,"column":13}},{"start":{"line":727,"column":12},"end":{"line":736,"column":13}},{"start":{"line":737,"column":12},"end":{"line":747,"column":13}},{"start":{"line":748,"column":12},"end":{"line":777,"column":13}},{"start":{"line":778,"column":12},"end":{"line":790,"column":13}},{"start":{"line":791,"column":12},"end":{"line":818,"column":13}},{"start":{"line":819,"column":12},"end":{"line":857,"column":13}},{"start":{"line":858,"column":12},"end":{"line":892,"column":13}},{"start":{"line":893,"column":12},"end":{"line":927,"column":13}},{"start":{"line":928,"column":12},"end":{"line":953,"column":13}},{"start":{"line":954,"column":12},"end":{"line":968,"column":13}},{"start":{"line":969,"column":12},"end":{"line":979,"column":13}},{"start":{"line":980,"column":12},"end":{"line":990,"column":13}},{"start":{"line":991,"column":12},"end":{"line":1003,"column":13}},{"start":{"line":1004,"column":12},"end":{"line":1012,"column":13}},{"start":{"line":1013,"column":12},"end":{"line":1040,"column":13}},{"start":{"line":1041,"column":12},"end":{"line":1080,"column":13}},{"start":{"line":1081,"column":12},"end":{"line":1081,"column":27}},{"start":{"line":1082,"column":12},"end":{"line":1178,"column":13}},{"start":{"line":1179,"column":12},"end":{"line":1185,"column":13}},{"start":{"line":1186,"column":12},"end":{"line":1189,"column":13}},{"start":{"line":1190,"column":12},"end":{"line":1216,"column":13}},{"start":{"line":1217,"column":12},"end":{"line":1228,"column":13}},{"start":{"line":1229,"column":12},"end":{"line":1242,"column":13}},{"start":{"line":1243,"column":12},"end":{"line":1260,"column":13}},{"start":{"line":1261,"column":12},"end":{"line":1275,"column":13}},{"start":{"line":1276,"column":12},"end":{"line":1283,"column":13}},{"start":{"line":1284,"column":12},"end":{"line":1284,"column":31}},{"start":{"line":1285,"column":12},"end":{"line":1285,"column":45}},{"start":{"line":1286,"column":12},"end":{"line":1286,"column":40}},{"start":{"line":1287,"column":12},"end":{"line":1289,"column":13}},{"start":{"line":1290,"column":12},"end":{"line":1299,"column":13}}]},"19":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":16},"end":{"line":195,"column":16}},{"start":{"line":195,"column":16},"end":{"line":195,"column":16}}]},"20":{"line":198,"type":"if","locations":[{"start":{"line":198,"column":20},"end":{"line":198,"column":20}},{"start":{"line":198,"column":20},"end":{"line":198,"column":20}}]},"21":{"line":198,"type":"binary-expr","locations":[{"start":{"line":198,"column":23},"end":{"line":198,"column":27}},{"start":{"line":198,"column":32},"end":{"line":198,"column":72}},{"start":{"line":198,"column":76},"end":{"line":198,"column":112}}]},"22":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":20},"end":{"line":205,"column":20}},{"start":{"line":205,"column":20},"end":{"line":205,"column":20}}]},"23":{"line":205,"type":"binary-expr","locations":[{"start":{"line":205,"column":23},"end":{"line":205,"column":28}},{"start":{"line":205,"column":32},"end":{"line":205,"column":39}}]},"24":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":16},"end":{"line":219,"column":16}},{"start":{"line":219,"column":16},"end":{"line":219,"column":16}}]},"25":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":20},"end":{"line":222,"column":20}},{"start":{"line":222,"column":20},"end":{"line":222,"column":20}}]},"26":{"line":244,"type":"if","locations":[{"start":{"line":244,"column":16},"end":{"line":244,"column":16}},{"start":{"line":244,"column":16},"end":{"line":244,"column":16}}]},"27":{"line":250,"type":"if","locations":[{"start":{"line":250,"column":16},"end":{"line":250,"column":16}},{"start":{"line":250,"column":16},"end":{"line":250,"column":16}}]},"28":{"line":250,"type":"binary-expr","locations":[{"start":{"line":250,"column":19},"end":{"line":250,"column":25}},{"start":{"line":250,"column":30},"end":{"line":250,"column":63}},{"start":{"line":250,"column":68},"end":{"line":250,"column":97}},{"start":{"line":250,"column":102},"end":{"line":250,"column":114}},{"start":{"line":250,"column":118},"end":{"line":250,"column":132}},{"start":{"line":250,"column":136},"end":{"line":250,"column":175}},{"start":{"line":250,"column":179},"end":{"line":250,"column":218}},{"start":{"line":250,"column":222},"end":{"line":250,"column":259}}]},"29":{"line":256,"type":"if","locations":[{"start":{"line":256,"column":16},"end":{"line":256,"column":16}},{"start":{"line":256,"column":16},"end":{"line":256,"column":16}}]},"30":{"line":256,"type":"binary-expr","locations":[{"start":{"line":256,"column":20},"end":{"line":256,"column":27}},{"start":{"line":256,"column":31},"end":{"line":256,"column":53}},{"start":{"line":256,"column":58},"end":{"line":256,"column":69}}]},"31":{"line":263,"type":"if","locations":[{"start":{"line":263,"column":16},"end":{"line":263,"column":16}},{"start":{"line":263,"column":16},"end":{"line":263,"column":16}}]},"32":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":20},"end":{"line":265,"column":20}},{"start":{"line":265,"column":20},"end":{"line":265,"column":20}}]},"33":{"line":268,"type":"binary-expr","locations":[{"start":{"line":268,"column":40},"end":{"line":268,"column":60}},{"start":{"line":268,"column":64},"end":{"line":268,"column":88}}]},"34":{"line":269,"type":"if","locations":[{"start":{"line":269,"column":28},"end":{"line":269,"column":28}},{"start":{"line":269,"column":28},"end":{"line":269,"column":28}}]},"35":{"line":269,"type":"binary-expr","locations":[{"start":{"line":269,"column":31},"end":{"line":269,"column":35}},{"start":{"line":269,"column":39},"end":{"line":269,"column":72}}]},"36":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":24},"end":{"line":274,"column":24}},{"start":{"line":274,"column":24},"end":{"line":274,"column":24}}]},"37":{"line":276,"type":"binary-expr","locations":[{"start":{"line":276,"column":44},"end":{"line":276,"column":66}},{"start":{"line":276,"column":70},"end":{"line":276,"column":96}}]},"38":{"line":277,"type":"if","locations":[{"start":{"line":277,"column":32},"end":{"line":277,"column":32}},{"start":{"line":277,"column":32},"end":{"line":277,"column":32}}]},"39":{"line":277,"type":"binary-expr","locations":[{"start":{"line":277,"column":35},"end":{"line":277,"column":39}},{"start":{"line":277,"column":43},"end":{"line":277,"column":76}}]},"40":{"line":282,"type":"if","locations":[{"start":{"line":282,"column":28},"end":{"line":282,"column":28}},{"start":{"line":282,"column":28},"end":{"line":282,"column":28}}]},"41":{"line":289,"type":"if","locations":[{"start":{"line":289,"column":24},"end":{"line":289,"column":24}},{"start":{"line":289,"column":24},"end":{"line":289,"column":24}}]},"42":{"line":289,"type":"binary-expr","locations":[{"start":{"line":289,"column":27},"end":{"line":289,"column":40}},{"start":{"line":289,"column":44},"end":{"line":289,"column":61}}]},"43":{"line":293,"type":"binary-expr","locations":[{"start":{"line":293,"column":25},"end":{"line":293,"column":37}},{"start":{"line":293,"column":41},"end":{"line":293,"column":57}}]},"44":{"line":298,"type":"if","locations":[{"start":{"line":298,"column":16},"end":{"line":298,"column":16}},{"start":{"line":298,"column":16},"end":{"line":298,"column":16}}]},"45":{"line":301,"type":"if","locations":[{"start":{"line":301,"column":16},"end":{"line":301,"column":16}},{"start":{"line":301,"column":16},"end":{"line":301,"column":16}}]},"46":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":16},"end":{"line":306,"column":16}},{"start":{"line":306,"column":16},"end":{"line":306,"column":16}}]},"47":{"line":307,"type":"binary-expr","locations":[{"start":{"line":307,"column":67},"end":{"line":307,"column":85}},{"start":{"line":307,"column":89},"end":{"line":307,"column":126}}]},"48":{"line":308,"type":"if","locations":[{"start":{"line":308,"column":20},"end":{"line":308,"column":20}},{"start":{"line":308,"column":20},"end":{"line":308,"column":20}}]},"49":{"line":323,"type":"if","locations":[{"start":{"line":323,"column":16},"end":{"line":323,"column":16}},{"start":{"line":323,"column":16},"end":{"line":323,"column":16}}]},"50":{"line":325,"type":"if","locations":[{"start":{"line":325,"column":20},"end":{"line":325,"column":20}},{"start":{"line":325,"column":20},"end":{"line":325,"column":20}}]},"51":{"line":325,"type":"binary-expr","locations":[{"start":{"line":325,"column":23},"end":{"line":325,"column":38}},{"start":{"line":325,"column":42},"end":{"line":325,"column":91}}]},"52":{"line":329,"type":"if","locations":[{"start":{"line":329,"column":16},"end":{"line":329,"column":16}},{"start":{"line":329,"column":16},"end":{"line":329,"column":16}}]},"53":{"line":331,"type":"if","locations":[{"start":{"line":331,"column":20},"end":{"line":331,"column":20}},{"start":{"line":331,"column":20},"end":{"line":331,"column":20}}]},"54":{"line":334,"type":"if","locations":[{"start":{"line":334,"column":20},"end":{"line":334,"column":20}},{"start":{"line":334,"column":20},"end":{"line":334,"column":20}}]},"55":{"line":334,"type":"binary-expr","locations":[{"start":{"line":334,"column":23},"end":{"line":334,"column":42}},{"start":{"line":334,"column":47},"end":{"line":334,"column":99}},{"start":{"line":334,"column":104},"end":{"line":334,"column":125}}]},"56":{"line":335,"type":"if","locations":[{"start":{"line":335,"column":24},"end":{"line":335,"column":24}},{"start":{"line":335,"column":24},"end":{"line":335,"column":24}}]},"57":{"line":354,"type":"if","locations":[{"start":{"line":354,"column":27},"end":{"line":354,"column":27}},{"start":{"line":354,"column":27},"end":{"line":354,"column":27}}]},"58":{"line":364,"type":"if","locations":[{"start":{"line":364,"column":16},"end":{"line":364,"column":16}},{"start":{"line":364,"column":16},"end":{"line":364,"column":16}}]},"59":{"line":364,"type":"binary-expr","locations":[{"start":{"line":364,"column":19},"end":{"line":364,"column":48}},{"start":{"line":364,"column":52},"end":{"line":364,"column":81}},{"start":{"line":364,"column":85},"end":{"line":364,"column":122}},{"start":{"line":364,"column":126},"end":{"line":364,"column":163}}]},"60":{"line":380,"type":"if","locations":[{"start":{"line":380,"column":16},"end":{"line":380,"column":16}},{"start":{"line":380,"column":16},"end":{"line":380,"column":16}}]},"61":{"line":393,"type":"if","locations":[{"start":{"line":393,"column":16},"end":{"line":393,"column":16}},{"start":{"line":393,"column":16},"end":{"line":393,"column":16}}]},"62":{"line":408,"type":"if","locations":[{"start":{"line":408,"column":16},"end":{"line":408,"column":16}},{"start":{"line":408,"column":16},"end":{"line":408,"column":16}}]},"63":{"line":415,"type":"if","locations":[{"start":{"line":415,"column":16},"end":{"line":415,"column":16}},{"start":{"line":415,"column":16},"end":{"line":415,"column":16}}]},"64":{"line":449,"type":"if","locations":[{"start":{"line":449,"column":16},"end":{"line":449,"column":16}},{"start":{"line":449,"column":16},"end":{"line":449,"column":16}}]},"65":{"line":457,"type":"binary-expr","locations":[{"start":{"line":457,"column":50},"end":{"line":457,"column":83}},{"start":{"line":457,"column":87},"end":{"line":460,"column":17}}]},"66":{"line":465,"type":"if","locations":[{"start":{"line":465,"column":16},"end":{"line":465,"column":16}},{"start":{"line":465,"column":16},"end":{"line":465,"column":16}}]},"67":{"line":474,"type":"binary-expr","locations":[{"start":{"line":474,"column":80},"end":{"line":476,"column":18}},{"start":{"line":476,"column":22},"end":{"line":479,"column":17}}]},"68":{"line":484,"type":"if","locations":[{"start":{"line":484,"column":16},"end":{"line":484,"column":16}},{"start":{"line":484,"column":16},"end":{"line":484,"column":16}}]},"69":{"line":488,"type":"if","locations":[{"start":{"line":488,"column":16},"end":{"line":488,"column":16}},{"start":{"line":488,"column":16},"end":{"line":488,"column":16}}]},"70":{"line":489,"type":"cond-expr","locations":[{"start":{"line":489,"column":55},"end":{"line":489,"column":100}},{"start":{"line":489,"column":103},"end":{"line":489,"column":122}}]},"71":{"line":490,"type":"if","locations":[{"start":{"line":490,"column":20},"end":{"line":490,"column":20}},{"start":{"line":490,"column":20},"end":{"line":490,"column":20}}]},"72":{"line":492,"type":"if","locations":[{"start":{"line":492,"column":24},"end":{"line":492,"column":24}},{"start":{"line":492,"column":24},"end":{"line":492,"column":24}}]},"73":{"line":511,"type":"binary-expr","locations":[{"start":{"line":511,"column":55},"end":{"line":511,"column":62}},{"start":{"line":511,"column":66},"end":{"line":514,"column":17}}]},"74":{"line":519,"type":"if","locations":[{"start":{"line":519,"column":16},"end":{"line":519,"column":16}},{"start":{"line":519,"column":16},"end":{"line":519,"column":16}}]},"75":{"line":523,"type":"if","locations":[{"start":{"line":523,"column":16},"end":{"line":523,"column":16}},{"start":{"line":523,"column":16},"end":{"line":523,"column":16}}]},"76":{"line":524,"type":"cond-expr","locations":[{"start":{"line":524,"column":55},"end":{"line":524,"column":100}},{"start":{"line":524,"column":103},"end":{"line":524,"column":122}}]},"77":{"line":525,"type":"if","locations":[{"start":{"line":525,"column":20},"end":{"line":525,"column":20}},{"start":{"line":525,"column":20},"end":{"line":525,"column":20}}]},"78":{"line":527,"type":"if","locations":[{"start":{"line":527,"column":24},"end":{"line":527,"column":24}},{"start":{"line":527,"column":24},"end":{"line":527,"column":24}}]},"79":{"line":541,"type":"binary-expr","locations":[{"start":{"line":541,"column":58},"end":{"line":541,"column":65}},{"start":{"line":541,"column":69},"end":{"line":544,"column":17}}]},"80":{"line":549,"type":"if","locations":[{"start":{"line":549,"column":16},"end":{"line":549,"column":16}},{"start":{"line":549,"column":16},"end":{"line":549,"column":16}}]},"81":{"line":561,"type":"binary-expr","locations":[{"start":{"line":561,"column":61},"end":{"line":561,"column":102}},{"start":{"line":561,"column":106},"end":{"line":564,"column":17}}]},"82":{"line":584,"type":"if","locations":[{"start":{"line":584,"column":16},"end":{"line":584,"column":16}},{"start":{"line":584,"column":16},"end":{"line":584,"column":16}}]},"83":{"line":604,"type":"if","locations":[{"start":{"line":604,"column":16},"end":{"line":604,"column":16}},{"start":{"line":604,"column":16},"end":{"line":604,"column":16}}]},"84":{"line":616,"type":"binary-expr","locations":[{"start":{"line":616,"column":61},"end":{"line":616,"column":91}},{"start":{"line":616,"column":95},"end":{"line":619,"column":17}}]},"85":{"line":623,"type":"if","locations":[{"start":{"line":623,"column":16},"end":{"line":623,"column":16}},{"start":{"line":623,"column":16},"end":{"line":623,"column":16}}]},"86":{"line":625,"type":"if","locations":[{"start":{"line":625,"column":20},"end":{"line":625,"column":20}},{"start":{"line":625,"column":20},"end":{"line":625,"column":20}}]},"87":{"line":626,"type":"if","locations":[{"start":{"line":626,"column":24},"end":{"line":626,"column":24}},{"start":{"line":626,"column":24},"end":{"line":626,"column":24}}]},"88":{"line":693,"type":"if","locations":[{"start":{"line":693,"column":16},"end":{"line":693,"column":16}},{"start":{"line":693,"column":16},"end":{"line":693,"column":16}}]},"89":{"line":698,"type":"if","locations":[{"start":{"line":698,"column":16},"end":{"line":698,"column":16}},{"start":{"line":698,"column":16},"end":{"line":698,"column":16}}]},"90":{"line":711,"type":"binary-expr","locations":[{"start":{"line":711,"column":52},"end":{"line":711,"column":57}},{"start":{"line":711,"column":61},"end":{"line":713,"column":21}}]},"91":{"line":752,"type":"if","locations":[{"start":{"line":752,"column":16},"end":{"line":752,"column":16}},{"start":{"line":752,"column":16},"end":{"line":752,"column":16}}]},"92":{"line":786,"type":"if","locations":[{"start":{"line":786,"column":16},"end":{"line":786,"column":16}},{"start":{"line":786,"column":16},"end":{"line":786,"column":16}}]},"93":{"line":792,"type":"if","locations":[{"start":{"line":792,"column":16},"end":{"line":792,"column":16}},{"start":{"line":792,"column":16},"end":{"line":792,"column":16}}]},"94":{"line":792,"type":"binary-expr","locations":[{"start":{"line":792,"column":19},"end":{"line":792,"column":46}},{"start":{"line":792,"column":50},"end":{"line":792,"column":69}}]},"95":{"line":793,"type":"if","locations":[{"start":{"line":793,"column":20},"end":{"line":793,"column":20}},{"start":{"line":793,"column":20},"end":{"line":793,"column":20}}]},"96":{"line":802,"type":"if","locations":[{"start":{"line":802,"column":23},"end":{"line":802,"column":23}},{"start":{"line":802,"column":23},"end":{"line":802,"column":23}}]},"97":{"line":802,"type":"binary-expr","locations":[{"start":{"line":802,"column":26},"end":{"line":802,"column":45}},{"start":{"line":802,"column":49},"end":{"line":802,"column":68}}]},"98":{"line":804,"type":"if","locations":[{"start":{"line":804,"column":20},"end":{"line":804,"column":20}},{"start":{"line":804,"column":20},"end":{"line":804,"column":20}}]},"99":{"line":810,"type":"if","locations":[{"start":{"line":810,"column":23},"end":{"line":810,"column":23}},{"start":{"line":810,"column":23},"end":{"line":810,"column":23}}]},"100":{"line":811,"type":"if","locations":[{"start":{"line":811,"column":20},"end":{"line":811,"column":20}},{"start":{"line":811,"column":20},"end":{"line":811,"column":20}}]},"101":{"line":821,"type":"if","locations":[{"start":{"line":821,"column":16},"end":{"line":821,"column":16}},{"start":{"line":821,"column":16},"end":{"line":821,"column":16}}]},"102":{"line":824,"type":"if","locations":[{"start":{"line":824,"column":16},"end":{"line":824,"column":16}},{"start":{"line":824,"column":16},"end":{"line":824,"column":16}}]},"103":{"line":825,"type":"if","locations":[{"start":{"line":825,"column":20},"end":{"line":825,"column":20}},{"start":{"line":825,"column":20},"end":{"line":825,"column":20}}]},"104":{"line":834,"type":"if","locations":[{"start":{"line":834,"column":16},"end":{"line":834,"column":16}},{"start":{"line":834,"column":16},"end":{"line":834,"column":16}}]},"105":{"line":834,"type":"binary-expr","locations":[{"start":{"line":834,"column":19},"end":{"line":834,"column":37}},{"start":{"line":834,"column":41},"end":{"line":834,"column":59}}]},"106":{"line":859,"type":"if","locations":[{"start":{"line":859,"column":16},"end":{"line":859,"column":16}},{"start":{"line":859,"column":16},"end":{"line":859,"column":16}}]},"107":{"line":859,"type":"binary-expr","locations":[{"start":{"line":859,"column":19},"end":{"line":859,"column":38}},{"start":{"line":859,"column":42},"end":{"line":859,"column":69}}]},"108":{"line":860,"type":"if","locations":[{"start":{"line":860,"column":20},"end":{"line":860,"column":20}},{"start":{"line":860,"column":20},"end":{"line":860,"column":20}}]},"109":{"line":862,"type":"if","locations":[{"start":{"line":862,"column":24},"end":{"line":862,"column":24}},{"start":{"line":862,"column":24},"end":{"line":862,"column":24}}]},"110":{"line":872,"type":"if","locations":[{"start":{"line":872,"column":23},"end":{"line":872,"column":23}},{"start":{"line":872,"column":23},"end":{"line":872,"column":23}}]},"111":{"line":872,"type":"binary-expr","locations":[{"start":{"line":872,"column":26},"end":{"line":872,"column":45}},{"start":{"line":872,"column":49},"end":{"line":872,"column":68}}]},"112":{"line":875,"type":"if","locations":[{"start":{"line":875,"column":20},"end":{"line":875,"column":20}},{"start":{"line":875,"column":20},"end":{"line":875,"column":20}}]},"113":{"line":878,"type":"if","locations":[{"start":{"line":878,"column":20},"end":{"line":878,"column":20}},{"start":{"line":878,"column":20},"end":{"line":878,"column":20}}]},"114":{"line":884,"type":"if","locations":[{"start":{"line":884,"column":23},"end":{"line":884,"column":23}},{"start":{"line":884,"column":23},"end":{"line":884,"column":23}}]},"115":{"line":885,"type":"if","locations":[{"start":{"line":885,"column":20},"end":{"line":885,"column":20}},{"start":{"line":885,"column":20},"end":{"line":885,"column":20}}]},"116":{"line":896,"type":"if","locations":[{"start":{"line":896,"column":16},"end":{"line":896,"column":16}},{"start":{"line":896,"column":16},"end":{"line":896,"column":16}}]},"117":{"line":904,"type":"if","locations":[{"start":{"line":904,"column":24},"end":{"line":904,"column":24}},{"start":{"line":904,"column":24},"end":{"line":904,"column":24}}]},"118":{"line":908,"type":"if","locations":[{"start":{"line":908,"column":24},"end":{"line":908,"column":24}},{"start":{"line":908,"column":24},"end":{"line":908,"column":24}}]},"119":{"line":915,"type":"if","locations":[{"start":{"line":915,"column":20},"end":{"line":915,"column":20}},{"start":{"line":915,"column":20},"end":{"line":915,"column":20}}]},"120":{"line":930,"type":"if","locations":[{"start":{"line":930,"column":16},"end":{"line":930,"column":16}},{"start":{"line":930,"column":16},"end":{"line":930,"column":16}}]},"121":{"line":956,"type":"if","locations":[{"start":{"line":956,"column":16},"end":{"line":956,"column":16}},{"start":{"line":956,"column":16},"end":{"line":956,"column":16}}]},"122":{"line":1015,"type":"if","locations":[{"start":{"line":1015,"column":16},"end":{"line":1015,"column":16}},{"start":{"line":1015,"column":16},"end":{"line":1015,"column":16}}]},"123":{"line":1016,"type":"if","locations":[{"start":{"line":1016,"column":20},"end":{"line":1016,"column":20}},{"start":{"line":1016,"column":20},"end":{"line":1016,"column":20}}]},"124":{"line":1048,"type":"if","locations":[{"start":{"line":1048,"column":20},"end":{"line":1048,"column":20}},{"start":{"line":1048,"column":20},"end":{"line":1048,"column":20}}]},"125":{"line":1050,"type":"if","locations":[{"start":{"line":1050,"column":24},"end":{"line":1050,"column":24}},{"start":{"line":1050,"column":24},"end":{"line":1050,"column":24}}]},"126":{"line":1059,"type":"if","locations":[{"start":{"line":1059,"column":16},"end":{"line":1059,"column":16}},{"start":{"line":1059,"column":16},"end":{"line":1059,"column":16}}]},"127":{"line":1059,"type":"binary-expr","locations":[{"start":{"line":1059,"column":19},"end":{"line":1059,"column":43}},{"start":{"line":1059,"column":47},"end":{"line":1059,"column":82}}]},"128":{"line":1061,"type":"if","locations":[{"start":{"line":1061,"column":24},"end":{"line":1061,"column":24}},{"start":{"line":1061,"column":24},"end":{"line":1061,"column":24}}]},"129":{"line":1066,"type":"if","locations":[{"start":{"line":1066,"column":24},"end":{"line":1066,"column":24}},{"start":{"line":1066,"column":24},"end":{"line":1066,"column":24}}]},"130":{"line":1068,"type":"if","locations":[{"start":{"line":1068,"column":28},"end":{"line":1068,"column":28}},{"start":{"line":1068,"column":28},"end":{"line":1068,"column":28}}]},"131":{"line":1068,"type":"binary-expr","locations":[{"start":{"line":1068,"column":31},"end":{"line":1068,"column":71}},{"start":{"line":1068,"column":75},"end":{"line":1068,"column":112}},{"start":{"line":1068,"column":116},"end":{"line":1068,"column":192}}]},"132":{"line":1068,"type":"cond-expr","locations":[{"start":{"line":1068,"column":166},"end":{"line":1068,"column":182}},{"start":{"line":1068,"column":185},"end":{"line":1068,"column":191}}]},"133":{"line":1091,"type":"if","locations":[{"start":{"line":1091,"column":16},"end":{"line":1091,"column":16}},{"start":{"line":1091,"column":16},"end":{"line":1091,"column":16}}]},"134":{"line":1105,"type":"if","locations":[{"start":{"line":1105,"column":16},"end":{"line":1105,"column":16}},{"start":{"line":1105,"column":16},"end":{"line":1105,"column":16}}]},"135":{"line":1107,"type":"if","locations":[{"start":{"line":1107,"column":20},"end":{"line":1107,"column":20}},{"start":{"line":1107,"column":20},"end":{"line":1107,"column":20}}]},"136":{"line":1116,"type":"if","locations":[{"start":{"line":1116,"column":16},"end":{"line":1116,"column":16}},{"start":{"line":1116,"column":16},"end":{"line":1116,"column":16}}]},"137":{"line":1123,"type":"if","locations":[{"start":{"line":1123,"column":20},"end":{"line":1123,"column":20}},{"start":{"line":1123,"column":20},"end":{"line":1123,"column":20}}]},"138":{"line":1132,"type":"if","locations":[{"start":{"line":1132,"column":20},"end":{"line":1132,"column":20}},{"start":{"line":1132,"column":20},"end":{"line":1132,"column":20}}]},"139":{"line":1132,"type":"binary-expr","locations":[{"start":{"line":1132,"column":23},"end":{"line":1132,"column":49}},{"start":{"line":1132,"column":53},"end":{"line":1132,"column":71}}]},"140":{"line":1135,"type":"if","locations":[{"start":{"line":1135,"column":27},"end":{"line":1135,"column":27}},{"start":{"line":1135,"column":27},"end":{"line":1135,"column":27}}]},"141":{"line":1142,"type":"if","locations":[{"start":{"line":1142,"column":16},"end":{"line":1142,"column":16}},{"start":{"line":1142,"column":16},"end":{"line":1142,"column":16}}]},"142":{"line":1148,"type":"if","locations":[{"start":{"line":1148,"column":16},"end":{"line":1148,"column":16}},{"start":{"line":1148,"column":16},"end":{"line":1148,"column":16}}]},"143":{"line":1150,"type":"if","locations":[{"start":{"line":1150,"column":24},"end":{"line":1150,"column":24}},{"start":{"line":1150,"column":24},"end":{"line":1150,"column":24}}]},"144":{"line":1157,"type":"if","locations":[{"start":{"line":1157,"column":16},"end":{"line":1157,"column":16}},{"start":{"line":1157,"column":16},"end":{"line":1157,"column":16}}]},"145":{"line":1169,"type":"if","locations":[{"start":{"line":1169,"column":16},"end":{"line":1169,"column":16}},{"start":{"line":1169,"column":16},"end":{"line":1169,"column":16}}]},"146":{"line":1169,"type":"binary-expr","locations":[{"start":{"line":1169,"column":19},"end":{"line":1169,"column":57}},{"start":{"line":1169,"column":61},"end":{"line":1169,"column":87}}]},"147":{"line":1191,"type":"if","locations":[{"start":{"line":1191,"column":16},"end":{"line":1191,"column":16}},{"start":{"line":1191,"column":16},"end":{"line":1191,"column":16}}]},"148":{"line":1195,"type":"if","locations":[{"start":{"line":1195,"column":16},"end":{"line":1195,"column":16}},{"start":{"line":1195,"column":16},"end":{"line":1195,"column":16}}]},"149":{"line":1218,"type":"if","locations":[{"start":{"line":1218,"column":16},"end":{"line":1218,"column":16}},{"start":{"line":1218,"column":16},"end":{"line":1218,"column":16}}]},"150":{"line":1245,"type":"if","locations":[{"start":{"line":1245,"column":16},"end":{"line":1245,"column":16}},{"start":{"line":1245,"column":16},"end":{"line":1245,"column":16}}]},"151":{"line":1264,"type":"if","locations":[{"start":{"line":1264,"column":20},"end":{"line":1264,"column":20}},{"start":{"line":1264,"column":20},"end":{"line":1264,"column":20}}]},"152":{"line":1269,"type":"if","locations":[{"start":{"line":1269,"column":20},"end":{"line":1269,"column":20}},{"start":{"line":1269,"column":20},"end":{"line":1269,"column":20}}]},"153":{"line":1269,"type":"binary-expr","locations":[{"start":{"line":1269,"column":23},"end":{"line":1269,"column":30}},{"start":{"line":1269,"column":34},"end":{"line":1269,"column":56}}]},"154":{"line":1277,"type":"if","locations":[{"start":{"line":1277,"column":16},"end":{"line":1277,"column":16}},{"start":{"line":1277,"column":16},"end":{"line":1277,"column":16}}]},"155":{"line":1305,"type":"if","locations":[{"start":{"line":1305,"column":8},"end":{"line":1305,"column":8}},{"start":{"line":1305,"column":8},"end":{"line":1305,"column":8}}]},"156":{"line":1309,"type":"if","locations":[{"start":{"line":1309,"column":15},"end":{"line":1309,"column":15}},{"start":{"line":1309,"column":15},"end":{"line":1309,"column":15}}]},"157":{"line":1324,"type":"if","locations":[{"start":{"line":1324,"column":8},"end":{"line":1324,"column":8}},{"start":{"line":1324,"column":8},"end":{"line":1324,"column":8}}]},"158":{"line":1328,"type":"if","locations":[{"start":{"line":1328,"column":8},"end":{"line":1328,"column":8}},{"start":{"line":1328,"column":8},"end":{"line":1328,"column":8}}]},"159":{"line":1328,"type":"binary-expr","locations":[{"start":{"line":1328,"column":11},"end":{"line":1328,"column":42}},{"start":{"line":1328,"column":46},"end":{"line":1328,"column":84}}]},"160":{"line":1335,"type":"if","locations":[{"start":{"line":1335,"column":8},"end":{"line":1335,"column":8}},{"start":{"line":1335,"column":8},"end":{"line":1335,"column":8}}]},"161":{"line":1339,"type":"if","locations":[{"start":{"line":1339,"column":8},"end":{"line":1339,"column":8}},{"start":{"line":1339,"column":8},"end":{"line":1339,"column":8}}]},"162":{"line":1340,"type":"if","locations":[{"start":{"line":1340,"column":12},"end":{"line":1340,"column":12}},{"start":{"line":1340,"column":12},"end":{"line":1340,"column":12}}]},"163":{"line":1340,"type":"binary-expr","locations":[{"start":{"line":1340,"column":15},"end":{"line":1340,"column":55}},{"start":{"line":1340,"column":59},"end":{"line":1340,"column":84}}]},"164":{"line":1351,"type":"if","locations":[{"start":{"line":1351,"column":8},"end":{"line":1351,"column":8}},{"start":{"line":1351,"column":8},"end":{"line":1351,"column":8}}]},"165":{"line":1355,"type":"if","locations":[{"start":{"line":1355,"column":15},"end":{"line":1355,"column":15}},{"start":{"line":1355,"column":15},"end":{"line":1355,"column":15}}]},"166":{"line":1366,"type":"binary-expr","locations":[{"start":{"line":1366,"column":19},"end":{"line":1366,"column":24}},{"start":{"line":1366,"column":28},"end":{"line":1366,"column":30}}]},"167":{"line":1367,"type":"binary-expr","locations":[{"start":{"line":1367,"column":19},"end":{"line":1367,"column":24}},{"start":{"line":1367,"column":28},"end":{"line":1367,"column":29}}]},"168":{"line":1372,"type":"if","locations":[{"start":{"line":1372,"column":8},"end":{"line":1372,"column":8}},{"start":{"line":1372,"column":8},"end":{"line":1372,"column":8}}]},"169":{"line":1373,"type":"if","locations":[{"start":{"line":1373,"column":12},"end":{"line":1373,"column":12}},{"start":{"line":1373,"column":12},"end":{"line":1373,"column":12}}]},"170":{"line":1379,"type":"if","locations":[{"start":{"line":1379,"column":12},"end":{"line":1379,"column":12}},{"start":{"line":1379,"column":12},"end":{"line":1379,"column":12}}]},"171":{"line":1382,"type":"if","locations":[{"start":{"line":1382,"column":12},"end":{"line":1382,"column":12}},{"start":{"line":1382,"column":12},"end":{"line":1382,"column":12}}]},"172":{"line":1388,"type":"if","locations":[{"start":{"line":1388,"column":12},"end":{"line":1388,"column":12}},{"start":{"line":1388,"column":12},"end":{"line":1388,"column":12}}]},"173":{"line":1403,"type":"if","locations":[{"start":{"line":1403,"column":12},"end":{"line":1403,"column":12}},{"start":{"line":1403,"column":12},"end":{"line":1403,"column":12}}]},"174":{"line":1419,"type":"if","locations":[{"start":{"line":1419,"column":16},"end":{"line":1419,"column":16}},{"start":{"line":1419,"column":16},"end":{"line":1419,"column":16}}]},"175":{"line":1429,"type":"if","locations":[{"start":{"line":1429,"column":16},"end":{"line":1429,"column":16}},{"start":{"line":1429,"column":16},"end":{"line":1429,"column":16}}]},"176":{"line":1430,"type":"if","locations":[{"start":{"line":1430,"column":20},"end":{"line":1430,"column":20}},{"start":{"line":1430,"column":20},"end":{"line":1430,"column":20}}]},"177":{"line":1430,"type":"binary-expr","locations":[{"start":{"line":1430,"column":23},"end":{"line":1430,"column":46}},{"start":{"line":1430,"column":50},"end":{"line":1430,"column":57}}]},"178":{"line":1444,"type":"switch","locations":[{"start":{"line":1445,"column":20},"end":{"line":1450,"column":21}},{"start":{"line":1451,"column":20},"end":{"line":1454,"column":21}},{"start":{"line":1455,"column":20},"end":{"line":1461,"column":21}},{"start":{"line":1462,"column":20},"end":{"line":1467,"column":21}},{"start":{"line":1468,"column":20},"end":{"line":1486,"column":21}},{"start":{"line":1487,"column":20},"end":{"line":1491,"column":21}},{"start":{"line":1492,"column":20},"end":{"line":1495,"column":21}}]},"179":{"line":1446,"type":"if","locations":[{"start":{"line":1446,"column":24},"end":{"line":1446,"column":24}},{"start":{"line":1446,"column":24},"end":{"line":1446,"column":24}}]},"180":{"line":1469,"type":"if","locations":[{"start":{"line":1469,"column":24},"end":{"line":1469,"column":24}},{"start":{"line":1469,"column":24},"end":{"line":1469,"column":24}}]},"181":{"line":1470,"type":"if","locations":[{"start":{"line":1470,"column":28},"end":{"line":1470,"column":28}},{"start":{"line":1470,"column":28},"end":{"line":1470,"column":28}}]},"182":{"line":1479,"type":"if","locations":[{"start":{"line":1479,"column":24},"end":{"line":1479,"column":24}},{"start":{"line":1479,"column":24},"end":{"line":1479,"column":24}}]},"183":{"line":1505,"type":"cond-expr","locations":[{"start":{"line":1505,"column":44},"end":{"line":1505,"column":48}},{"start":{"line":1505,"column":51},"end":{"line":1505,"column":94}}]},"184":{"line":1506,"type":"if","locations":[{"start":{"line":1506,"column":12},"end":{"line":1506,"column":12}},{"start":{"line":1506,"column":12},"end":{"line":1506,"column":12}}]},"185":{"line":1507,"type":"cond-expr","locations":[{"start":{"line":1507,"column":66},"end":{"line":1507,"column":73}},{"start":{"line":1507,"column":76},"end":{"line":1507,"column":85}}]},"186":{"line":1508,"type":"if","locations":[{"start":{"line":1508,"column":16},"end":{"line":1508,"column":16}},{"start":{"line":1508,"column":16},"end":{"line":1508,"column":16}}]},"187":{"line":1510,"type":"if","locations":[{"start":{"line":1510,"column":23},"end":{"line":1510,"column":23}},{"start":{"line":1510,"column":23},"end":{"line":1510,"column":23}}]},"188":{"line":1512,"type":"if","locations":[{"start":{"line":1512,"column":23},"end":{"line":1512,"column":23}},{"start":{"line":1512,"column":23},"end":{"line":1512,"column":23}}]},"189":{"line":1514,"type":"if","locations":[{"start":{"line":1514,"column":23},"end":{"line":1514,"column":23}},{"start":{"line":1514,"column":23},"end":{"line":1514,"column":23}}]},"190":{"line":1516,"type":"if","locations":[{"start":{"line":1516,"column":23},"end":{"line":1516,"column":23}},{"start":{"line":1516,"column":23},"end":{"line":1516,"column":23}}]},"191":{"line":1518,"type":"if","locations":[{"start":{"line":1518,"column":23},"end":{"line":1518,"column":23}},{"start":{"line":1518,"column":23},"end":{"line":1518,"column":23}}]},"192":{"line":1518,"type":"binary-expr","locations":[{"start":{"line":1518,"column":26},"end":{"line":1518,"column":45}},{"start":{"line":1518,"column":49},"end":{"line":1518,"column":68}}]},"193":{"line":1521,"type":"if","locations":[{"start":{"line":1521,"column":23},"end":{"line":1521,"column":23}},{"start":{"line":1521,"column":23},"end":{"line":1521,"column":23}}]},"194":{"line":1524,"type":"if","locations":[{"start":{"line":1524,"column":23},"end":{"line":1524,"column":23}},{"start":{"line":1524,"column":23},"end":{"line":1524,"column":23}}]},"195":{"line":1526,"type":"if","locations":[{"start":{"line":1526,"column":23},"end":{"line":1526,"column":23}},{"start":{"line":1526,"column":23},"end":{"line":1526,"column":23}}]},"196":{"line":1528,"type":"if","locations":[{"start":{"line":1528,"column":23},"end":{"line":1528,"column":23}},{"start":{"line":1528,"column":23},"end":{"line":1528,"column":23}}]},"197":{"line":1530,"type":"if","locations":[{"start":{"line":1530,"column":23},"end":{"line":1530,"column":23}},{"start":{"line":1530,"column":23},"end":{"line":1530,"column":23}}]},"198":{"line":1532,"type":"if","locations":[{"start":{"line":1532,"column":23},"end":{"line":1532,"column":23}},{"start":{"line":1532,"column":23},"end":{"line":1532,"column":23}}]},"199":{"line":1532,"type":"binary-expr","locations":[{"start":{"line":1532,"column":26},"end":{"line":1532,"column":41}},{"start":{"line":1532,"column":45},"end":{"line":1532,"column":57}}]},"200":{"line":1544,"type":"if","locations":[{"start":{"line":1544,"column":12},"end":{"line":1544,"column":12}},{"start":{"line":1544,"column":12},"end":{"line":1544,"column":12}}]},"201":{"line":1554,"type":"if","locations":[{"start":{"line":1554,"column":8},"end":{"line":1554,"column":8}},{"start":{"line":1554,"column":8},"end":{"line":1554,"column":8}}]},"202":{"line":1555,"type":"if","locations":[{"start":{"line":1555,"column":12},"end":{"line":1555,"column":12}},{"start":{"line":1555,"column":12},"end":{"line":1555,"column":12}}]},"203":{"line":1560,"type":"if","locations":[{"start":{"line":1560,"column":12},"end":{"line":1560,"column":12}},{"start":{"line":1560,"column":12},"end":{"line":1560,"column":12}}]},"204":{"line":1564,"type":"if","locations":[{"start":{"line":1564,"column":19},"end":{"line":1564,"column":19}},{"start":{"line":1564,"column":19},"end":{"line":1564,"column":19}}]},"205":{"line":1572,"type":"if","locations":[{"start":{"line":1572,"column":8},"end":{"line":1572,"column":8}},{"start":{"line":1572,"column":8},"end":{"line":1572,"column":8}}]},"206":{"line":1572,"type":"binary-expr","locations":[{"start":{"line":1572,"column":11},"end":{"line":1572,"column":17}},{"start":{"line":1572,"column":21},"end":{"line":1572,"column":43}}]},"207":{"line":1583,"type":"if","locations":[{"start":{"line":1583,"column":8},"end":{"line":1583,"column":8}},{"start":{"line":1583,"column":8},"end":{"line":1583,"column":8}}]},"208":{"line":1583,"type":"binary-expr","locations":[{"start":{"line":1583,"column":11},"end":{"line":1583,"column":18}},{"start":{"line":1583,"column":22},"end":{"line":1583,"column":59}}]},"209":{"line":1587,"type":"if","locations":[{"start":{"line":1587,"column":16},"end":{"line":1587,"column":16}},{"start":{"line":1587,"column":16},"end":{"line":1587,"column":16}}]},"210":{"line":1587,"type":"binary-expr","locations":[{"start":{"line":1587,"column":19},"end":{"line":1587,"column":33}},{"start":{"line":1587,"column":37},"end":{"line":1587,"column":44}},{"start":{"line":1587,"column":48},"end":{"line":1587,"column":85}}]},"211":{"line":1588,"type":"cond-expr","locations":[{"start":{"line":1588,"column":41},"end":{"line":1588,"column":73}},{"start":{"line":1588,"column":76},"end":{"line":1588,"column":110}}]},"212":{"line":1593,"type":"if","locations":[{"start":{"line":1593,"column":12},"end":{"line":1593,"column":12}},{"start":{"line":1593,"column":12},"end":{"line":1593,"column":12}}]},"213":{"line":1610,"type":"if","locations":[{"start":{"line":1610,"column":8},"end":{"line":1610,"column":8}},{"start":{"line":1610,"column":8},"end":{"line":1610,"column":8}}]},"214":{"line":1610,"type":"binary-expr","locations":[{"start":{"line":1610,"column":11},"end":{"line":1610,"column":29}},{"start":{"line":1610,"column":33},"end":{"line":1610,"column":59}}]},"215":{"line":1614,"type":"if","locations":[{"start":{"line":1614,"column":8},"end":{"line":1614,"column":8}},{"start":{"line":1614,"column":8},"end":{"line":1614,"column":8}}]},"216":{"line":1617,"type":"if","locations":[{"start":{"line":1617,"column":8},"end":{"line":1617,"column":8}},{"start":{"line":1617,"column":8},"end":{"line":1617,"column":8}}]},"217":{"line":1624,"type":"cond-expr","locations":[{"start":{"line":1624,"column":53},"end":{"line":1624,"column":63}},{"start":{"line":1624,"column":66},"end":{"line":1624,"column":67}}]},"218":{"line":1629,"type":"if","locations":[{"start":{"line":1629,"column":12},"end":{"line":1629,"column":12}},{"start":{"line":1629,"column":12},"end":{"line":1629,"column":12}}]}},"code":["\"use strict\";","","const Bucket = require(\"../util/Bucket\");","const Call = require(\"../structures/Call\");","const Constants = require(\"../Constants\");","const ExtendedUser = require(\"../structures/ExtendedUser\");","const OPCodes = Constants.GatewayOPCodes;","const User = require(\"../structures/User\");","var WebSocket = typeof window !== \"undefined\" ? window.WebSocket : require(\"ws\");","const Zlib = require(\"zlib\");","","var EventEmitter;","try {","    EventEmitter = require(\"eventemitter3\");","} catch(err) {","    EventEmitter = require(\"events\").EventEmitter;","}","var Erlpack;","try {","    Erlpack = require(\"erlpack\");","} catch(err) { // eslint-disable no-empty","}","var Pako;","try {","    Pako = require(\"pako\");","} catch(err) { // eslint-disable no-empty","}","try {","    WebSocket = require(\"uws\");","} catch(err) { // eslint-disable no-empty","}","","/**","* Represents a shard","* @extends EventEmitter","* @prop {Number} id The ID of the shard","* @prop {Boolean} connecting Whether the shard is connecting","* @prop {Boolean} ready Whether the shard is ready","* @prop {Array<String>?} discordServerTrace Debug trace of Discord servers","* @prop {String} status The status of the shard. \"disconnected\"/\"connecting\"/\"handshaking\"/\"connected\"","* @prop {Number} lastHeartbeatReceived Last time Discord acknowledged a heartbeat, null if shard has not sent heartbeat yet","* @prop {Number} lastHeartbeatSent Last time shard sent a heartbeat, null if shard has not sent heartbeat yet","* @prop {Number} latency Current latency between shard and Discord","*/","class Shard extends EventEmitter {","    constructor(id, client) {","        super();","","        this.id = id;","        this.client = client;","","        this.hardReset();","    }","","    get latency() {","        return this.lastHeartbeatSent && this.lastHeartbeatReceived ? this.lastHeartbeatReceived - this.lastHeartbeatSent : Infinity;","    }","","    /**","    * Tells the shard to connect","    */","    connect() {","        if(this.ws && this.ws.readyState != WebSocket.CLOSED) {","            this.client.emit(\"error\", new Error(\"Existing connection detected\"), this.id);","            return;","        }","        ++this.connectAttempts;","        this.connecting = true;","        return this.initializeWS();","    }","","    /**","    * Disconnects the shard","    * @arg {Object?} [options] Shard disconnect options","    * @arg {String | Boolean} [options.reconnect] false means destroy everything, true means you want to reconnect in the future, \"auto\" will autoreconnect","    */","    disconnect(options, error) {","        if(!this.ws) {","            return;","        }","        options = options || {};","        if(this.heartbeatInterval) {","            clearInterval(this.heartbeatInterval);","            this.heartbeatInterval = null;","        }","        if(this.ws) {","            this.ws.onclose = undefined;","            try {","                if(options.reconnect && this.sessionID) {","                    this.ws.terminate();","                } else {","                    this.ws.close();","                }","            } catch(err) {","                /**","                * Fired when the shard encounters an error","                * @event Client#error","                * @prop {Error} err The error","                * @prop {Number} id The ID of the shard","                */","                this.client.emit(\"error\", err, this.id);","            }","            /**","            * Fired when the shard disconnects","            * @event Shard#disconnect","            * @prop {Error?} err The error, if any","            */","            this.emit(\"disconnect\", error || null);","            this.ws = null;","        }","        this.status = \"disconnected\";","        this.reset();","        if(options.reconnect === \"auto\" && this.client.options.autoreconnect) {","            /**","            * Fired when stuff happens and gives more info","            * @event Client#debug","            * @prop {String} message The debug message","            * @prop {Number} id The ID of the shard","            */","            this.client.emit(\"debug\", `Queueing reconnect in ${this.reconnectInterval}ms | Attempt ${this.connectAttempts}`, this.id);","            setTimeout(() => {","                this.client.shards.connect(this);","            }, this.reconnectInterval);","            this.reconnectInterval = Math.min(Math.round(this.reconnectInterval * (Math.random() * 2 + 1)), 30000);","        } else if(!options.reconnect) {","            this.hardReset();","        }","    }","","    reset() {","        this.connecting = false;","        this.ready = false;","        this.preReady = false;","        this.getAllUsersCount = {};","        this.getAllUsersQueue = [];","        this.getAllUsersLength = 1;","        this.guildSyncQueue = [];","        this.guildSyncQueueLength = 1;","        this.unsyncedGuilds = 0;","        this.lastHeartbeatAck = true;","        this.lastHeartbeatReceived = null;","        this.lastHeartbeatSent = null;","        this.status = \"disconnected\";","    }","","    hardReset() {","        this.reset();","        this.seq = 0;","        this.sessionID = null;","        this.reconnectInterval = 1000;","        this.connectAttempts = 0;","        this.ws = null;","        this.heartbeatInterval = null;","        this.guildCreateTimeout = null;","        this.idleSince = null;","        this.globalBucket = new Bucket(120, 60000, 0);","        this.presenceUpdateBucket = new Bucket(5, 60000, 0);","        this.presence = JSON.parse(JSON.stringify(this.client.presence)); // Fast copy","    }","","    resume() {","        this.sendWS(OPCodes.RESUME, {","            token: this.client.token,","            session_id: this.sessionID,","            seq: this.seq","        }, true);","    }","","    identify() {","        var identify = {","            token: this.client.token,","            v: Constants.GATEWAY_VERSION,","            compress: !!this.client.options.compress,","            large_threshold: this.client.options.largeThreshold,","            properties: {","                \"os\": process.platform,","                \"browser\": \"Eris\",","                \"device\": \"Eris\"","            }","        };","        if(this.client.options.maxShards > 1) {","            identify.shard = [this.id, this.client.options.maxShards];","        }","        if(this.presence.status) {","            identify.presence = this.presence;","        }","        this.sendWS(OPCodes.IDENTIFY, identify, true);","    }","","    wsEvent(packet) {","        // var startTime = Date.now();","        // var debugStr = \"\";","        switch(packet.t) { /* eslint-disable no-redeclare */ // (╯°□°）╯︵ ┻━┻","            case \"PRESENCE_UPDATE\": {","                if(packet.d.user.username !== undefined) {","                    var user = this.client.users.get(packet.d.user.id);","                    var oldUser = null;","                    if(user && (user.username !== packet.d.user.username || user.avatar !== packet.d.user.avatar)) {","                        oldUser = {","                            username: user.username,","                            discriminator: user.discriminator,","                            avatar: user.avatar","                        };","                    }","                    if(!user || oldUser) {","                        user = this.client.users.update(packet.d.user, this.client);","                        /**","                        * Fired when a user's username or avatar changes","                        * @event Client#userUpdate","                        * @prop {User} user The updated user","                        * @prop {Object?} oldUser The old user data","                        * @prop {String} oldUser.username The username of the user","                        * @prop {String} oldUser.discriminator The discriminator of the user","                        * @prop {String?} oldUser.avatar The hash of the user's avatar, or null if no avatar","                        */","                        this.client.emit(\"userUpdate\", user, oldUser);","                    }","                }","                if(!packet.d.guild_id) {","                    packet.d.id = packet.d.user.id;","                    var relationship = this.client.relationships.get(packet.d.id);","                    if(!relationship) { // Removing relationships","                        return;","                    }","                    var oldPresence = {","                        game: relationship.game,","                        status: relationship.status","                    };","                    /**","                    * Fired when a guild member or relationship's status or game changes","                    * @event Client#presenceUpdate","                    * @prop {Member | Relationship} other The updated member or relationship","                    * @prop {Object?} oldPresence The old presence data. If the user was offline when the bot started and the client option getAllUsers is not true, this will be null","                    * @prop {String} oldPresence.status The other user's old status. Either \"online\", \"idle\", or \"offline\"","                    * @prop {Object?} oldPresence.game The old game the other user was playing","                    * @prop {String} oldPresence.game.name The name of the active game","                    * @prop {Number} oldPresence.game.type The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)","                    * @prop {String} oldPresence.game.url The url of the active game","                    */","                    this.client.emit(\"presenceUpdate\", this.client.relationships.update(packet.d), oldPresence);","                    break;","                }","                var guild = this.client.guilds.get(packet.d.guild_id);","                if(!guild) {","                    this.client.emit(\"warn\", \"Rogue presence update: \" + JSON.stringify(packet), this.id);","                    break;","                }","                var member = guild.members.get(packet.d.id = packet.d.user.id);","                var oldPresence = null;","                if(member && (member.status !== packet.d.status || (member.game !== packet.d.game && (!member.game || !packet.d.game || member.game.name !== packet.d.game.name || member.game.type !== packet.d.game.type || member.game.url !== packet.d.game.url)))) {","                    oldPresence = {","                        game: member.game,","                        status: member.status","                    };","                }","                if((!member && packet.d.user.username) || oldPresence) {","                    member = guild.members.update(packet.d, guild);","                    this.client.emit(\"presenceUpdate\", member, oldPresence);","                }","                break;","            }","            case \"VOICE_STATE_UPDATE\": { // (╯°□°）╯︵ ┻━┻","                if(packet.d.guild_id === undefined) {","                    packet.d.id = packet.d.user_id;","                    if(packet.d.channel_id === null) {","                        var flag = false;","                        for(var groupChannel of this.client.groupChannels) {","                            var call = (groupChannel[1].call || groupChannel[1].lastCall);","                            if(call && call.voiceStates.remove(packet.d)) {","                                flag = true;","                                break;","                            }","                        }","                        if(!flag) {","                            for(var privateChannel of this.client.privateChannels) {","                                var call = (privateChannel[1].call || privateChannel[1].lastCall);","                                if(call && call.voiceStates.remove(packet.d)) {","                                    flag = true;","                                    break;","                                }","                            }","                            if(!flag) {","                                this.client.emit(\"error\", new Error(\"VOICE_STATE_UPDATE for user leaving call not found\"));","                                break;","                            }","                        }","                    } else {","                        var channel = this.client.getChannel(packet.d.channel_id);","                        if(!channel.call && !channel.lastCall) {","                            this.client.emit(\"error\", new Error(\"VOICE_STATE_UPDATE for untracked call\"));","                            break;","                        }","                        (channel.call || channel.lastCall).voiceStates.update(packet.d);","                    }","                    break;","                }","                var guild = this.client.guilds.get(packet.d.guild_id);","                if(!guild) {","                    break;","                }","                if(guild.pendingVoiceStates) {","                    guild.pendingVoiceStates.push(packet.d);","                    break;","                }","                var member = guild.members.get(packet.d.id = packet.d.user_id);","                if(!member) {","                    var channel = guild.channels.find((channel) => channel.type === 2 && channel.voiceMembers.get(packet.d.id));","                    if(channel) {","                        channel.voiceMembers.remove(packet.d);","                        this.client.emit(\"warn\", \"VOICE_STATE_UPDATE member null but in channel: \" + packet.d.id, this.id);","                        break;","                    }","                    break;","                }","                var oldState = {","                    mute: member.voiceState.mute,","                    deaf: member.voiceState.deaf,","                    selfMute: member.voiceState.selfMute,","                    selfDeaf: member.voiceState.selfDeaf","                };","                var oldChannelID = member.voiceState.channelID;","                member.update(packet.d, this.client);","                if(member.user.id === this.client.user.id) {","                    var voiceConnection = this.client.voiceConnections.get(packet.d.guild_id);","                    if(voiceConnection && voiceConnection.channelID !== packet.d.channel_id) {","                        voiceConnection.switchChannel(packet.d.channel_id, true);","                    }","                }","                if(oldChannelID != packet.d.channel_id) {","                    var oldChannel, newChannel;","                    if(oldChannelID) {","                        oldChannel = guild.channels.get(oldChannelID);","                    }","                    if(packet.d.channel_id && (newChannel = guild.channels.get(packet.d.channel_id)) && newChannel.type === 2) { // Welcome to Discord, where one can \"join\" text channels","                        if(oldChannel) {","                            /**","                            * Fired when a guild member switches voice channels","                            * @event Client#voiceChannelSwitch","                            * @prop {Member} member The member","                            * @prop {GuildChannel} newChannel The new voice channel","                            * @prop {GuildChannel} oldChannel The old voice channel","                            */","                            oldChannel.voiceMembers.remove(member);","                            this.client.emit(\"voiceChannelSwitch\", newChannel.voiceMembers.add(member, guild), newChannel, oldChannel);","                        } else {","                            /**","                            * Fired when a guild member joins a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`","                            * @event Client#voiceChannelJoin","                            * @prop {Member} member The member","                            * @prop {GuildChannel} newChannel The voice channel","                            */","                            this.client.emit(\"voiceChannelJoin\", newChannel.voiceMembers.add(member, guild), newChannel);","                        }","                    } else if(oldChannel) {","                        /**","                        * Fired when a guild member leaves a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`","                        * @event Client#voiceChannelLeave","                        * @prop {Member} member The member","                        * @prop {GuildChannel} oldChannel The voice channel","                        */","                        this.client.emit(\"voiceChannelLeave\", oldChannel.voiceMembers.remove(member), oldChannel);","                    }","                }","                if(oldState.mute !== member.mute || oldState.deaf !== member.deaf || oldState.selfMute !== member.selfMute || oldState.selfDeaf !== member.selfDeaf) {","                    /**","                    * Fired when a guild member's voice state changes","                    * @event Client#voiceStateUpdate","                    * @prop {Member} member The member","                    * @prop {Object} oldState The old voice state","                    * @prop {Boolean} oldState.mute The previous server mute status","                    * @prop {Boolean} oldState.deaf The previous server deaf status","                    * @prop {Boolean} oldState.selfMute The previous self mute status","                    * @prop {Boolean} oldState.selfDeaf The previous self deaf status","                    */","                    this.client.emit(\"voiceStateUpdate\", member, oldState);","                }","                break;","            }","            case \"TYPING_START\": {","                if(this.client.listeners(\"typingStart\").length > 0) {","                    /**","                    * Fired when a user begins typing","                    * @event Client#typingStart","                    * @prop {Channel} channel The text channel the user is typing in","                    * @prop {User} user The user","                    */","                    this.client.emit(\"typingStart\", this.client.getChannel(packet.d.channel_id), this.client.users.get(packet.d.user_id));","                }","                break;","            }","            case \"MESSAGE_CREATE\": {","                var channel = this.client.getChannel(packet.d.channel_id);","                if(channel) { // MESSAGE_CREATE just when deleting o.o","                    channel.lastMessageID = packet.d.id;","                    /**","                    * Fired when a message is created","                    * @event Client#messageCreate","                    * @prop {Message} message The message","                    */","                    this.client.emit(\"messageCreate\", channel.messages.add(packet.d, this.client));","                } else {","                    this.client.emit(\"debug\", \"MESSAGE_CREATE but channel not found (OK if deleted channel)\", this.id);","                }","                break;","            }","            case \"MESSAGE_UPDATE\": {","                var channel = this.client.getChannel(packet.d.channel_id);","                if(!channel) {","                    break;","                }","                var message = channel.messages.get(packet.d.id);","                var oldMessage = {","                    id: packet.d.id","                };","                if(message) {","                    oldMessage = {","                        attachments: message.attachments,","                        content: message.content,","                        embeds: message.embeds,","                        editedTimestamp: message.editedTimestamp,","                        mentionedBy: message.mentionedBy,","                        mentions: message.mentions,","                        roleMentions: message.roleMentions,","                        channelMentions: message.channelMentions,","                        tts: message.tts","                    };","                }","                /**","                * Fired when a message is updated","                * @event Client#messageUpdate","                * @prop {Message} message The updated message. If oldMessage was undefined, it is not recommended to use this since it will be very incomplete","                * @prop {Object?} oldMessage The old message data, if the message was cached","                * @prop {Object[]} oldMessage.id The ID of the message","                * @prop {Object[]?} oldMessage.attachments Array of attachments","                * @prop {Object[]?} oldMessage.embeds Array of embeds","                * @prop {String?} oldMessage.content Message content","                * @prop {Number?} oldMessage.editedTimestamp Timestamp of latest message edit","                * @prop {Object?} oldMessage.mentionedBy Object of if different things mention the bot user","                * @prop {Boolean?} oldMessage.tts Whether to play the message using TTS or not","                * @prop {String[]?} oldMessage.mentions Array of mentioned users' ids","                * @prop {String[]?} oldMessage.roleMentions Array of mentioned roles' ids.","                * @prop {String[]?} oldMessage.channelMentions Array of mentions channels' ids.","                */","                this.client.emit(\"messageUpdate\", channel.messages.update(packet.d, this.client), oldMessage);","                break;","            }","            case \"MESSAGE_DELETE\": {","                var channel = this.client.getChannel(packet.d.channel_id);","                if(!channel) {","                    break;","                }","                /**","                * Fired when a cached message is deleted","                * @event Client#messageDelete","                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed","                */","                this.client.emit(\"messageDelete\", channel.messages.remove(packet.d) || {","                    id: packet.d.id,","                    channel: channel","                });","                break;","            }","            case \"MESSAGE_DELETE_BULK\": {","                var channel = this.client.getChannel(packet.d.channel_id);","                if(!channel) {","                    break;","                }","","                /**","                 * Fired when a bulk delete occurs","                 * @event Client#messageDeleteBulk","                * @prop {Message[] | Object[]} messages An array of (potentially partial) message objects. If a message is not cached, it will be an object with `id` and `channel` keys. No other property is guaranteed","                 */","                this.client.emit(\"messageDeleteBulk\", packet.d.ids.map((id) => (channel.messages.remove({","                    id","                }) || {","                    id: id,","                    channel: channel","                })));","                break;","            }","            case \"MESSAGE_REACTION_ADD\": {","                var channel = this.client.getChannel(packet.d.channel_id);","                if(!channel) {","                    break;","                }","                var message = channel.messages.get(packet.d.message_id);","                if(message) {","                    var reaction = packet.d.emoji.id ? `${packet.d.emoji.name}:${packet.d.emoji.id}` : packet.d.emoji.name;","                    if(message.reactions[reaction]) {","                        ++message.reactions[reaction].count;","                        if(packet.d.user_id === this.client.user.id) {","                            message.reactions[reaction].me = true;","                        }","                    } else {","                        message.reactions[reaction] = {","                            count: 1,","                            me: packet.d.user_id === this.client.user.id","                        };","                    }","                }","                /**","                * Fired when someone adds a reaction to a message","                * @event Client#messageReactionAdd","                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed","                * @prop {Object} emoji The reaction emoji object","                * @prop {String?} emoji.id The emoji ID (null for non-custom emojis)","                * @prop {String} emoji.name The emoji name","                * @prop {String} userID The ID of the user that added the reaction","                */","                this.client.emit(\"messageReactionAdd\", message || {","                    id: packet.d.message_id,","                    channel: channel","                }, packet.d.emoji, packet.d.user_id);","                break;","            }","            case \"MESSAGE_REACTION_REMOVE\": {","                var channel = this.client.getChannel(packet.d.channel_id);","                if(!channel) {","                    break;","                }","                var message = channel.messages.get(packet.d.message_id);","                if(message) {","                    var reaction = packet.d.emoji.id ? `${packet.d.emoji.name}:${packet.d.emoji.id}` : packet.d.emoji.name;","                    if(message.reactions[reaction]) {","                        --message.reactions[reaction].count;","                        if(packet.d.user_id === this.client.user.id) {","                            message.reactions[reaction].me = false;","                        }","                    }","                }","                /**","                * Fired when someone removes a reaction from a message","                * @event Client#messageReactionRemove","                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed","                * @prop {Object} emoji The reaction emoji object","                * @prop {String?} emoji.id The ID of the emoji (null for non-custom emojis)","                * @prop {String} emoji.name The emoji name","                * @prop {String} userID The ID of the user that removed the reaction","                */","                this.client.emit(\"messageReactionRemove\", message || {","                    id: packet.d.message_id,","                    channel: channel","                }, packet.d.emoji, packet.d.user_id);","                break;","            }","            case \"MESSAGE_REACTIONS_REMOVE_ALL\": {","                var channel = this.client.getChannel(packet.d.channel_id);","                if(!channel) {","                    break;","                }","                /**","                * Fired when someone removes a reaction from a message","                * @event Client#messageReactionRemove","                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed","                * @prop {Object} emoji The reaction emoji object","                * @prop {String?} emoji.id The ID of the emoji (null for non-custom emojis)","                * @prop {String} emoji.name The emoji name","                * @prop {String} userID The ID of the user that removed the reaction","                */","                this.client.emit(\"messageReactionRemoveAll\", channel.messages.get(packet.d.message_id) || {","                    id: packet.d.message_id,","                    channel: channel","                });","                break;","            }","            case \"GUILD_MEMBER_ADD\": {","                var guild = this.client.guilds.get(packet.d.guild_id);","                packet.d.id = packet.d.user.id;","                ++guild.memberCount;","                /**","                * Fired when a member joins a server","                * @event Client#guildMemberAdd","                * @prop {Guild} guild The guild","                * @prop {Member} member The member","                */","                this.client.emit(\"guildMemberAdd\", guild, guild.members.add(packet.d, guild));","                break;","            }","            case \"GUILD_MEMBER_UPDATE\": {","                var guild = this.client.guilds.get(packet.d.guild_id);","                var member = guild.members.get(packet.d.id = packet.d.user.id);","                var oldMember = null;","                if(member) {","                    oldMember = {","                        roles: member.roles,","                        nick: member.nick","                    };","                }","                member = guild.members.update(packet.d, guild);","                /**","                * Fired when a member's roles or nickname are updated","                * @event Client#guildMemberUpdate","                * @prop {Guild} guild The guild","                * @prop {Member} member The updated member","                * @prop {Object?} oldMember The old member data","                * @prop {String[]} oldMember.roles An array of role IDs this member is a part of","                * @prop {String?} oldMember.nick The server nickname of the member","                */","                this.client.emit(\"guildMemberUpdate\", guild, member, oldMember);","                break;","            }","            case \"GUILD_MEMBER_REMOVE\": {","                if(packet.d.user.id === this.client.user.id) { // The bot is probably leaving","                    break;","                }","                var guild = this.client.guilds.get(packet.d.guild_id);","                --guild.memberCount;","                packet.d.id = packet.d.user.id;","                /**","                * Fired when a member leaves a server","                * @event Client#guildMemberRemove","                * @prop {Guild} guild The guild","                * @prop {Member | Object} member The member. If the member is not cached, this will be an object with `id` and `user` key","                */","                this.client.emit(\"guildMemberRemove\", guild, guild.members.remove(packet.d) || {","                    id: packet.d.id,","                    user: new User(packet.d.user)","                });","                break;","            }","            case \"GUILD_CREATE\": {","                if(!packet.d.unavailable) {","                    var guild = this.createGuild(packet.d);","                    if(this.ready) {","                        if(this.client.unavailableGuilds.remove(packet.d)) {","                            /**","                            * Fired when an guild becomes available","                            * @event Client#guildAvailable","                            * @prop {Guild} guild The guild","                            */","                            this.client.emit(\"guildAvailable\", guild);","                        } else {","                            /**","                            * Fired when an guild is created","                            * @event Client#guildCreate","                            * @prop {Guild} guild The guild","                            */","                            this.client.emit(\"guildCreate\", guild);","                        }","                    } else {","                        this.client.unavailableGuilds.remove(packet.d);","                        this.restartGuildCreateTimeout();","                    }","                } else {","                    this.client.guilds.remove(packet.d);","                    /**","                    * Fired when an unavailable guild is created","                    * @event Client#unavailableGuildCreate","                    * @prop {UnavailableGuild} guild The unavailable guild","                    */","                    this.client.emit(\"unavailableGuildCreate\", this.client.unavailableGuilds.add(packet.d, this.client));","                }","                break;","            }","            case \"GUILD_UPDATE\": {","                var guild = this.client.guilds.get(packet.d.id);","                var oldGuild = null;","                oldGuild = {","                    name: guild.name,","                    verificationLevel: guild.verification_level,","                    splash: guild.splash,","                    region: guild.region,","                    ownerID: guild.owner_id,","                    icon: guild.icon,","                    features: guild.features,","                    emojis: guild.emojis,","                    afkChannelID: guild.afk_channel_id,","                    afkTimeout: guild.afk_timeout","                };","                /**","                * Fired when an guild is updated","                * @event Client#guildUpdate","                * @prop {Guild} guild The guild","                * @prop {Object} oldGuild The old guild data","                * @prop {String} oldGuild.name The name of the guild","                * @prop {Number} oldGuild.verificationLevel The guild verification level","                * @prop {String} oldGuild.region The region of the guild","                * @prop {String?} oldGuild.icon The hash of the guild icon, or null if no icon","                * @prop {String} oldGuild.afkChannelID The ID of the AFK voice channel","                * @prop {Number} oldGuild.afkTimeout The AFK timeout in seconds","                * @prop {String} oldGuild.ownerID The ID of the user that is the guild owner","                * @prop {String?} oldGuild.splash The hash of the guild splash image, or null if no splash (VIP only)","                * @prop {Object[]} oldGuild.features An array of guild features","                * @prop {Object[]} oldGuild.emojis An array of guild emojis","                */","                this.client.emit(\"guildUpdate\", this.client.guilds.update(packet.d, this.client), oldGuild);","                break;","            }","            case \"GUILD_DELETE\": {","                delete this.client.guildShardMap[packet.d.id];","                var guild = this.client.guilds.remove(packet.d);","                if(guild) { // Discord sends GUILD_DELETE for guilds that were previously unavailable in READY","                    guild.channels.forEach((channel) => {","                        delete this.client.channelGuildMap[channel.id];","                    });","                }","                if(packet.d.unavailable) {","                    /**","                    * Fired when an guild becomes unavailable","                    * @event Client#guildUnavailable","                    * @prop {Guild} guild The guild","                    */","                    this.client.emit(\"guildUnavailable\", this.client.unavailableGuilds.add(packet.d, this.client));","                } else {","                    /**","                    * Fired when an guild is deleted","                    * @event Client#guildDelete","                    * @prop {Guild} guild The guild","                    */","                    this.client.emit(\"guildDelete\", guild || {","                        id: packet.d.id","                    });","                }","                break;","            }","            case \"GUILD_BAN_ADD\": {","                /**","                * Fired when a user is banned from a guild","                * @event Client#guildBanAdd","                * @prop {Guild} guild The guild","                * @prop {User} user The banned user","                */","                this.client.emit(\"guildBanAdd\", this.client.guilds.get(packet.d.guild_id), this.client.users.add(packet.d.user, this.client));","                break;","            }","            case \"GUILD_BAN_REMOVE\": {","                /**","                * Fired when a user is unbanned from a guild","                * @event Client#guildBanRemove","                * @prop {Guild} guild The guild","                * @prop {User} user The banned user","                */","                this.client.emit(\"guildBanRemove\", this.client.guilds.get(packet.d.guild_id), this.client.users.add(packet.d.user, this.client));","                break;","            }","            case \"GUILD_ROLE_CREATE\": {","                /**","                * Fired when a guild role is created","                * @event Client#guildRoleCreate","                * @prop {Guild} guild The guild","                * @prop {Role} role The role","                */","                var guild = this.client.guilds.get(packet.d.guild_id);","                this.client.emit(\"guildRoleCreate\", guild, guild.roles.add(packet.d.role, guild));","                break;","            }","            case \"GUILD_ROLE_UPDATE\": {","                var guild = this.client.guilds.get(packet.d.guild_id);","                var role = guild.roles.add(packet.d.role, guild);","                var oldRole = null;","                if(role) {","                    oldRole = {","                        color: role.color,","                        hoist: role.hoist,","                        managed: role.managed,","                        name: role.name,","                        permissions: role.permissions,","                        position: role.position","                    };","                }","                /**","                * Fired when a guild role is updated","                * @event Client#guildRoleUpdate","                * @prop {Guild} guild The guild","                * @prop {Role} role The updated role","                * @prop {Object} oldRole The old role data","                * @prop {String} oldRole.name The name of the role","                * @prop {Boolean} oldRole.managed Whether a guild integration manages this role or not","                * @prop {Boolean} oldRole.hoist Whether users with this role are hoisted in the user list or not","                * @prop {Number} oldRole.color The hex color of the role in base 10","                * @prop {Number} oldRole.position The position of the role","                * @prop {Permission} oldRole.permissions The permissions number of the role","                */","                this.client.emit(\"guildRoleUpdate\", guild, guild.roles.update(packet.d.role, guild), oldRole);","                break;","            }","            case \"GUILD_ROLE_DELETE\": {","                /**","                * Fired when a guild role is deleted","                * @event Client#guildRoleDelete","                * @prop {Guild} guild The guild","                * @prop {Role} role The role","                */","                var guild = this.client.guilds.get(packet.d.guild_id);","                if(guild) { // Eventual Consistency™ (╯°□°）╯︵ ┻━┻","                    this.client.emit(\"guildRoleDelete\", guild, guild.roles.remove({id: packet.d.role_id}));","                }","                break;","            }","            case \"CHANNEL_CREATE\": {","                if(packet.d.type === undefined || packet.d.type === 1) {","                    if(this.id === 0) {","                        /**","                        * Fired when a channel is created","                        * @event Client#channelCreate","                        * @prop {Channel} channel The channel","                        */","                        this.client.privateChannelMap[packet.d.recipients[0].id] = packet.d.id;","                        this.client.emit(\"channelCreate\", this.client.privateChannels.add(packet.d, this.client));","                    }","                } else if(packet.d.type === 0 || packet.d.type === 2) {","                    var guild = this.client.guilds.get(packet.d.guild_id);","                    if(!guild) {","                        break;","                    }","                    var channel = guild.channels.add(packet.d, guild);","                    this.client.channelGuildMap[packet.d.id] = packet.d.guild_id;","                    this.client.emit(\"channelCreate\", channel);","                } else if(packet.d.type === 3) {","                    if(this.id === 0) {","                        this.client.emit(\"channelCreate\", this.client.groupChannels.add(packet.d, this.client));","                    }","                } else {","                    this.emit(\"error\", new Error(\"Unhandled CHANNEL_CREATE type: \" + JSON.stringify(packet, null, 2)));","                }","                break;","            }","            case \"CHANNEL_UPDATE\": {","                var channel = this.client.getChannel(packet.d.id);","                if(!channel) {","                    return;","                }","                if(channel.type === 3) {","                    if(this.id !== 0) {","                        break;","                    }","                    var oldChannel = {","                        name: channel.name,","                        ownerID: channel.ownerID,","                        icon: channel.icon","                    };","                }","                if(channel.type === 0 || channel.type === 2) {","                    var oldChannel = {","                        name: channel.name,","                        topic: channel.topic,","                        position: channel.position,","                        bitrate: channel.bitrate,","                        permissionOverwrites: channel.permissionOverwrites","                    };","                }","                channel.update(packet.d);","                /**","                * Fired when a channel is updated","                * @event Client#channelUpdate","                * @prop {Channel} channel The updated channel","                * @prop {Object} oldChannel The old channel data","                * @prop {String} oldChannel.name The name of the channel","                * @prop {Number} oldChannel.position The position of the channel","                * @prop {String?} oldChannel.topic The topic of the channel (text channels only)","                * @prop {Number?} oldChannel.bitrate The bitrate of the channel (voice channels only)","                * @prop {Collection} oldChannel.permissionOverwrites Collection of PermissionOverwrites in this channel","                */","                this.client.emit(\"channelUpdate\", channel, oldChannel);","                break;","            }","            case \"CHANNEL_DELETE\": {","                if(packet.d.type === 1 || packet.d.type === undefined) {","                    if(this.id === 0) {","                        var channel = this.client.privateChannels.remove(packet.d);","                        if(channel) {","                            delete this.client.privateChannelMap[channel.recipient.id];","                            /**","                            * Fired when a channel is deleted","                            * @event Client#channelDelete","                            * @prop {Channel} channel The channel","                            */","                            this.client.emit(\"channelDelete\", channel);","                        }","                    }","                } else if(packet.d.type === 0 || packet.d.type === 2) {","                    delete this.client.channelGuildMap[packet.d.id];","                    var channel = this.client.guilds.get(packet.d.guild_id).channels.remove(packet.d);","                    if(!channel) {","                        return;","                    }","                    if(channel.type === 2) {","                        channel.voiceMembers.forEach((member) => {","                            this.client.emit(\"voiceChannelLeave\", channel.voiceMembers.remove(member), channel);","                        });","                    }","                    this.client.emit(\"channelDelete\", channel);","                } else if(packet.d.type === 3) {","                    if(this.id === 0) {","                        this.client.emit(\"channelDelete\", this.client.groupChannels.remove(packet.d));","                    }","                } else {","                    this.emit(\"error\", new Error(\"Unhandled CHANNEL_DELETE type: \" + JSON.stringify(packet, null, 2)));","                }","                break;","            }","            case \"CALL_CREATE\": {","                packet.d.id = packet.d.message_id;","                var channel = this.client.getChannel(packet.d.channel_id);","                if(channel.call) {","                    channel.call.update(packet.d);","                } else {","                    channel.call = new Call(packet.d, channel);","                    var incrementedID = \"\";","                    var overflow = true;","                    var chunks = packet.d.id.match(/\\d{1,9}/g).map((chunk) => parseInt(chunk));","                    for(var i = chunks.length - 1; i >= 0; --i) {","                        if(overflow) {","                            ++chunks[i];","                            overflow = false;","                        }","                        if(chunks[i] > 999999999) {","                            overflow = true;","                            incrementedID = \"000000000\" + incrementedID;","                        } else {","                            incrementedID = chunks[i] + incrementedID;","                        }","                    }","                    if(overflow) {","                        incrementedID = overflow + incrementedID;","                    }","                    this.client.getMessages(channel.id, 1, incrementedID);","                }","                /**","                * Fired when a call is created","                * @event Client#callCreate","                * @prop {Call} call The call","                */","                this.client.emit(\"callCreate\", channel.call);","                break;","            }","            case \"CALL_UPDATE\": {","                var channel = this.client.getChannel(packet.d.channel_id);","                if(!channel.call) {","                    throw new Error(\"CALL_UPDATE but channel has no call\");","                }","                var oldCall = {","                    participants: channel.call.participants,","                    ringing: channel.call.ringing,","                    region: channel.call.region,","                    endedTimestamp: channel.call.endedTimestamp,","                    unavailable: channel.call.unavailable,","                };","                /**","                * Fired when a call is updated","                * @event Client#callUpdate","                * @prop {Call} call The updated call","                * @prop {Object} oldCall The old call data","                * @prop {String[]} oldCall.participants The IDs of the call participants","                * @prop {Number?} oldCall.endedTimestamp The timestamp of the call end","                * @prop {String[]?} oldCall.ringing The IDs of people that were being rung","                * @prop {String?} oldCall.region The region of the call server","                * @prop {Boolean} oldCall.unavailable Whether the call was unavailable or not","                */","                this.client.emit(\"callUpdate\", channel.call.update(packet.d), oldCall);","                break;","            }","            case \"CALL_DELETE\": {","                var channel = this.client.getChannel(packet.d.channel_id);","                if(!channel.call) {","                    throw new Error(\"CALL_DELETE but channel has no call\");","                }","                channel.lastCall = channel.call;","                channel.call = null;","                /**","                * Fired when a call is deleted","                * @event Client#callDelete","                * @prop {Call} call The call","                */","                this.client.emit(\"callDelete\", channel.lastCall);","                break;","            }","            case \"CHANNEL_RECIPIENT_ADD\": {","                var channel = this.client.groupChannels.get(packet.d.channel_id);","                    /**","                    * Fired when a user joins a group channel","                    * @event Client#channelRecipientAdd","                    * @prop {GroupChannel} channel The channel","                    * @prop {User} user The user","                    */","                this.client.emit(\"channelRecipientAdd\", channel, channel.recipients.add(this.client.users.add(packet.d.user, this.client)));","                break;","            }","            case \"CHANNEL_RECIPIENT_REMOVE\": {","                var channel = this.client.groupChannels.get(packet.d.channel_id);","                    /**","                    * Fired when a user leaves a group channel","                    * @event Client#channelRecipientRemove","                    * @prop {GroupChannel} channel The channel","                    * @prop {User} user The user","                    */","                this.client.emit(\"channelRecipientRemove\", channel, channel.recipients.remove(packet.d.user));","                break;","            }","            case \"FRIEND_SUGGESTION_CREATE\": {","                /**","                * Fired when a client receives a friend suggestion","                * @event Client#friendSuggestionCreate","                * @prop {User} user The suggested user","                * @prop {String[]} reasons Array of reasons why this suggestion was made","                * @prop {Number} reasons.type Type of reason?","                * @prop {String} reasons.platform_type Platform you share with the user","                * @prop {String} reasons.name Username of suggested user on that platform","                */","                this.client.emit(\"friendSuggestionCreate\",new User(packet.d.suggested_user), packet.d.reasons);","                break;","            }","            case \"FRIEND_SUGGESTION_DELETE\": {","                /**","                * Fired when a client's friend suggestion is removed for any reason","                * @event Client#friendSuggestionDelete","                * @prop {User} user The suggested user","                */","                this.client.emit(\"friendSuggestionDelete\", this.client.users.get(packet.d.suggested_user_id));","                break;","            }","            case \"GUILD_MEMBERS_CHUNK\": {","                var guild = this.client.guilds.get(packet.d.guild_id);","                if(this.getAllUsersCount.hasOwnProperty(guild.id)) {","                    if(this.getAllUsersCount[guild.id] <= 1) {","                        delete this.getAllUsersCount[guild.id];","                        this.checkReady();","                    } else {","                        --this.getAllUsersCount[guild.id];","                    }","                }","","                /**","                 * Fired when Discord sends member chunks","                 * @event Client#guildMemberChunk","                 * @prop {Guild} guild The guild the chunked members are in","                 * @prop {Array<Member>} members The members in the chunk","                 */","                this.client.emit(\"guildMemberChunk\", guild, packet.d.members.map((member) => {","                    member.id = member.user.id;","                    return guild.members.add(member, guild);","                }));","","                this.lastHeartbeatAck = true;","","                // debugStr = \" | \" + packet.d.members.length + \" members | \" + guild.id;","","                break;","            }","            case \"GUILD_SYNC\": {// (╯°□°）╯︵ ┻━┻ thx Discord devs","                var guild = this.client.guilds.get(packet.d.id);","                for(var member of packet.d.members) {","                    member.id = member.user.id;","                    guild.members.add(member, guild);","                }","                for(var presence of packet.d.presences) {","                    if(!guild.members.get(presence.user.id)) {","                        var userData = this.client.users.get(presence.user.id);","                        if(userData) {","                            userData = `{username: ${userData.username}, id: ${userData.id}, discriminator: ${userData.discriminator}}`;","                        }","                        this.client.emit(\"debug\", `Presence without member. ${presence.user.id}. In global user cache: ${userData}. ` + JSON.stringify(presence), this.id);","                        continue;","                    }","                    presence.id = presence.user.id;","                    guild.members.update(presence);","                }","                if(guild.pendingVoiceStates && guild.pendingVoiceStates.length > 0) {","                    for(var voiceState of guild.pendingVoiceStates) {","                        if(!guild.members.get(voiceState.user_id)) {","                            continue;","                        }","                        voiceState.id = voiceState.user_id;","                        var channel = guild.channels.get(voiceState.channel_id);","                        if(channel) {","                            channel.voiceMembers.add(guild.members.update(voiceState));","                            if(this.client.options.seedVoiceConnections && voiceState.id === this.client.user.id && !this.client.voiceConnections.get(channel.guild ? channel.guild.id : \"call\")) {","                                this.client.joinVoiceChannel(channel.id, false);","                            }","                        } else { // Phantom voice states from connected users in deleted channels (╯°□°）╯︵ ┻━┻","                            this.client.emit(\"warn\", \"Phantom voice state received but channel not found | Guild: \" + guild.id + \" | Channel: \" + voiceState.channel_id);","                        }","                    }","                }","                guild.pendingVoiceStates = null;","                --this.unsyncedGuilds;","                this.checkReady();","                break;","            }","            case \"RESUMED\":","            case \"READY\": {","                this.connectAttempts = 0;","                this.reconnectInterval = 1000;","","                this.connecting = false;","                this.status = \"connected\";","                this.presence.status = \"online\";","                this.client.shards._readyPacketCB();","","                if(packet.t === \"RESUMED\") {","                    this.preReady = true;","                    this.ready = true;","","                    /**","                    * Fired when a shard finishes resuming","                    * @event Shard#resume","                    * @prop {Number} id The ID of the shard","                    */","                    this.emit(\"resume\");","                    break;","                }","","                this.client.user = this.client.users.add(new ExtendedUser(packet.d.user, this.client), this.client);","                if(this.client.user.bot) {","                    this.client.bot = true;","                    if(!this.client.token.startsWith(\"Bot \")) {","                        this.client.token = \"Bot \" + this.client.token;","                    }","                } else {","                    this.client.bot = false;","                    this.client.userGuildSettings = packet.d.user_guild_settings;","                    this.client.userSettings = packet.d.user_settings;","                }","","                if(packet.d._trace) {","                    this.discordServerTrace = packet.d._trace;","                }","","                this.sessionID = packet.d.session_id;","","                packet.d.guilds.forEach((guild) => {","                    if(guild.unavailable) {","                        this.client.guilds.remove(guild);","                        this.client.unavailableGuilds.add(guild, this.client, true);","                    } else {","                        this.client.unavailableGuilds.remove(this.createGuild(guild));","                    }","                });","","                packet.d.private_channels.forEach((channel) => {","                    if(channel.type === undefined || channel.type === 1) {","                        this.client.privateChannelMap[channel.recipients[0].id] = channel.id;","                        this.client.privateChannels.add(channel, this.client, true);","                    } else if(channel.type === 3) {","                        this.client.groupChannels.add(channel, this.client, true);","                    } else {","                        this.emit(\"error\", new Error(\"Unhandled READY private_channel type: \" + JSON.stringify(channel, null, 2)));","                    }","                });","","                if(packet.d.relationships) {","                    packet.d.relationships.forEach((relationship) => {","                        this.client.relationships.add(relationship, this.client, true);","                    });","                }","","                if(packet.d.presences) {","                    packet.d.presences.forEach((presence) => {","                        if(this.client.relationships.get(presence.user.id)) { // Avoid DM channel presences which are also in here","                            presence.id = presence.user.id;","                            this.client.relationships.update(presence, null, true);","                        }","                    });","                }","","                if(packet.d.notes) {","                    this.client.notes = packet.d.notes;","                }","","                this.preReady = true;","                /**","                * Fired when a shard finishes processing the ready packet","                * @event Client#shardPreReady","                * @prop {Number} id The ID of the shard","                */","                this.client.emit(\"shardPreReady\", this.id);","","                if(this.client.unavailableGuilds.size > 0 && packet.d.guilds.length > 0) {","                    this.restartGuildCreateTimeout();","                } else {","                    this.checkReady();","                }","","                // debugStr = \" | \" + packet.d.guilds.length + \" guilds\";","","                break;","            }","            case \"VOICE_SERVER_UPDATE\": {","                packet.d.session_id = this.sessionID;","                packet.d.user_id = this.client.user.id;","                packet.d.shard = this;","                this.client.voiceConnections.voiceServerUpdate(packet.d);","                break;","            }","            case \"USER_UPDATE\": {","                this.client.users.update(packet.d, this.client);","                break;","            }","            case \"RELATIONSHIP_ADD\": {","                if(this.client.bot) {","                    break;","                }","                var relationship = this.client.relationships.get(packet.d.id);","                if(relationship) {","                    var oldRelationship = {","                        type: relationship.type","                    };","                    /**","                    * Fired when a relationship is updated","                    * @event Client#relationshipUpdate","                    * @prop {Relationship} relationship The relationship","                    * @prop {Object} oldRelationship The old relationship data","                    * @prop {Number} oldRelationship.type The old type of the relationship","                    */","                    this.client.emit(\"relationshipUpdate\", this.client.relationships.update(packet.d), oldRelationship);","                } else {","                    /**","                    * Fired when a relationship is added","                    * @event Client#relationshipAdd","                    * @prop {Relationship} relationship The relationship","                    */","                    this.client.emit(\"relationshipAdd\", this.client.relationships.add(packet.d, this.client));","                }","                break;","            }","            case \"RELATIONSHIP_REMOVE\": {","                if(this.client.bot) {","                    break;","                }","                /**","                * Fired when a relationship is removed","                * @event Client#relationshipRemove","                * @prop {Relationship} relationship The relationship","                */","                this.client.emit(\"relationshipRemove\", this.client.relationships.remove(packet.d));","                break;","            }","            case \"GUILD_EMOJIS_UPDATE\": {","                var guild = this.client.guilds.get(packet.d.guild_id);","                var oldEmojis = guild.emojis;","                guild.update(packet.d);","                /**","                * Fired when a guild's emojis are updated","                * @event Client#guildEmojisUpdate","                * @prop {Guild} guild The guild","                * @prop {Array} emojis The updated emojis of the guild","                * @prop {Array} oldEmojis The old emojis of the guild","                */","                this.client.emit(\"guildEmojisUpdate\", guild, guild.emojis, oldEmojis);","                break;","            }","            case \"CHANNEL_PINS_UPDATE\": {","                var channel = this.client.getChannel(packet.d.channel_id);","                if(!channel) {","                    this.client.emit(\"debug\", `CHANNEL_PINS_UPDATE target channel ${packet.d.channel_id} not found`);","                    break;","                }","                var oldTimestamp = channel.lastPinTimestamp;","                channel.lastPinTimestamp = Date.parse(packet.d.timestamp);","                /**","                * Fired when a channel pin timestamp is updated","                * @event Client#channelPinUpdate","                * @prop {Channel} channel The channel","                * @prop {Number} timestamp The new timestamp","                * @prop {Number} oldTimestamp The old timestamp","                */","                this.client.emit(\"channelPinUpdate\", channel, channel.lastPinTimestamp, oldTimestamp);","                break;","            }","            case \"PRESENCES_REPLACE\": {","                for(var presence of packet.d) {","                    var guild = this.client.guilds.get(presence.guild_id);","                    if(!guild) {","                        this.client.emit(\"warn\", \"Rogue presences replace: \" + JSON.stringify(presence), this.id);","                        continue;","                    }","                    var member = guild.members.get(presence.user.id);","                    if(!member && presence.user.username) {","                        presence.id = presence.user.id;","                        member.update(presence);","                    }","                }","                break;","            }","            case \"USER_NOTE_UPDATE\": {","                if(packet.d.note) {","                    this.client.notes[packet.d.id] = packet.d.note;","                } else {","                    this.client.notes[packet.d.id];","                }","                break;","            }","            case \"MESSAGE_ACK\": // Ignore these","            case \"GUILD_INTEGRATIONS_UPDATE\":","            case \"USER_SETTINGS_UPDATE\":","            case \"CHANNEL_PINS_ACK\": {","                break;","            }","            default: {","                /**","                * Fired when the shard encounters an unknown packet","                * @event Client#unknown","                * @prop {Object} packet The unknown packet","                * @prop {Number} id The ID of the shard","                */","                this.client.emit(\"unknown\", packet, this.id);","                break;","            }","        } /* eslint-enable no-redeclare */","        // this.client.emit(\"debug\", packet.t + \": \" + (Date.now() - startTime) + \"ms\" + debugStr, this.id);","    }","","    syncGuild(guildID) {","        if(this.guildSyncQueueLength + 3 + guildID.length > 4081) { // 4096 - \"{\\\"op\\\":12,\\\"d\\\":[]}\".length + 1 for lazy comma offset","            this.requestGuildSync(this.guildSyncQueue);","            this.guildSyncQueue = [guildID];","            this.guildSyncQueueLength = 1 + guildID.length + 3;","        } else if(this.ready) {","            this.requestGuildSync([guildID]);","        } else {","            this.guildSyncQueue.push(guildID);","            this.guildSyncQueueLength += guildID.length + 3;","        }","    }","","    requestGuildSync(guildID) {","        this.sendWS(OPCodes.SYNC_GUILD, guildID);","    }","","    createGuild(_guild) {","        this.client.guildShardMap[_guild.id] = this.id;","        var guild = this.client.guilds.add(_guild, this.client, true);","        if(this.client.bot === false) {","            ++this.unsyncedGuilds;","            this.syncGuild(guild.id);","        }","        if(this.client.options.getAllUsers && guild.members.size < guild.memberCount) {","            guild.fetchAllMembers();","        }","        return guild;","    }","","    restartGuildCreateTimeout() {","        if(this.guildCreateTimeout) {","            clearTimeout(this.guildCreateTimeout);","            this.guildCreateTimeout = null;","        }","        if(!this.ready) {","            if(this.client.unavailableGuilds.size === 0 && this.unsyncedGuilds === 0) {","                return this.checkReady();","            }","            this.guildCreateTimeout = setTimeout(() => {","                this.checkReady();","            }, this.client.options.guildCreateTimeout);","        }","    }","","    getGuildMembers(guildID, chunkCount) {","        this.getAllUsersCount[guildID] = chunkCount;","        if(this.getAllUsersLength + 3 + guildID.length > 4048) { // 4096 - \"{\\\"op\\\":8,\\\"d\\\":{\\\"guild_id\\\":[],\\\"query\\\":\\\"\\\",\\\"limit\\\":0}}\".length + 1 for lazy comma offset","            this.requestGuildMembers(this.getAllUsersQueue);","            this.getAllUsersQueue = [guildID];","            this.getAllUsersLength = 1 + guildID.length + 3;","        } else if(this.ready) {","            this.requestGuildMembers([guildID]);","        } else {","            this.getAllUsersQueue.push(guildID);","            this.getAllUsersLength += guildID.length + 3;","        }","    }","","    requestGuildMembers(guildID, query, limit) {","        this.sendWS(OPCodes.GET_GUILD_MEMBERS, {","            guild_id: guildID,","            query: query || \"\",","            limit: limit || 0","        });","    }","","    checkReady() {","        if(!this.ready) {","            if(this.guildSyncQueue.length > 0) {","                this.requestGuildSync(this.guildSyncQueue);","                this.guildSyncQueue = [];","                this.guildSyncQueueLength = 1;","                return;","            }","            if(this.unsyncedGuilds > 0) {","                return;","            }","            if(this.getAllUsersQueue.length > 0) {","                this.requestGuildMembers(this.getAllUsersQueue);","                this.getAllUsersQueue = [];","                this.getAllUsersLength = 1;","                return;","            }","            if(Object.keys(this.getAllUsersCount).length === 0) {","                this.ready = true;","                /**","                * Fired when the shard turns ready","                * @event Shard#ready","                */","                this.emit(\"ready\");","            }","        }","    }","","    initializeWS() {","        this.status = \"connecting\";","        this.ws = new WebSocket(this.client.gatewayURL);","        this.ws.onopen = () => {","            if(!this.client.token) {","                return this.disconnect(null, new Error(\"Token not specified\"));","            }","            this.status = \"handshaking\";","            /**","            * Fired when the shard establishes a connection","            * @event Client#connect","            * @prop {Number} id The ID of the shard","            */","            this.client.emit(\"connect\", this.id);","            this.lastHeartbeatAck = true;","        };","        this.ws.onmessage = (m) => {","            try {","                var packet = this.parse(m);","","                if(this.client.listeners(\"rawWS\").length > 0) {","                    /**","                    * Fired when the shard receives a websocket packet","                    * @event Client#rawWS","                    * @prop {Object} packet The packet","                    * @prop {Number} id The ID of the shard","                    */","                    this.client.emit(\"rawWS\", packet, this.id);","                }","","                if(packet.s) {","                    if(packet.s > this.seq + 1 && this.ws) {","                        /**","                        * Fired to warn of something weird but non-breaking happening","                        * @event Client#warn","                        * @prop {String} message The warning message","                        * @prop {Number} id The ID of the shard","                        */","                        this.client.emit(\"warn\", \"Non-consecutive sequence, requesting resume\", this.id);","                        this.seq = packet.s;","                        this.resume();","                    }","                    this.seq = packet.s;","                }","","                switch(packet.op) {","                    case OPCodes.EVENT: {","                        if(!this.client.options.disableEvents[packet.t]) {","                            this.wsEvent(packet);","                        }","                        break;","                    }","                    case OPCodes.HEARTBEAT: {","                        this.heartbeat();","                        break;","                    }","                    case OPCodes.INVALID_SESSION: {","                        this.seq = 0;","                        this.sessionID = null;","                        this.client.emit(\"warn\", \"Invalid session, reidentifying!\", this.id);","                        this.identify();","                        break;","                    }","                    case OPCodes.RECONNECT: {","                        this.disconnect({","                            reconnect: \"auto\"","                        });","                        break;","                    }","                    case OPCodes.HELLO: {","                        if(packet.d.heartbeat_interval > 0) {","                            if(this.heartbeatInterval) {","                                clearInterval(this.heartbeatInterval);","                            }","                            this.heartbeatInterval = setInterval(() => this.heartbeat(true), packet.d.heartbeat_interval);","                        }","","                        this.discordServerTrace = packet.d._trace;","                        this.connecting = false;","","                        if(this.sessionID) {","                            this.resume();","                        } else {","                            this.identify();","                        }","                        this.heartbeat();","                        break; /* eslint-enable no-unreachable */","                    }","                    case OPCodes.HEARTBEAT_ACK: {","                        this.lastHeartbeatAck = true;","                        this.lastHeartbeatReceived = new Date().getTime();","                        break;","                    }","                    default: {","                        this.client.emit(\"unknown\", packet, this.id);","                        break;","                    }","                }","            } catch(err) {","                this.client.emit(\"error\", err, this.id);","            }","        };","        this.ws.onerror = (event) => {","            this.client.emit(\"error\", event, this.id);","        };","        this.ws.onclose = (event) => {","            var err = event.code === 1000 ? null : new Error(event.code + \": \" + event.reason);","            if(event.code) {","                this.client.emit(\"warn\", `${event.code === 1000 ? \"Clean\" : \"Unclean\"} WS close: ${event.code}: ${event.reason}`, this.id);","                if(event.code === 4001) {","                    err = new Error(\"Gateway received invalid OP code\");","                } else if(event.code === 4002) {","                    err = new Error(\"Gateway received invalid message\");","                } else if(event.code === 4003) {","                    err = new Error(\"Not authenticated\");","                } else if(event.code === 4004) {","                    err = new Error(\"Authentication failed\");","                } else if(event.code === 4005) {","                    err = new Error(\"Already authenticated\");","                } else if(event.code === 4006 || event.code === 4009) {","                    this.sessionID = null;","                    err = new Error(\"Invalid session\");","                } else if(event.code === 4007) {","                    err = new Error(\"Invalid sequence number: \" + this.seq);","                    this.seq = 0;","                } else if(event.code === 4008) {","                    err = new Error(\"Gateway connection was ratelimited\");","                } else if(event.code === 4010) {","                    err = new Error(\"Invalid shard key\");","                } else if(event.code === 4011) {","                    err = new Error(\"Shard has too many guilds (>2500)\");","                } else if(event.code === 1006) {","                    err = new Error(\"Connection reset by peer\");","                } else if(!event.wasClean && event.reason) {","                    err = new Error(event.code + \": \" + event.reason);","                }","            } else {","                this.client.emit(\"warn\", event, this.id);","            }","            this.disconnect({","                reconnect: \"auto\"","            }, err);","        };","","        setTimeout(() => {","            if(this.connecting) {","                this.disconnect({","                    reconnect: \"auto\"","                }, new Error(\"Connection timeout\"));","            }","        }, this.client.options.connectionTimeout);","    }","","    parse(message) {","        var data = message.data;","        if(Erlpack) {","            if(data instanceof ArrayBuffer) {","                data = new Buffer(data);","            }","            return Erlpack.unpack(data);","        } else {","            if(data instanceof ArrayBuffer) {","                data = Pako.inflate(data, {","                    to: \"string\"","                });","            } else if(data instanceof Buffer) {","                data = Zlib.inflateSync(data).toString();","            }","            return JSON.parse(data);","        }","    }","","    heartbeat(normal) {","        if(normal && !this.lastHeartbeatAck) {","            return this.disconnect({","                reconnect: \"auto\"","            }, new Error(\"Server didn't acknowledge previous heartbeat, possible lost connection\"));","        }","        this.lastHeartbeatAck = false;","        this.lastHeartbeatSent = new Date().getTime();","        this.sendWS(OPCodes.HEARTBEAT, this.seq, true);","    }","","    sendWS(op, _data) {","        if(this.ws && this.ws.readyState === WebSocket.OPEN) {","            var i = 0;","            var waitFor = 1;","            var func = () => {","                if(++i >= waitFor && this.ws && this.ws.readyState === WebSocket.OPEN) {","                    var data = Erlpack ? Erlpack.pack({op: op, d: _data}) : JSON.stringify({op: op, d: _data});","                    this.ws.send(data);","                    this.client.emit(\"debug\", JSON.stringify({op: op, d: _data}), this.id);","                }","            };","            if(op === OPCodes.STATUS_UPDATE) {","                ++waitFor;","                this.presenceUpdateBucket.queue(func);","            }","            this.globalBucket.queue(func);","        }","    }","","    /**","    * Updates the bot's status on all guilds the shard is in","    * @arg {String} [status] Sets the bot's status, either \"online\", \"idle\", \"dnd\", or \"invisible\"","    * @arg {Object} [game] Sets the bot's active game, null to clear","    * @arg {String} game.name Sets the name of the bot's active game","    * @arg {Number} [game.type] The type of game. 0 is default, 1 is streaming (Twitch only)","    * @arg {String} [game.url] Sets the url of the shard's active game","    */","    editStatus(status, game) {","        if(game === undefined && typeof status === \"object\") {","            game = status;","            status = undefined;","        }","        if(status) {","            this.presence.status = status;","        }","        if(game !== undefined) {","            this.presence.game = game;","        }","","        this.sendWS(OPCodes.STATUS_UPDATE, {","            afk: this.presence.status === \"idle\", // TODO: what's this AFK field?","            game: this.presence.game,","            since: this.presence.status === \"idle\" ? Date.now() : 0,","            status: this.presence.status","        });","","        this.client.guilds.forEach((guild) => {","            if(guild.shard.id === this.id) {","                guild.members.get(this.client.user.id).update(this.presence);","            }","        });","    }","}","","module.exports = Shard;",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"13":1,"14":1,"16":1,"18":1,"19":1,"20":1,"23":1,"24":1,"25":1,"28":1,"29":1,"47":0,"49":0,"50":0,"52":0,"56":0,"63":0,"64":0,"65":0,"67":0,"68":0,"69":0,"78":0,"79":0,"81":0,"82":0,"83":0,"84":0,"86":0,"87":0,"88":0,"89":0,"90":0,"92":0,"101":0,"108":0,"109":0,"111":0,"112":0,"113":0,"120":0,"121":0,"122":0,"124":0,"125":0,"126":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"162":0,"170":0,"181":0,"182":0,"184":0,"185":0,"187":0,"193":0,"195":0,"196":0,"197":0,"198":0,"199":0,"205":0,"206":0,"216":0,"219":0,"220":0,"221":0,"222":0,"223":0,"225":0,"240":0,"241":0,"243":0,"244":0,"245":0,"246":0,"248":0,"249":0,"250":0,"251":0,"256":0,"257":0,"258":0,"260":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"282":0,"283":0,"284":0,"288":0,"289":0,"290":0,"291":0,"293":0,"295":0,"297":0,"298":0,"299":0,"301":0,"302":0,"303":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"313":0,"315":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"329":0,"330":0,"331":0,"332":0,"334":0,"335":0,"343":0,"344":0,"352":0,"354":0,"361":0,"364":0,"375":0,"377":0,"380":0,"387":0,"389":0,"392":0,"393":0,"394":0,"400":0,"402":0,"404":0,"407":0,"408":0,"409":0,"411":0,"412":0,"415":0,"416":0,"444":0,"445":0,"448":0,"449":0,"450":0,"457":0,"461":0,"464":0,"465":0,"466":0,"474":0,"480":0,"483":0,"484":0,"485":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"496":0,"511":0,"515":0,"518":0,"519":0,"520":0,"522":0,"523":0,"524":0,"525":0,"526":0,"527":0,"528":0,"541":0,"545":0,"548":0,"549":0,"550":0,"561":0,"565":0,"568":0,"569":0,"570":0,"577":0,"578":0,"581":0,"582":0,"583":0,"584":0,"585":0,"590":0,"600":0,"601":0,"604":0,"605":0,"607":0,"608":0,"609":0,"616":0,"620":0,"623":0,"624":0,"625":0,"626":0,"632":0,"639":0,"642":0,"643":0,"646":0,"652":0,"654":0,"657":0,"658":0,"659":0,"687":0,"688":0,"691":0,"692":0,"693":0,"694":0,"695":0,"698":0,"704":0,"711":0,"715":0,"724":0,"725":0,"734":0,"735":0,"744":0,"745":0,"746":0,"749":0,"750":0,"751":0,"752":0,"753":0,"775":0,"776":0,"785":0,"786":0,"787":0,"789":0,"792":0,"793":0,"799":0,"800":0,"802":0,"803":0,"804":0,"805":0,"807":0,"808":0,"809":0,"810":0,"811":0,"812":0,"815":0,"817":0,"820":0,"821":0,"822":0,"824":0,"825":0,"826":0,"828":0,"834":0,"835":0,"843":0,"855":0,"856":0,"859":0,"860":0,"861":0,"862":0,"863":0,"869":0,"872":0,"873":0,"874":0,"875":0,"876":0,"878":0,"879":0,"880":0,"883":0,"884":0,"885":0,"886":0,"889":0,"891":0,"894":0,"895":0,"896":0,"897":0,"899":0,"900":0,"901":0,"902":0,"903":0,"904":0,"905":0,"906":0,"908":0,"909":0,"910":0,"912":0,"915":0,"916":0,"918":0,"925":0,"926":0,"929":0,"930":0,"931":0,"933":0,"951":0,"952":0,"955":0,"956":0,"957":0,"959":0,"960":0,"966":0,"967":0,"970":0,"977":0,"978":0,"981":0,"988":0,"989":0,"1001":0,"1002":0,"1010":0,"1011":0,"1014":0,"1015":0,"1016":0,"1017":0,"1018":0,"1020":0,"1030":0,"1031":0,"1032":0,"1035":0,"1039":0,"1042":0,"1043":0,"1044":0,"1045":0,"1047":0,"1048":0,"1049":0,"1050":0,"1051":0,"1053":0,"1054":0,"1056":0,"1057":0,"1059":0,"1060":0,"1061":0,"1062":0,"1064":0,"1065":0,"1066":0,"1067":0,"1068":0,"1069":0,"1072":0,"1076":0,"1077":0,"1078":0,"1079":0,"1083":0,"1084":0,"1086":0,"1087":0,"1088":0,"1089":0,"1091":0,"1092":0,"1093":0,"1100":0,"1101":0,"1104":0,"1105":0,"1106":0,"1107":0,"1108":0,"1111":0,"1112":0,"1113":0,"1116":0,"1117":0,"1120":0,"1122":0,"1123":0,"1124":0,"1125":0,"1127":0,"1131":0,"1132":0,"1133":0,"1134":0,"1135":0,"1136":0,"1138":0,"1142":0,"1143":0,"1144":0,"1148":0,"1149":0,"1150":0,"1151":0,"1152":0,"1157":0,"1158":0,"1161":0,"1167":0,"1169":0,"1170":0,"1172":0,"1177":0,"1180":0,"1181":0,"1182":0,"1183":0,"1184":0,"1187":0,"1188":0,"1191":0,"1192":0,"1194":0,"1195":0,"1196":0,"1206":0,"1213":0,"1215":0,"1218":0,"1219":0,"1226":0,"1227":0,"1230":0,"1231":0,"1232":0,"1240":0,"1241":0,"1244":0,"1245":0,"1246":0,"1247":0,"1249":0,"1250":0,"1258":0,"1259":0,"1262":0,"1263":0,"1264":0,"1265":0,"1266":0,"1268":0,"1269":0,"1270":0,"1271":0,"1274":0,"1277":0,"1278":0,"1280":0,"1282":0,"1288":0,"1297":0,"1298":0,"1305":0,"1306":0,"1307":0,"1308":0,"1309":0,"1310":0,"1312":0,"1313":0,"1318":0,"1322":0,"1323":0,"1324":0,"1325":0,"1326":0,"1328":0,"1329":0,"1331":0,"1335":0,"1336":0,"1337":0,"1339":0,"1340":0,"1341":0,"1343":0,"1344":0,"1350":0,"1351":0,"1352":0,"1353":0,"1354":0,"1355":0,"1356":0,"1358":0,"1359":0,"1364":0,"1372":0,"1373":0,"1374":0,"1375":0,"1376":0,"1377":0,"1379":0,"1380":0,"1382":0,"1383":0,"1384":0,"1385":0,"1386":0,"1388":0,"1389":0,"1394":0,"1400":0,"1401":0,"1402":0,"1403":0,"1404":0,"1406":0,"1412":0,"1413":0,"1415":0,"1416":0,"1417":0,"1419":0,"1426":0,"1429":0,"1430":0,"1437":0,"1438":0,"1439":0,"1441":0,"1444":0,"1446":0,"1447":0,"1449":0,"1452":0,"1453":0,"1456":0,"1457":0,"1458":0,"1459":0,"1460":0,"1463":0,"1466":0,"1469":0,"1470":0,"1471":0,"1473":0,"1476":0,"1477":0,"1479":0,"1480":0,"1482":0,"1484":0,"1485":0,"1488":0,"1489":0,"1490":0,"1493":0,"1494":0,"1498":0,"1501":0,"1502":0,"1504":0,"1505":0,"1506":0,"1507":0,"1508":0,"1509":0,"1510":0,"1511":0,"1512":0,"1513":0,"1514":0,"1515":0,"1516":0,"1517":0,"1518":0,"1519":0,"1520":0,"1521":0,"1522":0,"1523":0,"1524":0,"1525":0,"1526":0,"1527":0,"1528":0,"1529":0,"1530":0,"1531":0,"1532":0,"1533":0,"1536":0,"1538":0,"1543":0,"1544":0,"1545":0,"1553":0,"1554":0,"1555":0,"1556":0,"1558":0,"1560":0,"1561":0,"1564":0,"1565":0,"1567":0,"1572":0,"1573":0,"1577":0,"1578":0,"1579":0,"1583":0,"1584":0,"1585":0,"1586":0,"1587":0,"1588":0,"1589":0,"1590":0,"1593":0,"1594":0,"1595":0,"1597":0,"1610":0,"1611":0,"1612":0,"1614":0,"1615":0,"1617":0,"1618":0,"1621":0,"1628":0,"1629":0,"1630":0,"1636":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/util/Bucket.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/util/Bucket.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":15},"end":{"line":19,"column":50}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":9},"end":{"line":33,"column":16}}},"3":{"name":"(anonymous_3)","line":38,"loc":{"start":{"line":38,"column":9},"end":{"line":38,"column":12}}}},"statementMap":{"1":{"start":{"line":20,"column":8},"end":{"line":20,"column":37}},"2":{"start":{"line":21,"column":8},"end":{"line":21,"column":33}},"3":{"start":{"line":22,"column":8},"end":{"line":24,"column":10}},"4":{"start":{"line":25,"column":8},"end":{"line":25,"column":57}},"5":{"start":{"line":26,"column":8},"end":{"line":26,"column":25}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":31}},"7":{"start":{"line":35,"column":8},"end":{"line":35,"column":21}},"8":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"9":{"start":{"line":40,"column":12},"end":{"line":40,"column":19}},"10":{"start":{"line":42,"column":8},"end":{"line":45,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":43,"column":40}},"12":{"start":{"line":44,"column":12},"end":{"line":44,"column":69}},"13":{"start":{"line":47,"column":8},"end":{"line":47,"column":16}},"14":{"start":{"line":48,"column":8},"end":{"line":61,"column":9}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":26}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}},"17":{"start":{"line":51,"column":12},"end":{"line":51,"column":71}},"18":{"start":{"line":52,"column":12},"end":{"line":60,"column":13}},"19":{"start":{"line":53,"column":16},"end":{"line":53,"column":23}},"20":{"start":{"line":54,"column":16},"end":{"line":54,"column":43}},"21":{"start":{"line":56,"column":16},"end":{"line":58,"column":24}},"22":{"start":{"line":57,"column":20},"end":{"line":57,"column":27}},"23":{"start":{"line":59,"column":16},"end":{"line":59,"column":49}},"24":{"start":{"line":63,"column":8},"end":{"line":68,"column":9}},"25":{"start":{"line":64,"column":12},"end":{"line":67,"column":175}},"26":{"start":{"line":65,"column":16},"end":{"line":65,"column":36}},"27":{"start":{"line":66,"column":16},"end":{"line":66,"column":29}},"28":{"start":{"line":72,"column":0},"end":{"line":72,"column":24}}},"branchMap":{"1":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":26},"end":{"line":22,"column":36}},{"start":{"line":22,"column":40},"end":{"line":24,"column":9}}]},"2":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":8},"end":{"line":39,"column":8}},{"start":{"line":39,"column":8},"end":{"line":39,"column":8}}]},"3":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":11},"end":{"line":39,"column":23}},{"start":{"line":39,"column":27},"end":{"line":39,"column":51}}]},"4":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":8}},{"start":{"line":42,"column":8},"end":{"line":42,"column":8}}]},"5":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":14},"end":{"line":48,"column":36}},{"start":{"line":48,"column":40},"end":{"line":48,"column":69}}]},"6":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":12},"end":{"line":52,"column":12}},{"start":{"line":52,"column":12},"end":{"line":52,"column":12}}]},"7":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":15},"end":{"line":52,"column":44}},{"start":{"line":52,"column":48},"end":{"line":52,"column":56}}]},"8":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":8}},{"start":{"line":63,"column":8},"end":{"line":63,"column":8}}]},"9":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":11},"end":{"line":63,"column":33}},{"start":{"line":63,"column":37},"end":{"line":63,"column":50}}]},"10":{"line":67,"type":"cond-expr","locations":[{"start":{"line":67,"column":47},"end":{"line":67,"column":70}},{"start":{"line":67,"column":73},"end":{"line":67,"column":173}}]}},"code":["\"use strict\";","","/**","* Handle ratelimiting something","* @prop {Number} tokens How many tokens the bucket has consumed in this interval","* @prop {Number} lastReset Timestamp of last token clearing","* @prop {Number} lastSend Timestamp of last token consumption","* @prop {Number} tokenLimit The max number tokens the bucket can consume per interval","* @prop {Number} interval How long (in ms) to wait between clearing used tokens","*/","class Bucket {","    /**","    * Construct a Bucket","    * @arg {Number} tokenLimit The max number of tokens the bucket can consume per interval","    * @arg {Number} interval How long (in ms) to wait between clearing used tokens","    * @arg {Object} [latencyRef] An object","    * @arg {Number} latencyRef.latency Interval between consuming tokens","    */","    constructor(tokenLimit, interval, latencyRef) {","        this.tokenLimit = tokenLimit;","        this.interval = interval;","        this.latencyRef = latencyRef || {","            latency: 0","        };","        this.lastReset = this.tokens = this.lastSend = 0;","        this._queue = [];","    }","","    /**","    * Queue something in the Bucket","    * @arg {Function} func A callback to call when a token can be consumed","    */","    queue(func) {","        this._queue.push(func);","        this.check();","    }","","    check() {","        if(this.timeout || this._queue.length === 0) {","            return;","        }","        if(this.lastReset + this.interval + this.tokenLimit * this.latencyRef.latency < Date.now()) {","            this.lastReset = Date.now();","            this.tokens = Math.max(0, this.tokens - this.tokenLimit);","        }","","        var val;","        while(this._queue.length > 0 && this.tokens < this.tokenLimit) {","            this.tokens++;","            let item = this._queue.shift();","            val = this.latencyRef.latency - Date.now() + this.lastSend;","            if(this.latencyRef.latency === 0 || val <= 0) {","                item();","                this.lastSend = Date.now();","            } else {","                setTimeout(() => {","                    item();","                }, val);","                this.lastSend = Date.now() + val;","            }","        }","","        if(this._queue.length > 0 && !this.timeout) {","            this.timeout = setTimeout(() => {","                this.timeout = null;","                this.check();","            }, this.tokens < this.tokenLimit ? this.latencyRef.latency : Math.max(0, this.lastReset + this.interval + this.tokenLimit * this.latencyRef.latency - Date.now()));","        }","    }","}","","module.exports = Bucket;",""],"l":{"20":0,"21":0,"22":0,"25":0,"26":0,"34":0,"35":0,"39":0,"40":0,"42":0,"43":0,"44":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"56":0,"57":0,"59":0,"63":0,"64":0,"65":0,"66":0,"72":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/UnavailableGuild.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/structures/UnavailableGuild.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":15},"end":{"line":12,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":13,"column":8},"end":{"line":13,"column":23}},"3":{"start":{"line":14,"column":8},"end":{"line":14,"column":70}},"4":{"start":{"line":15,"column":8},"end":{"line":15,"column":46}},"5":{"start":{"line":19,"column":0},"end":{"line":19,"column":34}}},"branchMap":{},"code":["\"use strict\";","","const Base = require(\"./Base\");","","/**","* Represents a guild","* @prop {String} id The ID of the guild","* @prop {Boolean} unavailable Whether the guild is unavailable or not","* @prop {Shard} shard The Shard that owns the guild","*/","class UnavailableGuild extends Base {","    constructor(data, client) {","        super(data.id);","        this.shard = client.shards.get(client.guildShardMap[this.id]);","        this.unavailable = !!data.unavailable;","    }","}","","module.exports = UnavailableGuild;",""],"l":{"3":1,"13":0,"14":0,"15":0,"19":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/VoiceConnectionManager.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/VoiceConnectionManager.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":15},"end":{"line":6,"column":26}}},"2":{"name":"(anonymous_2)","line":11,"loc":{"start":{"line":11,"column":8},"end":{"line":11,"column":38}}},"3":{"name":"(anonymous_3)","line":31,"loc":{"start":{"line":31,"column":21},"end":{"line":31,"column":28}}},"4":{"name":"(anonymous_4)","line":85,"loc":{"start":{"line":85,"column":9},"end":{"line":85,"column":19}}},"5":{"name":"(anonymous_5)","line":95,"loc":{"start":{"line":95,"column":10},"end":{"line":95,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":49}},"2":{"start":{"line":7,"column":8},"end":{"line":7,"column":56}},"3":{"start":{"line":8,"column":8},"end":{"line":8,"column":32}},"4":{"start":{"line":12,"column":8},"end":{"line":12,"column":43}},"5":{"start":{"line":13,"column":8},"end":{"line":16,"column":9}},"6":{"start":{"line":14,"column":12},"end":{"line":14,"column":48}},"7":{"start":{"line":15,"column":12},"end":{"line":15,"column":47}},"8":{"start":{"line":17,"column":8},"end":{"line":28,"column":11}},"9":{"start":{"line":18,"column":12},"end":{"line":27,"column":14}},"10":{"start":{"line":24,"column":20},"end":{"line":24,"column":55}},"11":{"start":{"line":25,"column":20},"end":{"line":25,"column":63}},"12":{"start":{"line":32,"column":8},"end":{"line":35,"column":9}},"13":{"start":{"line":33,"column":12},"end":{"line":33,"column":68}},"14":{"start":{"line":34,"column":12},"end":{"line":34,"column":61}},"15":{"start":{"line":36,"column":8},"end":{"line":36,"column":49}},"16":{"start":{"line":37,"column":8},"end":{"line":46,"column":9}},"17":{"start":{"line":38,"column":12},"end":{"line":40,"column":13}},"18":{"start":{"line":39,"column":16},"end":{"line":39,"column":23}},"19":{"start":{"line":41,"column":12},"end":{"line":45,"column":16}},"20":{"start":{"line":47,"column":8},"end":{"line":53,"column":11}},"21":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"22":{"start":{"line":55,"column":12},"end":{"line":55,"column":19}},"23":{"start":{"line":57,"column":8},"end":{"line":57,"column":57}},"24":{"start":{"line":58,"column":8},"end":{"line":69,"column":10}},"25":{"start":{"line":59,"column":12},"end":{"line":59,"column":49}},"26":{"start":{"line":60,"column":12},"end":{"line":65,"column":13}},"27":{"start":{"line":61,"column":16},"end":{"line":63,"column":17}},"28":{"start":{"line":62,"column":20},"end":{"line":62,"column":69}},"29":{"start":{"line":64,"column":16},"end":{"line":64,"column":23}},"30":{"start":{"line":66,"column":12},"end":{"line":66,"column":77}},"31":{"start":{"line":67,"column":12},"end":{"line":67,"column":53}},"32":{"start":{"line":68,"column":12},"end":{"line":68,"column":61}},"33":{"start":{"line":70,"column":8},"end":{"line":81,"column":10}},"34":{"start":{"line":71,"column":12},"end":{"line":71,"column":49}},"35":{"start":{"line":72,"column":12},"end":{"line":77,"column":13}},"36":{"start":{"line":73,"column":16},"end":{"line":75,"column":17}},"37":{"start":{"line":74,"column":20},"end":{"line":74,"column":79}},"38":{"start":{"line":76,"column":16},"end":{"line":76,"column":23}},"39":{"start":{"line":78,"column":12},"end":{"line":78,"column":62}},"40":{"start":{"line":79,"column":12},"end":{"line":79,"column":53}},"41":{"start":{"line":80,"column":12},"end":{"line":80,"column":71}},"42":{"start":{"line":82,"column":8},"end":{"line":82,"column":85}},"43":{"start":{"line":86,"column":8},"end":{"line":86,"column":43}},"44":{"start":{"line":87,"column":8},"end":{"line":89,"column":9}},"45":{"start":{"line":88,"column":12},"end":{"line":88,"column":19}},"46":{"start":{"line":90,"column":8},"end":{"line":90,"column":32}},"47":{"start":{"line":91,"column":8},"end":{"line":91,"column":30}},"48":{"start":{"line":92,"column":8},"end":{"line":92,"column":32}},"49":{"start":{"line":96,"column":8},"end":{"line":96,"column":43}},"50":{"start":{"line":97,"column":8},"end":{"line":99,"column":9}},"51":{"start":{"line":98,"column":12},"end":{"line":98,"column":19}},"52":{"start":{"line":100,"column":8},"end":{"line":100,"column":37}},"53":{"start":{"line":104,"column":0},"end":{"line":104,"column":40}}},"branchMap":{"1":{"line":7,"type":"binary-expr","locations":[{"start":{"line":7,"column":14},"end":{"line":7,"column":22}},{"start":{"line":7,"column":26},"end":{"line":7,"column":54}}]},"2":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":8},"end":{"line":13,"column":8}},{"start":{"line":13,"column":8},"end":{"line":13,"column":8}}]},"3":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":25},"end":{"line":20,"column":32}},{"start":{"line":20,"column":36},"end":{"line":20,"column":38}}]},"4":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"5":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":11},"end":{"line":32,"column":44}},{"start":{"line":32,"column":48},"end":{"line":32,"column":89}}]},"6":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":8}},{"start":{"line":37,"column":8},"end":{"line":37,"column":8}}]},"7":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":12},"end":{"line":38,"column":12}},{"start":{"line":38,"column":12},"end":{"line":38,"column":12}}]},"8":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":25},"end":{"line":48,"column":58}},{"start":{"line":48,"column":62},"end":{"line":48,"column":72}}]},"9":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":54,"column":8}},{"start":{"line":54,"column":8},"end":{"line":54,"column":8}}]},"10":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":11},"end":{"line":54,"column":45}},{"start":{"line":54,"column":49},"end":{"line":54,"column":90}}]},"11":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":12},"end":{"line":60,"column":12}},{"start":{"line":60,"column":12},"end":{"line":60,"column":12}}]},"12":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":16},"end":{"line":61,"column":16}},{"start":{"line":61,"column":16},"end":{"line":61,"column":16}}]},"13":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":12},"end":{"line":72,"column":12}},{"start":{"line":72,"column":12},"end":{"line":72,"column":12}}]},"14":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":16},"end":{"line":73,"column":16}},{"start":{"line":73,"column":16},"end":{"line":73,"column":16}}]},"15":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":8},"end":{"line":87,"column":8}},{"start":{"line":87,"column":8},"end":{"line":87,"column":8}}]},"16":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":8},"end":{"line":97,"column":8}},{"start":{"line":97,"column":8},"end":{"line":97,"column":8}}]}},"code":["\"use strict\";","","const Collection = require(\"../util/Collection\");","","class VoiceConnectionManager extends Collection {","    constructor(vcObject) {","        super(vcObject || require(\"./VoiceConnection\"));","        this.pendingGuilds = {};","    }","","    join(guildID, channelID, options) {","        var connection = this.get(guildID);","        if(connection) {","            connection.switchChannel(channelID);","            return Promise.resolve(connection);","        }","        return new Promise((res, rej) => {","            this.pendingGuilds[guildID] = {","                channelID: channelID,","                options: options || {},","                res: res,","                rej: rej,","                timeout: setTimeout(() => {","                    delete this.pendingGuilds[guildID];","                    rej(new Error(\"Voice connection timeout\"));","                }, 10000)","            };","        });","    }","","    voiceServerUpdate(data) {","        if(this.pendingGuilds[data.guild_id] && this.pendingGuilds[data.guild_id].timeout) {","            clearTimeout(this.pendingGuilds[data.guild_id].timeout);","            this.pendingGuilds[data.guild_id].timeout = null;","        }","        var connection = this.get(data.guild_id);","        if(!connection) {","            if(!this.pendingGuilds[data.guild_id]) {","                return;","            }","            connection = this.add(new this.baseObject(data.guild_id, {","                shard: data.shard,","                opusOnly: this.pendingGuilds[data.guild_id].options.opusOnly,","                shared: this.pendingGuilds[data.guild_id].options.shared","            }));","        }","        connection.connect({","            channel_id: (this.pendingGuilds[data.guild_id] || connection).channelID,","            endpoint: data.endpoint,","            token: data.token,","            session_id: data.session_id,","            user_id: data.user_id","        });","        if(!this.pendingGuilds[data.guild_id] || this.pendingGuilds[data.guild_id].waiting) {","            return;","        }","        this.pendingGuilds[data.guild_id].waiting = true;","        var disconnectHandler = () => {","            connection = this.get(data.guild_id);","            if(!this.pendingGuilds[data.guild_id]) {","                if(connection) {","                    connection.removeListener(\"ready\", readyHandler);","                }","                return;","            }","            this.pendingGuilds[data.guild_id].rej(new Error(\"Disconnected\"));","            delete this.pendingGuilds[data.guild_id];","            connection.removeListener(\"ready\", readyHandler);","        };","        var readyHandler = () => {","            connection = this.get(data.guild_id);","            if(!this.pendingGuilds[data.guild_id]) {","                if(connection) {","                    connection.removeListener(\"disconnect\", disconnectHandler);","                }","                return;","            }","            this.pendingGuilds[data.guild_id].res(connection);","            delete this.pendingGuilds[data.guild_id];","            connection.removeListener(\"disconnect\", disconnectHandler);","        };","        connection.once(\"ready\", readyHandler).once(\"disconnect\", disconnectHandler);","    }","","    leave(guildID) {","        var connection = this.get(guildID);","        if(!connection) {","            return;","        }","        connection.disconnect();","        connection._destroy();","        this.remove(connection);","    }","","    switch(guildID, channelID) {","        var connection = this.get(guildID);","        if(!connection) {","            return;","        }","        connection.switch(channelID);","    }","}","","module.exports = VoiceConnectionManager;",""],"l":{"3":1,"7":0,"8":0,"12":0,"13":0,"14":0,"15":0,"17":0,"18":0,"24":0,"25":0,"32":0,"33":0,"34":0,"36":0,"37":0,"38":0,"39":0,"41":0,"47":0,"54":0,"55":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"64":0,"66":0,"67":0,"68":0,"70":0,"71":0,"72":0,"73":0,"74":0,"76":0,"78":0,"79":0,"80":0,"82":0,"86":0,"87":0,"88":0,"90":0,"91":0,"92":0,"96":0,"97":0,"98":0,"100":0,"104":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/command/Command.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/command/Command.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":42,"loc":{"start":{"line":42,"column":15},"end":{"line":42,"column":43}}},"2":{"name":"(anonymous_2)","line":97,"loc":{"start":{"line":97,"column":19},"end":{"line":97,"column":25}}},"3":{"name":"(anonymous_3)","line":148,"loc":{"start":{"line":148,"column":17},"end":{"line":148,"column":26}}},"4":{"name":"(anonymous_4)","line":159,"loc":{"start":{"line":159,"column":11},"end":{"line":159,"column":23}}},"5":{"name":"(anonymous_5)","line":206,"loc":{"start":{"line":206,"column":27},"end":{"line":206,"column":42}}},"6":{"name":"(anonymous_6)","line":250,"loc":{"start":{"line":250,"column":22},"end":{"line":250,"column":50}}},"7":{"name":"(anonymous_7)","line":271,"loc":{"start":{"line":271,"column":24},"end":{"line":271,"column":32}}}},"statementMap":{"1":{"start":{"line":43,"column":8},"end":{"line":43,"column":27}},"2":{"start":{"line":44,"column":8},"end":{"line":44,"column":67}},"3":{"start":{"line":45,"column":8},"end":{"line":45,"column":80}},"4":{"start":{"line":46,"column":8},"end":{"line":46,"column":41}},"5":{"start":{"line":47,"column":8},"end":{"line":47,"column":45}},"6":{"start":{"line":48,"column":8},"end":{"line":48,"column":57}},"7":{"start":{"line":49,"column":8},"end":{"line":49,"column":55}},"8":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"9":{"start":{"line":51,"column":12},"end":{"line":51,"column":43}},"10":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"11":{"start":{"line":54,"column":12},"end":{"line":54,"column":47}},"12":{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},"13":{"start":{"line":57,"column":12},"end":{"line":57,"column":43}},"14":{"start":{"line":59,"column":8},"end":{"line":61,"column":9}},"15":{"start":{"line":60,"column":12},"end":{"line":60,"column":45}},"16":{"start":{"line":62,"column":8},"end":{"line":62,"column":53}},"17":{"start":{"line":63,"column":8},"end":{"line":63,"column":51}},"18":{"start":{"line":64,"column":8},"end":{"line":64,"column":45}},"19":{"start":{"line":65,"column":8},"end":{"line":65,"column":39}},"20":{"start":{"line":66,"column":8},"end":{"line":66,"column":46}},"21":{"start":{"line":67,"column":8},"end":{"line":67,"column":64}},"22":{"start":{"line":68,"column":8},"end":{"line":68,"column":68}},"23":{"start":{"line":69,"column":8},"end":{"line":69,"column":55}},"24":{"start":{"line":70,"column":8},"end":{"line":72,"column":9}},"25":{"start":{"line":71,"column":12},"end":{"line":71,"column":45}},"26":{"start":{"line":73,"column":8},"end":{"line":91,"column":9}},"27":{"start":{"line":74,"column":12},"end":{"line":74,"column":38}},"28":{"start":{"line":75,"column":12},"end":{"line":75,"column":47}},"29":{"start":{"line":75,"column":33},"end":{"line":75,"column":46}},"30":{"start":{"line":76,"column":15},"end":{"line":91,"column":9}},"31":{"start":{"line":77,"column":12},"end":{"line":85,"column":15}},"32":{"start":{"line":78,"column":16},"end":{"line":84,"column":17}},"33":{"start":{"line":79,"column":20},"end":{"line":79,"column":38}},"34":{"start":{"line":79,"column":33},"end":{"line":79,"column":37}},"35":{"start":{"line":80,"column":23},"end":{"line":84,"column":17}},"36":{"start":{"line":81,"column":20},"end":{"line":81,"column":32}},"37":{"start":{"line":83,"column":20},"end":{"line":83,"column":96}},"38":{"start":{"line":86,"column":12},"end":{"line":86,"column":99}},"39":{"start":{"line":86,"column":33},"end":{"line":86,"column":98}},"40":{"start":{"line":87,"column":15},"end":{"line":91,"column":9}},"41":{"start":{"line":88,"column":12},"end":{"line":88,"column":37}},"42":{"start":{"line":90,"column":12},"end":{"line":90,"column":66}},"43":{"start":{"line":93,"column":8},"end":{"line":93,"column":30}},"44":{"start":{"line":94,"column":8},"end":{"line":94,"column":36}},"45":{"start":{"line":98,"column":8},"end":{"line":98,"column":24}},"46":{"start":{"line":99,"column":8},"end":{"line":104,"column":9}},"47":{"start":{"line":100,"column":12},"end":{"line":100,"column":23}},"48":{"start":{"line":101,"column":12},"end":{"line":103,"column":13}},"49":{"start":{"line":102,"column":16},"end":{"line":102,"column":28}},"50":{"start":{"line":105,"column":8},"end":{"line":109,"column":9}},"51":{"start":{"line":106,"column":12},"end":{"line":106,"column":43}},"52":{"start":{"line":107,"column":15},"end":{"line":109,"column":9}},"53":{"start":{"line":108,"column":12},"end":{"line":108,"column":25}},"54":{"start":{"line":110,"column":8},"end":{"line":110,"column":62}},"55":{"start":{"line":111,"column":8},"end":{"line":124,"column":9}},"56":{"start":{"line":112,"column":12},"end":{"line":112,"column":23}},"57":{"start":{"line":113,"column":12},"end":{"line":113,"column":76}},"58":{"start":{"line":114,"column":12},"end":{"line":119,"column":13}},"59":{"start":{"line":115,"column":16},"end":{"line":118,"column":17}},"60":{"start":{"line":116,"column":20},"end":{"line":116,"column":32}},"61":{"start":{"line":117,"column":20},"end":{"line":117,"column":26}},"62":{"start":{"line":120,"column":12},"end":{"line":122,"column":13}},"63":{"start":{"line":121,"column":16},"end":{"line":121,"column":28}},"64":{"start":{"line":123,"column":12},"end":{"line":123,"column":23}},"65":{"start":{"line":125,"column":8},"end":{"line":144,"column":9}},"66":{"start":{"line":126,"column":12},"end":{"line":126,"column":47}},"67":{"start":{"line":127,"column":12},"end":{"line":134,"column":13}},"68":{"start":{"line":128,"column":16},"end":{"line":128,"column":27}},"69":{"start":{"line":129,"column":16},"end":{"line":133,"column":17}},"70":{"start":{"line":130,"column":20},"end":{"line":132,"column":21}},"71":{"start":{"line":131,"column":24},"end":{"line":131,"column":36}},"72":{"start":{"line":135,"column":12},"end":{"line":143,"column":13}},"73":{"start":{"line":136,"column":16},"end":{"line":136,"column":27}},"74":{"start":{"line":137,"column":16},"end":{"line":137,"column":88}},"75":{"start":{"line":137,"column":46},"end":{"line":137,"column":86}},"76":{"start":{"line":138,"column":16},"end":{"line":142,"column":17}},"77":{"start":{"line":139,"column":20},"end":{"line":141,"column":21}},"78":{"start":{"line":140,"column":24},"end":{"line":140,"column":36}},"79":{"start":{"line":145,"column":8},"end":{"line":145,"column":20}},"80":{"start":{"line":149,"column":8},"end":{"line":151,"column":9}},"81":{"start":{"line":150,"column":12},"end":{"line":150,"column":25}},"82":{"start":{"line":152,"column":8},"end":{"line":152,"column":41}},"83":{"start":{"line":153,"column":8},"end":{"line":155,"column":26}},"84":{"start":{"line":154,"column":12},"end":{"line":154,"column":48}},"85":{"start":{"line":156,"column":8},"end":{"line":156,"column":20}},"86":{"start":{"line":160,"column":8},"end":{"line":165,"column":9}},"87":{"start":{"line":161,"column":12},"end":{"line":163,"column":13}},"88":{"start":{"line":162,"column":16},"end":{"line":162,"column":66}},"89":{"start":{"line":164,"column":12},"end":{"line":164,"column":19}},"90":{"start":{"line":166,"column":8},"end":{"line":166,"column":139}},"91":{"start":{"line":167,"column":8},"end":{"line":182,"column":9}},"92":{"start":{"line":168,"column":12},"end":{"line":171,"column":13}},"93":{"start":{"line":169,"column":16},"end":{"line":169,"column":121}},"94":{"start":{"line":170,"column":16},"end":{"line":170,"column":23}},"95":{"start":{"line":172,"column":12},"end":{"line":177,"column":13}},"96":{"start":{"line":173,"column":16},"end":{"line":175,"column":17}},"97":{"start":{"line":174,"column":20},"end":{"line":174,"column":68}},"98":{"start":{"line":176,"column":16},"end":{"line":176,"column":23}},"99":{"start":{"line":178,"column":12},"end":{"line":180,"column":13}},"100":{"start":{"line":179,"column":16},"end":{"line":179,"column":29}},"101":{"start":{"line":181,"column":12},"end":{"line":181,"column":43}},"102":{"start":{"line":183,"column":8},"end":{"line":183,"column":63}},"103":{"start":{"line":184,"column":8},"end":{"line":184,"column":23}},"104":{"start":{"line":185,"column":8},"end":{"line":198,"column":9}},"105":{"start":{"line":186,"column":12},"end":{"line":186,"column":58}},"106":{"start":{"line":188,"column":12},"end":{"line":193,"column":13}},"107":{"start":{"line":189,"column":16},"end":{"line":191,"column":17}},"108":{"start":{"line":190,"column":20},"end":{"line":190,"column":68}},"109":{"start":{"line":192,"column":16},"end":{"line":192,"column":23}},"110":{"start":{"line":194,"column":12},"end":{"line":196,"column":13}},"111":{"start":{"line":195,"column":16},"end":{"line":195,"column":29}},"112":{"start":{"line":197,"column":12},"end":{"line":197,"column":43}},"113":{"start":{"line":207,"column":8},"end":{"line":209,"column":9}},"114":{"start":{"line":208,"column":12},"end":{"line":208,"column":69}},"115":{"start":{"line":210,"column":8},"end":{"line":212,"column":9}},"116":{"start":{"line":211,"column":12},"end":{"line":211,"column":65}},"117":{"start":{"line":213,"column":8},"end":{"line":213,"column":46}},"118":{"start":{"line":214,"column":8},"end":{"line":214,"column":52}},"119":{"start":{"line":251,"column":8},"end":{"line":253,"column":9}},"120":{"start":{"line":252,"column":12},"end":{"line":252,"column":68}},"121":{"start":{"line":254,"column":8},"end":{"line":256,"column":9}},"122":{"start":{"line":255,"column":12},"end":{"line":255,"column":85}},"123":{"start":{"line":257,"column":8},"end":{"line":257,"column":32}},"124":{"start":{"line":258,"column":8},"end":{"line":258,"column":73}},"125":{"start":{"line":259,"column":8},"end":{"line":263,"column":9}},"126":{"start":{"line":260,"column":12},"end":{"line":262,"column":15}},"127":{"start":{"line":261,"column":16},"end":{"line":261,"column":54}},"128":{"start":{"line":264,"column":8},"end":{"line":264,"column":39}},"129":{"start":{"line":272,"column":8},"end":{"line":272,"column":53}},"130":{"start":{"line":273,"column":8},"end":{"line":278,"column":9}},"131":{"start":{"line":274,"column":12},"end":{"line":274,"column":108}},"132":{"start":{"line":275,"column":12},"end":{"line":275,"column":49}},"133":{"start":{"line":277,"column":12},"end":{"line":277,"column":43}},"134":{"start":{"line":282,"column":0},"end":{"line":282,"column":25}}},"branchMap":{"1":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":27},"end":{"line":44,"column":46}},{"start":{"line":44,"column":50},"end":{"line":44,"column":66}}]},"2":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":31},"end":{"line":45,"column":54}},{"start":{"line":45,"column":58},"end":{"line":45,"column":79}}]},"3":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":21},"end":{"line":46,"column":34}},{"start":{"line":46,"column":38},"end":{"line":46,"column":40}}]},"4":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":23},"end":{"line":47,"column":38}},{"start":{"line":47,"column":42},"end":{"line":47,"column":44}}]},"5":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":28},"end":{"line":49,"column":48}},{"start":{"line":49,"column":52},"end":{"line":49,"column":54}}]},"6":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":8}},{"start":{"line":50,"column":8},"end":{"line":50,"column":8}}]},"7":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":8}},{"start":{"line":53,"column":8},"end":{"line":53,"column":8}}]},"8":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":8}},{"start":{"line":56,"column":8},"end":{"line":56,"column":8}}]},"9":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":8}},{"start":{"line":59,"column":8},"end":{"line":59,"column":8}}]},"10":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":24},"end":{"line":66,"column":40}},{"start":{"line":66,"column":44},"end":{"line":66,"column":45}}]},"11":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":31},"end":{"line":67,"column":54}},{"start":{"line":67,"column":58},"end":{"line":67,"column":63}}]},"12":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":33},"end":{"line":68,"column":58}},{"start":{"line":68,"column":62},"end":{"line":68,"column":67}}]},"13":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":28},"end":{"line":69,"column":48}},{"start":{"line":69,"column":52},"end":{"line":69,"column":54}}]},"14":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":8}},{"start":{"line":70,"column":8},"end":{"line":70,"column":8}}]},"15":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":73,"column":8}},{"start":{"line":73,"column":8},"end":{"line":73,"column":8}}]},"16":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":15},"end":{"line":76,"column":15}},{"start":{"line":76,"column":15},"end":{"line":76,"column":15}}]},"17":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":16},"end":{"line":78,"column":16}},{"start":{"line":78,"column":16},"end":{"line":78,"column":16}}]},"18":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":23},"end":{"line":80,"column":23}},{"start":{"line":80,"column":23},"end":{"line":80,"column":23}}]},"19":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":15},"end":{"line":87,"column":15}},{"start":{"line":87,"column":15},"end":{"line":87,"column":15}}]},"20":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":8},"end":{"line":99,"column":8}},{"start":{"line":99,"column":8},"end":{"line":99,"column":8}}]},"21":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":12},"end":{"line":101,"column":12}},{"start":{"line":101,"column":12},"end":{"line":101,"column":12}}]},"22":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":8},"end":{"line":105,"column":8}},{"start":{"line":105,"column":8},"end":{"line":105,"column":8}}]},"23":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":19},"end":{"line":106,"column":34}},{"start":{"line":106,"column":38},"end":{"line":106,"column":42}}]},"24":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":15},"end":{"line":107,"column":15}},{"start":{"line":107,"column":15},"end":{"line":107,"column":15}}]},"25":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":8},"end":{"line":111,"column":8}},{"start":{"line":111,"column":8},"end":{"line":111,"column":8}}]},"26":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":16},"end":{"line":115,"column":16}},{"start":{"line":115,"column":16},"end":{"line":115,"column":16}}]},"27":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":12},"end":{"line":120,"column":12}},{"start":{"line":120,"column":12},"end":{"line":120,"column":12}}]},"28":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":8},"end":{"line":125,"column":8}},{"start":{"line":125,"column":8},"end":{"line":125,"column":8}}]},"29":{"line":126,"type":"binary-expr","locations":[{"start":{"line":126,"column":24},"end":{"line":126,"column":40}},{"start":{"line":126,"column":44},"end":{"line":126,"column":46}}]},"30":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":12},"end":{"line":127,"column":12}},{"start":{"line":127,"column":12},"end":{"line":127,"column":12}}]},"31":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":20},"end":{"line":130,"column":20}},{"start":{"line":130,"column":20},"end":{"line":130,"column":20}}]},"32":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":12},"end":{"line":135,"column":12}},{"start":{"line":135,"column":12},"end":{"line":135,"column":12}}]},"33":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":20},"end":{"line":139,"column":20}},{"start":{"line":139,"column":20},"end":{"line":139,"column":20}}]},"34":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":8},"end":{"line":149,"column":8}},{"start":{"line":149,"column":8},"end":{"line":149,"column":8}}]},"35":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":8},"end":{"line":160,"column":8}},{"start":{"line":160,"column":8},"end":{"line":160,"column":8}}]},"36":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":12},"end":{"line":161,"column":12}},{"start":{"line":161,"column":12},"end":{"line":161,"column":12}}]},"37":{"line":166,"type":"binary-expr","locations":[{"start":{"line":166,"column":27},"end":{"line":166,"column":45}},{"start":{"line":166,"column":49},"end":{"line":166,"column":66}},{"start":{"line":166,"column":70},"end":{"line":166,"column":138}}]},"38":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":8},"end":{"line":167,"column":8}},{"start":{"line":167,"column":8},"end":{"line":167,"column":8}}]},"39":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":12},"end":{"line":168,"column":12}},{"start":{"line":168,"column":12},"end":{"line":168,"column":12}}]},"40":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":12},"end":{"line":172,"column":12}},{"start":{"line":172,"column":12},"end":{"line":172,"column":12}}]},"41":{"line":172,"type":"binary-expr","locations":[{"start":{"line":172,"column":15},"end":{"line":172,"column":34}},{"start":{"line":172,"column":38},"end":{"line":172,"column":72}}]},"42":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":16},"end":{"line":173,"column":16}},{"start":{"line":173,"column":16},"end":{"line":173,"column":16}}]},"43":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":12},"end":{"line":178,"column":12}},{"start":{"line":178,"column":12},"end":{"line":178,"column":12}}]},"44":{"line":183,"type":"binary-expr","locations":[{"start":{"line":183,"column":20},"end":{"line":183,"column":51}},{"start":{"line":183,"column":55},"end":{"line":183,"column":62}}]},"45":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":8},"end":{"line":185,"column":8}},{"start":{"line":185,"column":8},"end":{"line":185,"column":8}}]},"46":{"line":185,"type":"binary-expr","locations":[{"start":{"line":185,"column":11},"end":{"line":185,"column":63}},{"start":{"line":185,"column":68},"end":{"line":185,"column":134}},{"start":{"line":185,"column":138},"end":{"line":185,"column":164}}]},"47":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":12},"end":{"line":188,"column":12}},{"start":{"line":188,"column":12},"end":{"line":188,"column":12}}]},"48":{"line":188,"type":"binary-expr","locations":[{"start":{"line":188,"column":15},"end":{"line":188,"column":34}},{"start":{"line":188,"column":38},"end":{"line":188,"column":72}}]},"49":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":16},"end":{"line":189,"column":16}},{"start":{"line":189,"column":16},"end":{"line":189,"column":16}}]},"50":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":12},"end":{"line":194,"column":12}},{"start":{"line":194,"column":12},"end":{"line":194,"column":12}}]},"51":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":8},"end":{"line":207,"column":8}},{"start":{"line":207,"column":8},"end":{"line":207,"column":8}}]},"52":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":8},"end":{"line":210,"column":8}},{"start":{"line":210,"column":8},"end":{"line":210,"column":8}}]},"53":{"line":251,"type":"if","locations":[{"start":{"line":251,"column":8},"end":{"line":251,"column":8}},{"start":{"line":251,"column":8},"end":{"line":251,"column":8}}]},"54":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":8},"end":{"line":254,"column":8}},{"start":{"line":254,"column":8},"end":{"line":254,"column":8}}]},"55":{"line":257,"type":"binary-expr","locations":[{"start":{"line":257,"column":18},"end":{"line":257,"column":25}},{"start":{"line":257,"column":29},"end":{"line":257,"column":31}}]},"56":{"line":259,"type":"if","locations":[{"start":{"line":259,"column":8},"end":{"line":259,"column":8}},{"start":{"line":259,"column":8},"end":{"line":259,"column":8}}]},"57":{"line":273,"type":"if","locations":[{"start":{"line":273,"column":8},"end":{"line":273,"column":8}},{"start":{"line":273,"column":8},"end":{"line":273,"column":8}}]}},"code":["\"use strict\";","","/**","* Represents an command framework command","* @prop {Object} subcommands Object mapping subcommand labels to Command objects","*/","class Command {","    /**","    * Register a command","    * @arg {String} label The command label","    * @arg {Function | String | Array<Function | String>} generator A response string, array of functions or strings, or function that generates a string or array of strings when called.","    * If a function is passed, the function will be passed a Message object and an array of command arguments. The Message object will have an additional property `prefix`, which is the prefix used in the command.","    * `generator(msg, args)`","    * @arg {Object} [options] Command options","    * @arg {Array<String>} [options.aliases] An array of command aliases","    * @arg {Boolean} [options.caseInsensitive=false] Whether the command label (and aliases) is case insensitive or not","    * @arg {Boolean} [options.deleteCommand=false] Whether to delete the user command message or not","    * @arg {Boolean} [options.argsRequired=false] If arguments are required or not","    * @arg {Boolean} [options.guildOnly=false] Whether to prevent the command from being used in Direct Messages or not","    * @arg {Boolean} [options.dmOnly=false] Whether to prevent the command from being used in guilds or not","    * @arg {String} [options.description=\"No description\"] A short description of the command to show in the default help command","    * @arg {String} [options.fullDescription=\"No full description\"] A detailed description of the command to show in the default help command","    * @arg {String} [options.usage] Details on how to call the command to show in the default help command","    * @arg {Object} [options.requirements] A set of factors that limit who can call the command","    * @arg {Array<String>} [options.requirements.userIDs] An array of user IDs representing users that can call the command","    * @arg {Object} [options.requirements.permissions] An object containing permission keys the user must match to use the command","    * i.e.:","    * ```","    * {","    *   \"administrator\": false,","    *   \"manageMessages\": true","    * }","    * ```","    * In the above example, the user must not have administrator permissions, but must have manageMessages to use the command","    * @arg {Array<String>} [options.requirements.roleIDs] An array of role IDs that would allow a user to use the command","    * @arg {Array<String>} [options.requirements.roleNames] An array of role names that would allow a user to use the command","    * @arg {Number} [options.cooldown] The cooldown between command usage in milliseconds","    * @arg {String} [options.cooldownMessage] A message to show when the command is on cooldown","    * @arg {String} [options.permissionMessage] A message to show when the user doesn't have permissions to use the command","    * @arg {String} [options.errorMessage] A message to show if the execution of the command handler somehow fails.","    */","    constructor(label, generator, options) {","        this.label = label;","        this.description = options.description || \"No description\";","        this.fullDescription = options.fullDescription || \"No full description\";","        this.usage = options.usage || \"\";","        this.aliases = options.aliases || [];","        this.caseInsensitive = !!options.caseInsensitive;","        this.requirements = options.requirements || {};","        if(!this.requirements.userIDs) {","            this.requirements.userIDs = [];","        }","        if(!this.requirements.permissions) {","            this.requirements.permissions = {};","        }","        if(!this.requirements.roleIDs) {","            this.requirements.roleIDs = [];","        }","        if(!this.requirements.roleNames) {","            this.requirements.roleNames = [];","        }","        this.deleteCommand = !!options.deleteCommand;","        this.argsRequired = !!options.argsRequired;","        this.guildOnly = !!options.guildOnly;","        this.dmOnly = !!options.dmOnly;","        this.cooldown = options.cooldown || 0;","        this.cooldownMessage = options.cooldownMessage || false;","        this.permissionMessage = options.permissionMessage || false;","        this.errorMessage = options.errorMessage || \"\";","        if(this.cooldown !== 0) {","            this.usersOnCooldown = new Set();","        }","        if(typeof generator === \"string\") {","            this.response = generator;","            this.execute = () => this.response;","        } else if(Array.isArray(generator)) {","            this.responses = generator.map((item, index) => {","                if(typeof item === \"string\") {","                    return () => item;","                } else if(typeof item === \"function\") {","                    return item;","                } else {","                    throw new Error(\"Invalid command response generator (index \" + index + \")\");","                }","            });","            this.execute = () => this.responses[Math.floor(Math.random() * this.responses.length)];","        } else if(typeof generator === \"function\") {","            this.execute = generator;","        } else {","            throw new Error(\"Invalid command response generator\");","        }","","        this.subcommands = {};","        this.subcommandAliases = {};","    }","","    permissionCheck(msg) {","        var req = false;","        if(this.requirements.userIDs.length > 0) {","            req = true;","            if(~this.requirements.userIDs.indexOf(msg.author.id)) {","                return true;","            }","        }","        if(!msg.channel.guild) {","            return !this.guildOnly && !req;","        } else if(this.dmOnly) {","            return false;","        }","        var keys = Object.keys(this.requirements.permissions);","        if(keys.length > 0) {","            req = true;","            var permissions = msg.channel.permissionsOf(msg.author.id).json;","            for(var key of keys) {","                if(this.requirements.permissions[key] !== permissions[key]) {","                    req = false;","                    break;","                }","            }","            if(req) {","                return true;","            }","            req = true;","        }","        if(msg.member) {","            var roles = msg.member.roles || [];","            if(this.requirements.roleIDs.length > 0) {","                req = true;","                for(var roleID of this.requirements.roleIDs) {","                    if(~roles.indexOf(roleID)) {","                        return true;","                    }","                }","            }","            if(this.requirements.roleNames.length > 0) {","                req = true;","                roles = roles.map((roleID) => msg.channel.guild.roles.get(roleID).name);","                for(var roleName of this.requirements.roleNames) {","                    if(~roles.indexOf(roleName)) {","                        return true;","                    }","                }","            }","        }","        return !req;","    }","","    cooldownCheck(userID) {","        if(this.usersOnCooldown.has(userID)) {","            return false;","        }","        this.usersOnCooldown.add(userID);","        setTimeout(() => {","            this.usersOnCooldown.delete(userID);","        }, this.cooldown);","        return true;","    }","","    process(args, msg) {","        if(!this.permissionCheck(msg)) {","            if(this.permissionMessage) {","                msg.channel.createMessage(this.permissionMessage);","            }","            return;","        }","        var shouldDelete = this.deleteCommand && msg.channel.guild && msg.channel.permissionsOf(msg._client.user.id).has(\"manageMessages\");","        if(args.length === 0) {","            if(this.argsRequired) {","                msg.channel.createMessage(`Invalid usage. Do \\`${msg.prefix}help ${this.label}\\` to view proper usage.`);","                return;","            }","            if(this.cooldown !== 0 && !this.cooldownCheck(msg.author.id)) {","                if(this.cooldownMessage) {","                    msg.channel.createMessage(this.cooldownMessage);","                }","                return;","            }","            if(shouldDelete) {","                msg.delete();","            }","            return this.execute(msg, args);","        }","        var label = this.subcommandAliases[args[0]] || args[0];","        var subcommand;","        if((subcommand = this.subcommands[label]) !== undefined || ((subcommand = this.subcommands[label.toLowerCase()]) !== undefined && subcommand.caseInsensitive)) {","            return subcommand.process(args.slice(1), msg);","        } else {","            if(this.cooldown !== 0 && !this.cooldownCheck(msg.author.id)) {","                if(this.cooldownMessage) {","                    msg.channel.createMessage(this.cooldownMessage);","                }","                return;","            }","            if(shouldDelete) {","                msg.delete();","            }","            return this.execute(msg, args);","        }","    }","","    /**","    * Register an alias for a subcommand","    * @arg {String} alias The alias","    * @arg {String} label The original subcommand label","    */","    registerSubcommandAlias(alias, label) {","        if(!this.subcommands[label]) {","            throw new Error(\"No subcommand registered for \" + label);","        }","        if(this.subcommandAliases[alias]) {","            throw new Error(`Alias ${label} already registered`);","        }","        this.subcommandAliases[alias] = label;","        this.subcommands[label].aliases.push(alias);","    }","","    /**","    * Register a subcommand","    * @arg {String} label The subcommand label","    * @arg {Function | String | Array<Function | String>} generator A response string, array of functions or strings, or function that generates a string or array of strings when called.","    * If a function is passed, the function will be passed a Message object and an array of subcommand arguments. The Message object will have an additional property `prefix`, which is the prefix used in the subcommand.","    * `generator(msg, args)`","    * @arg {Object} [options] Command options","    * @arg {Array<String>} [options.aliases] An array of subcommand aliases","    * @arg {Boolean} [options.caseInsensitive=false] Whether the subcommand label (and aliases) is case insensitive or not","    * @arg {Boolean} [options.deleteCommand=false] Whether to delete the user subcommand message or not","    * @arg {Boolean} [options.argsRequired=false] If arguments are required or not","    * @arg {Boolean} [options.guildOnly=false] Whether to prevent the subcommand from being used in Direct Messages or not","    * @arg {Boolean} [options.dmOnly=false] Whether to prevent the subcommand from being used in guilds or not","    * @arg {String} [options.description=\"No description\"] A short description of the subcommand to show in the default help subcommand","    * @arg {String} [options.fullDescription=\"No full description\"] A detailed description of the subcommand to show in the default help subcommand","    * @arg {String} [options.usage] Details on how to call the subcommand to show in the default help subcommand","    * @arg {Object} [options.requirements] A set of factors that limit who can call the subcommand","    * @arg {Array<String>} [options.requirements.userIDs] An array of user IDs representing users that can call the subcommand","    * @arg {Object} [options.requirements.permissions] An object containing permission keys the user must match to use the subcommand","    * i.e.:","    * ```","    * {","    *   \"administrator\": false,","    *   \"manageMessages\": true","    * }```","    * In the above example, the user must not have administrator permissions, but must have manageMessages to use the subcommand","    * @arg {Array<String>} [options.requirements.roleIDs] An array of role IDs that would allow a user to use the subcommand","    * @arg {Array<String>} [options.requirements.roleNames] An array of role names that would allow a user to use the subcommand","    * @arg {Number} [options.cooldown] The cooldown between subcommand usage in milliseconds","    * @arg {String} [options.cooldownMessage] A message to show when the subcommand is on cooldown","    * @arg {String} [options.permissionMessage] A message to show when the user doesn't have permissions to use the command","    * @returns {Command}","    */","    registerSubcommand(label, generator, options) {","        if(label.includes(\" \")) {","            throw new Error(\"Subcommand label may not have spaces\");","        }","        if(this.subcommands[label]) {","            throw new Error(\"You have already registered a subcommand for \" + label);","        }","        options = options || {};","        this.subcommands[label] = new Command(label, generator, options);","        if(options.aliases) {","            options.aliases.forEach((alias) => {","                this.subcommandAliases[alias] = label;","            });","        }","        return this.subcommands[label];","    }","","    /**","    * Unregister a subcommand","    * @arg {String} label The subcommand label","    */","    unregisterSubcommand(label) {","        var original = this.subcommandAliases[label];","        if(original) {","            this.subcommands[original].aliases.splice(this.subcommands[original].aliases.indexOf(label), 1);","            delete this.subcommandAliases[label];","        } else {","            delete this.subcommands[label];","        }","    }","}","","module.exports = Command;",""],"l":{"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"53":0,"54":0,"56":0,"57":0,"59":0,"60":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"83":0,"86":0,"87":0,"88":0,"90":0,"93":0,"94":0,"98":0,"99":0,"100":0,"101":0,"102":0,"105":0,"106":0,"107":0,"108":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"120":0,"121":0,"123":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"145":0,"149":0,"150":0,"152":0,"153":0,"154":0,"156":0,"160":0,"161":0,"162":0,"164":0,"166":0,"167":0,"168":0,"169":0,"170":0,"172":0,"173":0,"174":0,"176":0,"178":0,"179":0,"181":0,"183":0,"184":0,"185":0,"186":0,"188":0,"189":0,"190":0,"192":0,"194":0,"195":0,"197":0,"207":0,"208":0,"210":0,"211":0,"213":0,"214":0,"251":0,"252":0,"254":0,"255":0,"257":0,"258":0,"259":0,"260":0,"261":0,"264":0,"272":0,"273":0,"274":0,"275":0,"277":0,"282":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/command/CommandClient.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/command/CommandClient.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0,0,0,0],"20":[0,0],"21":[0,0],"22":[0,0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":15},"end":{"line":26,"column":48}}},"2":{"name":"(anonymous_2)","line":126,"loc":{"start":{"line":126,"column":19},"end":{"line":126,"column":25}}},"3":{"name":"(anonymous_3)","line":158,"loc":{"start":{"line":158,"column":23},"end":{"line":158,"column":41}}},"4":{"name":"(anonymous_4)","line":173,"loc":{"start":{"line":173,"column":15},"end":{"line":173,"column":21}}},"5":{"name":"(anonymous_5)","line":191,"loc":{"start":{"line":191,"column":24},"end":{"line":191,"column":39}}},"6":{"name":"(anonymous_6)","line":238,"loc":{"start":{"line":238,"column":19},"end":{"line":238,"column":47}}},"7":{"name":"(anonymous_7)","line":265,"loc":{"start":{"line":265,"column":21},"end":{"line":265,"column":29}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":37}},"3":{"start":{"line":27,"column":8},"end":{"line":27,"column":30}},"4":{"start":{"line":28,"column":8},"end":{"line":37,"column":10}},"5":{"start":{"line":38,"column":8},"end":{"line":42,"column":9}},"6":{"start":{"line":39,"column":12},"end":{"line":41,"column":13}},"7":{"start":{"line":40,"column":16},"end":{"line":40,"column":73}},"8":{"start":{"line":43,"column":8},"end":{"line":43,"column":32}},"9":{"start":{"line":44,"column":8},"end":{"line":44,"column":27}},"10":{"start":{"line":45,"column":8},"end":{"line":45,"column":33}},"11":{"start":{"line":47,"column":8},"end":{"line":68,"column":11}},"12":{"start":{"line":48,"column":12},"end":{"line":48,"column":33}},"13":{"start":{"line":49,"column":12},"end":{"line":51,"column":13}},"14":{"start":{"line":50,"column":16},"end":{"line":50,"column":71}},"15":{"start":{"line":52,"column":12},"end":{"line":58,"column":13}},"16":{"start":{"line":53,"column":16},"end":{"line":55,"column":17}},"17":{"start":{"line":54,"column":20},"end":{"line":54,"column":122}},"18":{"start":{"line":57,"column":16},"end":{"line":57,"column":112}},"19":{"start":{"line":59,"column":12},"end":{"line":67,"column":13}},"20":{"start":{"line":60,"column":16},"end":{"line":66,"column":17}},"21":{"start":{"line":61,"column":20},"end":{"line":63,"column":21}},"22":{"start":{"line":62,"column":24},"end":{"line":62,"column":120}},"23":{"start":{"line":65,"column":20},"end":{"line":65,"column":110}},"24":{"start":{"line":70,"column":8},"end":{"line":70,"column":55}},"25":{"start":{"line":72,"column":8},"end":{"line":119,"column":9}},"26":{"start":{"line":73,"column":12},"end":{"line":118,"column":15}},"27":{"start":{"line":74,"column":16},"end":{"line":74,"column":32}},"28":{"start":{"line":75,"column":16},"end":{"line":113,"column":17}},"29":{"start":{"line":76,"column":20},"end":{"line":76,"column":85}},"30":{"start":{"line":77,"column":20},"end":{"line":79,"column":21}},"31":{"start":{"line":78,"column":24},"end":{"line":78,"column":51}},"32":{"start":{"line":80,"column":20},"end":{"line":80,"column":42}},"33":{"start":{"line":81,"column":20},"end":{"line":87,"column":21}},"34":{"start":{"line":82,"column":24},"end":{"line":82,"column":89}},"35":{"start":{"line":83,"column":24},"end":{"line":85,"column":25}},"36":{"start":{"line":84,"column":28},"end":{"line":84,"column":55}},"37":{"start":{"line":86,"column":24},"end":{"line":86,"column":49}},"38":{"start":{"line":88,"column":20},"end":{"line":88,"column":95}},"39":{"start":{"line":89,"column":20},"end":{"line":91,"column":21}},"40":{"start":{"line":90,"column":24},"end":{"line":90,"column":79}},"41":{"start":{"line":92,"column":20},"end":{"line":99,"column":21}},"42":{"start":{"line":93,"column":24},"end":{"line":93,"column":57}},"43":{"start":{"line":94,"column":24},"end":{"line":98,"column":25}},"44":{"start":{"line":95,"column":28},"end":{"line":97,"column":29}},"45":{"start":{"line":96,"column":32},"end":{"line":96,"column":107}},"46":{"start":{"line":101,"column":20},"end":{"line":101,"column":99}},"47":{"start":{"line":102,"column":20},"end":{"line":104,"column":21}},"48":{"start":{"line":103,"column":24},"end":{"line":103,"column":70}},"49":{"start":{"line":105,"column":20},"end":{"line":105,"column":35}},"50":{"start":{"line":106,"column":20},"end":{"line":106,"column":48}},"51":{"start":{"line":107,"column":20},"end":{"line":111,"column":21}},"52":{"start":{"line":108,"column":24},"end":{"line":110,"column":25}},"53":{"start":{"line":109,"column":28},"end":{"line":109,"column":108}},"54":{"start":{"line":112,"column":20},"end":{"line":112,"column":95}},"55":{"start":{"line":114,"column":16},"end":{"line":114,"column":30}},"56":{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},"57":{"start":{"line":128,"column":12},"end":{"line":128,"column":19}},"58":{"start":{"line":131,"column":8},"end":{"line":131,"column":28}},"59":{"start":{"line":132,"column":8},"end":{"line":150,"column":9}},"60":{"start":{"line":133,"column":12},"end":{"line":133,"column":97}},"61":{"start":{"line":134,"column":12},"end":{"line":134,"column":37}},"62":{"start":{"line":135,"column":12},"end":{"line":135,"column":56}},"63":{"start":{"line":136,"column":12},"end":{"line":136,"column":24}},"64":{"start":{"line":137,"column":12},"end":{"line":149,"column":13}},"65":{"start":{"line":138,"column":16},"end":{"line":138,"column":38}},"66":{"start":{"line":139,"column":16},"end":{"line":148,"column":19}},"67":{"start":{"line":140,"column":20},"end":{"line":142,"column":21}},"68":{"start":{"line":141,"column":24},"end":{"line":141,"column":65}},"69":{"start":{"line":144,"column":20},"end":{"line":144,"column":43}},"70":{"start":{"line":145,"column":20},"end":{"line":147,"column":21}},"71":{"start":{"line":146,"column":24},"end":{"line":146,"column":81}},"72":{"start":{"line":159,"column":8},"end":{"line":170,"column":9}},"73":{"start":{"line":160,"column":12},"end":{"line":160,"column":49}},"74":{"start":{"line":162,"column":12},"end":{"line":169,"column":13}},"75":{"start":{"line":163,"column":16},"end":{"line":165,"column":17}},"76":{"start":{"line":164,"column":20},"end":{"line":164,"column":82}},"77":{"start":{"line":166,"column":16},"end":{"line":166,"column":53}},"78":{"start":{"line":168,"column":16},"end":{"line":168,"column":93}},"79":{"start":{"line":174,"column":8},"end":{"line":174,"column":50}},"80":{"start":{"line":175,"column":8},"end":{"line":177,"column":9}},"81":{"start":{"line":176,"column":12},"end":{"line":176,"column":64}},"82":{"start":{"line":178,"column":8},"end":{"line":182,"column":9}},"83":{"start":{"line":179,"column":12},"end":{"line":179,"column":86}},"84":{"start":{"line":180,"column":15},"end":{"line":182,"column":9}},"85":{"start":{"line":181,"column":12},"end":{"line":181,"column":99}},"86":{"start":{"line":181,"column":45},"end":{"line":181,"column":97}},"87":{"start":{"line":183,"column":8},"end":{"line":183,"column":67}},"88":{"start":{"line":192,"column":8},"end":{"line":192,"column":41}},"89":{"start":{"line":193,"column":8},"end":{"line":195,"column":9}},"90":{"start":{"line":194,"column":12},"end":{"line":194,"column":66}},"91":{"start":{"line":196,"column":8},"end":{"line":196,"column":76}},"92":{"start":{"line":197,"column":8},"end":{"line":199,"column":9}},"93":{"start":{"line":198,"column":12},"end":{"line":198,"column":65}},"94":{"start":{"line":200,"column":8},"end":{"line":200,"column":43}},"95":{"start":{"line":201,"column":8},"end":{"line":201,"column":49}},"96":{"start":{"line":239,"column":8},"end":{"line":241,"column":9}},"97":{"start":{"line":240,"column":12},"end":{"line":240,"column":65}},"98":{"start":{"line":242,"column":8},"end":{"line":244,"column":9}},"99":{"start":{"line":243,"column":12},"end":{"line":243,"column":82}},"100":{"start":{"line":245,"column":8},"end":{"line":245,"column":32}},"101":{"start":{"line":246,"column":8},"end":{"line":246,"column":79}},"102":{"start":{"line":247,"column":8},"end":{"line":251,"column":9}},"103":{"start":{"line":248,"column":12},"end":{"line":250,"column":13}},"104":{"start":{"line":249,"column":16},"end":{"line":249,"column":78}},"105":{"start":{"line":252,"column":8},"end":{"line":252,"column":70}},"106":{"start":{"line":253,"column":8},"end":{"line":257,"column":9}},"107":{"start":{"line":254,"column":12},"end":{"line":256,"column":15}},"108":{"start":{"line":255,"column":16},"end":{"line":255,"column":51}},"109":{"start":{"line":258,"column":8},"end":{"line":258,"column":36}},"110":{"start":{"line":266,"column":8},"end":{"line":266,"column":50}},"111":{"start":{"line":267,"column":8},"end":{"line":272,"column":9}},"112":{"start":{"line":268,"column":12},"end":{"line":268,"column":102}},"113":{"start":{"line":269,"column":12},"end":{"line":269,"column":46}},"114":{"start":{"line":271,"column":12},"end":{"line":271,"column":40}},"115":{"start":{"line":276,"column":0},"end":{"line":276,"column":31}}},"branchMap":{"1":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":38,"column":8}},{"start":{"line":38,"column":8},"end":{"line":38,"column":8}}]},"2":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":12},"end":{"line":49,"column":12}},{"start":{"line":49,"column":12},"end":{"line":49,"column":12}}]},"3":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":12},"end":{"line":52,"column":12}},{"start":{"line":52,"column":12},"end":{"line":52,"column":12}}]},"4":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":16},"end":{"line":60,"column":16}},{"start":{"line":60,"column":16},"end":{"line":60,"column":16}}]},"5":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":72,"column":8}},{"start":{"line":72,"column":8},"end":{"line":72,"column":8}}]},"6":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":16},"end":{"line":75,"column":16}},{"start":{"line":75,"column":16},"end":{"line":75,"column":16}}]},"7":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":44},"end":{"line":76,"column":72}},{"start":{"line":76,"column":76},"end":{"line":76,"column":83}}]},"8":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":20},"end":{"line":77,"column":20}},{"start":{"line":77,"column":20},"end":{"line":77,"column":20}}]},"9":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":46},"end":{"line":82,"column":76}},{"start":{"line":82,"column":80},"end":{"line":82,"column":87}}]},"10":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":24},"end":{"line":83,"column":24}},{"start":{"line":83,"column":24},"end":{"line":83,"column":24}}]},"11":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":20}},{"start":{"line":89,"column":20},"end":{"line":89,"column":20}}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":20},"end":{"line":92,"column":20}},{"start":{"line":92,"column":20},"end":{"line":92,"column":20}}]},"13":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":28},"end":{"line":95,"column":28}},{"start":{"line":95,"column":28},"end":{"line":95,"column":28}}]},"14":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":20},"end":{"line":102,"column":20}},{"start":{"line":102,"column":20},"end":{"line":102,"column":20}}]},"15":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":24},"end":{"line":108,"column":24}},{"start":{"line":108,"column":24},"end":{"line":108,"column":24}}]},"16":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":27},"end":{"line":108,"column":47}},{"start":{"line":108,"column":51},"end":{"line":108,"column":92}}]},"17":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":8},"end":{"line":127,"column":8}},{"start":{"line":127,"column":8},"end":{"line":127,"column":8}}]},"18":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":8},"end":{"line":132,"column":8}},{"start":{"line":132,"column":8},"end":{"line":132,"column":8}}]},"19":{"line":132,"type":"binary-expr","locations":[{"start":{"line":132,"column":12},"end":{"line":132,"column":43}},{"start":{"line":132,"column":47},"end":{"line":132,"column":77}},{"start":{"line":132,"column":83},"end":{"line":132,"column":114}},{"start":{"line":132,"column":118},"end":{"line":132,"column":133}},{"start":{"line":132,"column":139},"end":{"line":132,"column":173}}]},"20":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":20},"end":{"line":135,"column":46}},{"start":{"line":135,"column":50},"end":{"line":135,"column":55}}]},"21":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":12},"end":{"line":137,"column":12}},{"start":{"line":137,"column":12},"end":{"line":137,"column":12}}]},"22":{"line":137,"type":"binary-expr","locations":[{"start":{"line":137,"column":15},"end":{"line":137,"column":61}},{"start":{"line":137,"column":66},"end":{"line":137,"column":126}},{"start":{"line":137,"column":130},"end":{"line":137,"column":153}}]},"23":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":20},"end":{"line":140,"column":20}},{"start":{"line":140,"column":20},"end":{"line":140,"column":20}}]},"24":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":20},"end":{"line":145,"column":20}},{"start":{"line":145,"column":20},"end":{"line":145,"column":20}}]},"25":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":8},"end":{"line":159,"column":8}},{"start":{"line":159,"column":8},"end":{"line":159,"column":8}}]},"26":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":12},"end":{"line":162,"column":12}},{"start":{"line":162,"column":12},"end":{"line":162,"column":12}}]},"27":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":8},"end":{"line":175,"column":8}},{"start":{"line":175,"column":8},"end":{"line":175,"column":8}}]},"28":{"line":175,"type":"binary-expr","locations":[{"start":{"line":175,"column":11},"end":{"line":175,"column":42}},{"start":{"line":175,"column":46},"end":{"line":175,"column":100}}]},"29":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":8},"end":{"line":178,"column":8}},{"start":{"line":178,"column":8},"end":{"line":178,"column":8}}]},"30":{"line":179,"type":"binary-expr","locations":[{"start":{"line":179,"column":19},"end":{"line":179,"column":73}},{"start":{"line":179,"column":77},"end":{"line":179,"column":85}}]},"31":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":15},"end":{"line":180,"column":15}},{"start":{"line":180,"column":15},"end":{"line":180,"column":15}}]},"32":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":8},"end":{"line":193,"column":8}},{"start":{"line":193,"column":8},"end":{"line":193,"column":8}}]},"33":{"line":193,"type":"binary-expr","locations":[{"start":{"line":193,"column":11},"end":{"line":193,"column":32}},{"start":{"line":193,"column":36},"end":{"line":193,"column":162}}]},"34":{"line":193,"type":"binary-expr","locations":[{"start":{"line":193,"column":38},"end":{"line":193,"column":82}},{"start":{"line":193,"column":87},"end":{"line":193,"column":160}}]},"35":{"line":196,"type":"cond-expr","locations":[{"start":{"line":196,"column":48},"end":{"line":196,"column":67}},{"start":{"line":196,"column":70},"end":{"line":196,"column":75}}]},"36":{"line":197,"type":"if","locations":[{"start":{"line":197,"column":8},"end":{"line":197,"column":8}},{"start":{"line":197,"column":8},"end":{"line":197,"column":8}}]},"37":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":8},"end":{"line":239,"column":8}},{"start":{"line":239,"column":8},"end":{"line":239,"column":8}}]},"38":{"line":242,"type":"if","locations":[{"start":{"line":242,"column":8},"end":{"line":242,"column":8}},{"start":{"line":242,"column":8},"end":{"line":242,"column":8}}]},"39":{"line":245,"type":"binary-expr","locations":[{"start":{"line":245,"column":18},"end":{"line":245,"column":25}},{"start":{"line":245,"column":29},"end":{"line":245,"column":31}}]},"40":{"line":246,"type":"cond-expr","locations":[{"start":{"line":246,"column":51},"end":{"line":246,"column":70}},{"start":{"line":246,"column":73},"end":{"line":246,"column":78}}]},"41":{"line":248,"type":"if","locations":[{"start":{"line":248,"column":12},"end":{"line":248,"column":12}},{"start":{"line":248,"column":12},"end":{"line":248,"column":12}}]},"42":{"line":253,"type":"if","locations":[{"start":{"line":253,"column":8},"end":{"line":253,"column":8}},{"start":{"line":253,"column":8},"end":{"line":253,"column":8}}]},"43":{"line":267,"type":"if","locations":[{"start":{"line":267,"column":8},"end":{"line":267,"column":8}},{"start":{"line":267,"column":8},"end":{"line":267,"column":8}}]}},"code":["\"use strict\";","","const Client = require(\"../Client\");","const Command = require(\"./Command\");","","/**","* Represents an Eris client with the command framework","* @extends Client","* @prop {Object} commands Object mapping command labels to Command objects","*/","class CommandClient extends Client {","    /**","    * Create a CommandClient","    * @arg {String} token bot token","    * @arg {Object} [options] Eris options (same as Client)","    * @arg {Object} [commandOptions] Command options","    * @arg {Boolean} [commandOptions.defaultHelpCommand=true] Whether to register the default help command or not","    * @arg {String} [commandOptions.description=\"An Eris-based Discord bot\"] The description to show in the default help command","    * @arg {Boolean} [commandOptions.ignoreBots=true] Whether to ignore bot accounts or not","    * @arg {Boolean} [commandOptions.ignoreSelf=true] Whether to ignore the bot's own account or not","    * @arg {String} [commandOptions.name=\"<Bot username>\"] The bot name to show in the default help command","    * @arg {String} [commandOptions.owner=\"an unknown user\"] The owner to show in the default help command","    * @arg {String|Array} [commandOptions.prefix=\"@mention \"] The bot prefix. Can be either an array of prefixes or a single prefix. \"@mention\" will be automatically replaced with the bot's actual mention","    * @arg {Object} [commandOptions.defaultCommandOptions={}] Default command options. This object takes the same options as a normal Command","    */","    constructor(token, options, commandOptions) {","        super(token, options);","        this.commandOptions = {","            defaultHelpCommand: true,","            description: \"An Eris-based Discord bot\",","            ignoreBots: true,","            ignoreSelf: true,","            name: null,","            owner: \"an unknown user\",","            prefix: \"@mention \",","            defaultCommandOptions: {}","        };","        if(typeof commandOptions === \"object\") {","            for(var property of Object.keys(commandOptions)) {","                this.commandOptions[property] = commandOptions[property];","            }","        }","        this.guildPrefixes = {};","        this.commands = {};","        this.commandAliases = {};","","        this.once(\"shardPreReady\", () => {","            this.preReady = true;","            if(!this.commandOptions.name) {","                this.commandOptions.name = `**${this.user.username}**`;","            }","            if(Array.isArray(this.commandOptions.prefix)){","                for(let i in this.commandOptions.prefix){","                    this.commandOptions.prefix[i] = this.commandOptions.prefix[i].replace(/@mention/g, this.user.mention);","                }","            } else {","                this.commandOptions.prefix = this.commandOptions.prefix.replace(/@mention/g, this.user.mention);","            }","            for(var key in this.guildPrefixes) {","                if(Array.isArray(this.guildPrefixes[key])){","                    for(let i in this.guildPrefixes[key]){","                        this.guildPrefixes[key][i] = this.guildPrefixes[key][i].replace(/@mention/g, this.user.mention);","                    }","                } else {","                    this.guildPrefixes[key] = this.guildPrefixes[key].replace(/@mention/g, this.user.mention);","                }","            }","        });","","        this.on(\"messageCreate\", this.onMessageCreate);","","        if(this.commandOptions.defaultHelpCommand) {","            this.registerCommand(\"help\", (msg, args) => {","                var result = \"\";","                if(args.length > 0) {","                    var cur = this.commands[this.commandAliases[args[0]] || args[0]];","                    if(!cur) {","                        return \"Command not found\";","                    }","                    var label = cur.label;","                    for(var i = 1; i < args.length; ++i) {","                        cur = cur.subcommands[cur.subcommandAliases[args[i]] || args[i]];","                        if(!cur) {","                            return \"Command not found\";","                        }","                        label += \" \" + cur.label;","                    }","                    result += `**${msg.prefix}${label}** ${cur.usage}\\n${cur.fullDescription}`;","                    if(Object.keys(cur.aliases).length > 0) {","                        result += `\\n\\n**Aliases:** ${cur.aliases.join(\", \")}`;","                    }","                    if(Object.keys(cur.subcommands).length > 0) {","                        result += \"\\n\\n**Subcommands:**\";","                        for(var subLabel in cur.subcommands) {","                            if(cur.subcommands[subLabel].permissionCheck(msg)) {","                                result += `\\n  **${subLabel}** - ${cur.subcommands[subLabel].description}`;","                            }","                        }","                    }","                } else {","                    result += `${this.commandOptions.name} - ${this.commandOptions.description}\\n`;","                    if(this.commandOptions.owner) {","                        result += `by ${this.commandOptions.owner}\\n`;","                    }","                    result += \"\\n\";","                    result += \"**Commands:**\\n\";","                    for(label in this.commands) {","                        if(this.commands[label] && this.commands[label].permissionCheck(msg)) {","                            result += `  **${msg.prefix}${label}** - ${this.commands[label].description}\\n`;","                        }","                    }","                    result += `\\nType ${msg.prefix}help <command> for more info on a command.`;","                }","                return result;","            }, {","                description: \"This help text\",","                fullDescription: \"This command is used to view information of different bot commands, including this one.\"","            });","        }","    }","","    /**","     * Checks the command client for a command based on the provided message","     * @arg {Message} msg The message object from the message create event","     */","    onMessageCreate(msg) {","        if(!this.ready) {","            return;","        }","","        msg.command = false;","        if((!this.commandOptions.ignoreSelf || msg.author.id !== this.user.id) && (!this.commandOptions.ignoreBots || !msg.author.bot) && (msg.prefix = this.checkPrefix(msg))) {","            var args = msg.content.replace(/<@!/g, \"<@\").substring(msg.prefix.length).split(\" \");","            var label = args.shift();","            label = this.commandAliases[label] || label;","            var command;","            if((command = this.commands[label]) !== undefined || ((command = this.commands[label.toLowerCase()]) !== undefined && command.caseInsensitive)) {","                msg.command = command;","                Promise.resolve(command.process(args, msg)).then((resp) => {","                    if(resp != null) {","                        this.createMessage(msg.channel.id, resp);","                    }","                }).catch((err) => {","                    this.emit(\"warn\", err);","                    if(command.errorMessage) {","                        this.createMessage(msg.channel.id, command.errorMessage);","                    }","                });","            }","        }","    }","","    /**","    * Register a prefix override for a specific guild","    * @arg {String} guildID The ID of the guild to override prefixes for","    * @arg {String|Array} prefix The bot prefix. Can be either an array of prefixes or a single prefix. \"@mention\" will be automatically replaced with the bot's actual mention","    */","    registerGuildPrefix(guildID, prefix) {","        if(this.preReady){","            this.guildPrefixes[guildID] = prefix;","        } else {","            if(Array.isArray(prefix)){","                for(var i in prefix){","                    prefix[i] = prefix[i].replace(/@mention/g, this.user.mention);","                }","                this.guildPrefixes[guildID] = prefix;","            } else {","                this.guildPrefixes[guildID] = prefix.replace(/@mention/g, this.user.mention);","            }","        }","    }","","    checkPrefix(msg) {","        var prefixes = this.commandOptions.prefix;","        if(msg.channel.guild !== undefined && this.guildPrefixes[msg.channel.guild.id] !== undefined){","            prefixes = this.guildPrefixes[msg.channel.guild.id];","        }","        if(typeof prefixes === \"string\") {","            return msg.content.replace(/<@!/g, \"<@\").startsWith(prefixes) && prefixes;","        } else if(Array.isArray(prefixes)) {","            return prefixes.find((prefix) => msg.content.replace(/<@!/g, \"<@\").startsWith(prefix));","        }","        throw new Error(\"Unsupported prefix format | \" + prefixes);","    }","","    /**","    * Register an alias for a command","    * @arg {String} alias The alias","    * @arg {String} label The original command label","    */","    registerCommandAlias(alias, label) {","        var caseInsensitiveLabel = false;","        if(!this.commands[label] && !(this.commands[(label = label.toLowerCase())] && (caseInsensitiveLabel = this.commands[label.toLowerCase()].caseInsensitive))) {","            throw new Error(\"No command registered for \" + label);","        }","        alias = caseInsensitiveLabel === true ? alias.toLowerCase() : alias;","        if(this.commandAliases[alias]) {","            throw new Error(`Alias ${alias} already registered`);","        }","        this.commandAliases[alias] = label;","        this.commands[label].aliases.push(alias);","    }","","    /**","    * Register a command","    * @arg {String} label The command label","    * @arg {Function | String | Array<Function | String>} generator A response string, array of functions or strings, or function that generates a string or array of strings when called.","    * If a function is passed, the function will be passed a Message object and an array of command arguments. The Message object will have an additional property `prefix`, which is the prefix used in the command.","    * `generator(msg, args)`","    * @arg {Object} [options] Command options","    * @arg {Array<String>} [options.aliases] An array of command aliases","    * @arg {Boolean} [options.caseInsensitive=false] Whether the command label (and aliases) is case insensitive or not","    * @arg {Boolean} [options.deleteCommand=false] Whether to delete the user command message or not","    * @arg {Boolean} [options.argsRequired=false] If arguments are required or not","    * @arg {Boolean} [options.guildOnly=false] Whether to prevent the command from being used in Direct Messages or not","    * @arg {Boolean} [options.dmOnly=false] Whether to prevent the command from being used in guilds or not","    * @arg {String} [options.description=\"No description\"] A short description of the command to show in the default help command","    * @arg {String} [options.fullDescription=\"No full description\"] A detailed description of the command to show in the default help command","    * @arg {String} [options.usage] Details on how to call the command to show in the default help command","    * @arg {Object} [options.requirements] A set of factors that limit who can call the command","    * @arg {Array<String>} [options.requirements.userIDs] An array of user IDs representing users that can call the command","    * @arg {Object} [options.requirements.permissions] An object containing permission keys the user must match to use the command","    * i.e.:","    * ```","    * {","    *   \"administrator\": false,","    *   \"manageMessages\": true","    * }```","    * In the above example, the user must not have administrator permissions, but must have manageMessages to use the command","    * @arg {Array<String>} [options.requirements.roleIDs] An array of role IDs that would allow a user to use the command","    * @arg {Array<String>} [options.requirements.roleNames] An array of role names that would allow a user to use the command","    * @arg {Number} [options.cooldown] The cooldown between command usage in milliseconds","    * @arg {String} [options.cooldownMessage] A message to show when the command is on cooldown","    * @arg {String} [options.permissionMessage] A message to show when the user doesn't have permissions to use the command","    * @arg {String} [options.errorMessage] A message to show if the execution of the command handler somehow fails.","    * @returns {Command}","    */","    registerCommand(label, generator, options) {","        if(label.includes(\" \")) {","            throw new Error(\"Command label may not have spaces\");","        }","        if(this.commands[label]) {","            throw new Error(\"You have already registered a command for \" + label);","        }","        options = options || {};","        label = options.caseInsensitive === true ? label.toLowerCase() : label;","        for(var key in this.commandOptions.defaultCommandOptions) {","            if(options[key] === undefined) {","                options[key] = this.commandOptions.defaultCommandOptions[key];","            }","        }","        this.commands[label] = new Command(label, generator, options);","        if(options.aliases) {","            options.aliases.forEach((alias) => {","                this.commandAliases[alias] = label;","            });","        }","        return this.commands[label];","    }","","    /**","    * Unregister a command","    * @arg {String} label The command label","    */","    unregisterCommand(label) {","        var original = this.commandAliases[label];","        if(original) {","            this.commands[original].aliases.splice(this.commands[original].aliases.indexOf(label), 1);","            delete this.commandAliases[label];","        } else {","            delete this.commands[label];","        }","    }","}","","module.exports = CommandClient;",""],"l":{"3":1,"4":1,"27":0,"28":0,"38":0,"39":0,"40":0,"43":0,"44":0,"45":0,"47":0,"48":0,"49":0,"50":0,"52":0,"53":0,"54":0,"57":0,"59":0,"60":0,"61":0,"62":0,"65":0,"70":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"80":0,"81":0,"82":0,"83":0,"84":0,"86":0,"88":0,"89":0,"90":0,"92":0,"93":0,"94":0,"95":0,"96":0,"101":0,"102":0,"103":0,"105":0,"106":0,"107":0,"108":0,"109":0,"112":0,"114":0,"127":0,"128":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"144":0,"145":0,"146":0,"159":0,"160":0,"162":0,"163":0,"164":0,"166":0,"168":0,"174":0,"175":0,"176":0,"178":0,"179":0,"180":0,"181":0,"183":0,"192":0,"193":0,"194":0,"196":0,"197":0,"198":0,"200":0,"201":0,"239":0,"240":0,"242":0,"243":0,"245":0,"246":0,"247":0,"248":0,"249":0,"252":0,"253":0,"254":0,"255":0,"258":0,"266":0,"267":0,"268":0,"269":0,"271":0,"276":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/SharedStream.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/SharedStream.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"(anonymous_1)","line":30,"loc":{"start":{"line":30,"column":15},"end":{"line":30,"column":18}}},"2":{"name":"(anonymous_2)","line":71,"loc":{"start":{"line":71,"column":7},"end":{"line":71,"column":21}}},"3":{"name":"(anonymous_3)","line":87,"loc":{"start":{"line":87,"column":10},"end":{"line":87,"column":24}}},"4":{"name":"(anonymous_4)","line":104,"loc":{"start":{"line":104,"column":8},"end":{"line":104,"column":26}}},"5":{"name":"(anonymous_5)","line":145,"loc":{"start":{"line":145,"column":9},"end":{"line":145,"column":12}}},"6":{"name":"(anonymous_6)","line":187,"loc":{"start":{"line":187,"column":15},"end":{"line":187,"column":18}}},"7":{"name":"(anonymous_7)","line":209,"loc":{"start":{"line":209,"column":24},"end":{"line":209,"column":30}}},"8":{"name":"(anonymous_8)","line":218,"loc":{"start":{"line":218,"column":23},"end":{"line":218,"column":26}}},"9":{"name":"(anonymous_9)","line":227,"loc":{"start":{"line":227,"column":15},"end":{"line":227,"column":23}}},"10":{"name":"(anonymous_10)","line":236,"loc":{"start":{"line":236,"column":15},"end":{"line":236,"column":18}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":46}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":33}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":53}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":49}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":17}},"6":{"start":{"line":9,"column":0},"end":{"line":13,"column":1}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":44}},"8":{"start":{"line":12,"column":4},"end":{"line":12,"column":50}},"9":{"start":{"line":14,"column":0},"end":{"line":14,"column":13}},"10":{"start":{"line":15,"column":0},"end":{"line":18,"column":1}},"11":{"start":{"line":16,"column":4},"end":{"line":16,"column":36}},"12":{"start":{"line":19,"column":0},"end":{"line":19,"column":15}},"13":{"start":{"line":20,"column":0},"end":{"line":23,"column":1}},"14":{"start":{"line":21,"column":4},"end":{"line":21,"column":39}},"15":{"start":{"line":31,"column":8},"end":{"line":31,"column":16}},"16":{"start":{"line":33,"column":8},"end":{"line":33,"column":34}},"17":{"start":{"line":34,"column":8},"end":{"line":34,"column":32}},"18":{"start":{"line":35,"column":8},"end":{"line":35,"column":26}},"19":{"start":{"line":37,"column":8},"end":{"line":37,"column":64}},"20":{"start":{"line":39,"column":8},"end":{"line":39,"column":37}},"21":{"start":{"line":40,"column":8},"end":{"line":40,"column":38}},"22":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"23":{"start":{"line":42,"column":12},"end":{"line":42,"column":37}},"24":{"start":{"line":45,"column":8},"end":{"line":53,"column":9}},"25":{"start":{"line":46,"column":12},"end":{"line":46,"column":83}},"26":{"start":{"line":47,"column":15},"end":{"line":53,"column":9}},"27":{"start":{"line":48,"column":12},"end":{"line":48,"column":82}},"28":{"start":{"line":49,"column":12},"end":{"line":49,"column":103}},"29":{"start":{"line":50,"column":12},"end":{"line":50,"column":47}},"30":{"start":{"line":52,"column":12},"end":{"line":52,"column":105}},"31":{"start":{"line":55,"column":8},"end":{"line":55,"column":65}},"32":{"start":{"line":56,"column":8},"end":{"line":56,"column":61}},"33":{"start":{"line":56,"column":38},"end":{"line":56,"column":59}},"34":{"start":{"line":58,"column":8},"end":{"line":60,"column":9}},"35":{"start":{"line":59,"column":12},"end":{"line":59,"column":39}},"36":{"start":{"line":62,"column":8},"end":{"line":62,"column":30}},"37":{"start":{"line":64,"column":8},"end":{"line":64,"column":43}},"38":{"start":{"line":72,"column":8},"end":{"line":72,"column":64}},"39":{"start":{"line":73,"column":8},"end":{"line":79,"column":9}},"40":{"start":{"line":74,"column":12},"end":{"line":74,"column":50}},"41":{"start":{"line":76,"column":12},"end":{"line":78,"column":15}},"42":{"start":{"line":77,"column":16},"end":{"line":77,"column":54}},"43":{"start":{"line":80,"column":8},"end":{"line":80,"column":26}},"44":{"start":{"line":88,"column":8},"end":{"line":88,"column":57}},"45":{"start":{"line":105,"column":8},"end":{"line":105,"column":32}},"46":{"start":{"line":106,"column":8},"end":{"line":106,"column":48}},"47":{"start":{"line":107,"column":8},"end":{"line":107,"column":102}},"48":{"start":{"line":108,"column":8},"end":{"line":108,"column":54}},"49":{"start":{"line":109,"column":8},"end":{"line":109,"column":52}},"50":{"start":{"line":110,"column":8},"end":{"line":110,"column":56}},"51":{"start":{"line":112,"column":8},"end":{"line":112,"column":73}},"52":{"start":{"line":113,"column":8},"end":{"line":113,"column":76}},"53":{"start":{"line":114,"column":8},"end":{"line":114,"column":101}},"54":{"start":{"line":115,"column":8},"end":{"line":115,"column":83}},"55":{"start":{"line":117,"column":8},"end":{"line":120,"column":9}},"56":{"start":{"line":118,"column":12},"end":{"line":118,"column":69}},"57":{"start":{"line":119,"column":12},"end":{"line":119,"column":19}},"58":{"start":{"line":122,"column":8},"end":{"line":122,"column":27}},"59":{"start":{"line":123,"column":8},"end":{"line":132,"column":10}},"60":{"start":{"line":134,"column":8},"end":{"line":134,"column":28}},"61":{"start":{"line":140,"column":8},"end":{"line":140,"column":27}},"62":{"start":{"line":142,"column":8},"end":{"line":142,"column":21}},"63":{"start":{"line":146,"column":8},"end":{"line":148,"column":9}},"64":{"start":{"line":147,"column":12},"end":{"line":147,"column":38}},"65":{"start":{"line":150,"column":8},"end":{"line":150,"column":66}},"66":{"start":{"line":152,"column":8},"end":{"line":152,"column":35}},"67":{"start":{"line":154,"column":8},"end":{"line":173,"column":9}},"68":{"start":{"line":155,"column":12},"end":{"line":157,"column":13}},"69":{"start":{"line":156,"column":16},"end":{"line":156,"column":52}},"70":{"start":{"line":158,"column":12},"end":{"line":161,"column":13}},"71":{"start":{"line":159,"column":16},"end":{"line":159,"column":48}},"72":{"start":{"line":160,"column":16},"end":{"line":160,"column":39}},"73":{"start":{"line":162,"column":15},"end":{"line":173,"column":9}},"74":{"start":{"line":163,"column":12},"end":{"line":170,"column":13}},"75":{"start":{"line":164,"column":16},"end":{"line":164,"column":40}},"76":{"start":{"line":166,"column":16},"end":{"line":166,"column":82}},"77":{"start":{"line":167,"column":16},"end":{"line":167,"column":78}},"78":{"start":{"line":168,"column":16},"end":{"line":168,"column":102}},"79":{"start":{"line":169,"column":16},"end":{"line":169,"column":23}},"80":{"start":{"line":172,"column":12},"end":{"line":172,"column":38}},"81":{"start":{"line":175,"column":8},"end":{"line":179,"column":11}},"82":{"start":{"line":176,"column":12},"end":{"line":178,"column":13}},"83":{"start":{"line":177,"column":16},"end":{"line":177,"column":86}},"84":{"start":{"line":180,"column":8},"end":{"line":180,"column":68}},"85":{"start":{"line":181,"column":8},"end":{"line":181,"column":141}},"86":{"start":{"line":188,"column":8},"end":{"line":190,"column":9}},"87":{"start":{"line":189,"column":12},"end":{"line":189,"column":19}},"88":{"start":{"line":191,"column":8},"end":{"line":191,"column":26}},"89":{"start":{"line":192,"column":8},"end":{"line":195,"column":9}},"90":{"start":{"line":193,"column":12},"end":{"line":193,"column":47}},"91":{"start":{"line":194,"column":12},"end":{"line":194,"column":40}},"92":{"start":{"line":196,"column":8},"end":{"line":196,"column":28}},"93":{"start":{"line":197,"column":8},"end":{"line":197,"column":26}},"94":{"start":{"line":198,"column":8},"end":{"line":198,"column":34}},"95":{"start":{"line":200,"column":8},"end":{"line":200,"column":47}},"96":{"start":{"line":206,"column":8},"end":{"line":206,"column":25}},"97":{"start":{"line":210,"column":8},"end":{"line":215,"column":9}},"98":{"start":{"line":211,"column":12},"end":{"line":211,"column":32}},"99":{"start":{"line":212,"column":12},"end":{"line":214,"column":13}},"100":{"start":{"line":213,"column":16},"end":{"line":213,"column":43}},"101":{"start":{"line":219,"column":8},"end":{"line":224,"column":9}},"102":{"start":{"line":220,"column":12},"end":{"line":220,"column":26}},"103":{"start":{"line":221,"column":12},"end":{"line":223,"column":13}},"104":{"start":{"line":222,"column":16},"end":{"line":222,"column":37}},"105":{"start":{"line":228,"column":8},"end":{"line":233,"column":9}},"106":{"start":{"line":229,"column":12},"end":{"line":229,"column":34}},"107":{"start":{"line":230,"column":12},"end":{"line":232,"column":13}},"108":{"start":{"line":231,"column":16},"end":{"line":231,"column":38}},"109":{"start":{"line":237,"column":8},"end":{"line":237,"column":21}},"110":{"start":{"line":238,"column":8},"end":{"line":248,"column":9}},"111":{"start":{"line":239,"column":12},"end":{"line":239,"column":69}},"112":{"start":{"line":240,"column":12},"end":{"line":247,"column":13}},"113":{"start":{"line":241,"column":16},"end":{"line":244,"column":17}},"114":{"start":{"line":242,"column":20},"end":{"line":242,"column":39}},"115":{"start":{"line":243,"column":20},"end":{"line":243,"column":29}},"116":{"start":{"line":245,"column":16},"end":{"line":245,"column":48}},"117":{"start":{"line":246,"column":16},"end":{"line":246,"column":23}},"118":{"start":{"line":249,"column":8},"end":{"line":251,"column":9}},"119":{"start":{"line":250,"column":12},"end":{"line":250,"column":121}},"120":{"start":{"line":252,"column":8},"end":{"line":252,"column":134}},"121":{"start":{"line":256,"column":0},"end":{"line":256,"column":30}}},"branchMap":{"1":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":41,"column":8}},{"start":{"line":41,"column":8},"end":{"line":41,"column":8}}]},"2":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]},"3":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":15},"end":{"line":47,"column":15}},{"start":{"line":47,"column":15},"end":{"line":47,"column":15}}]},"4":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":8}},{"start":{"line":58,"column":8},"end":{"line":58,"column":8}}]},"5":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":11},"end":{"line":58,"column":15}},{"start":{"line":58,"column":19},"end":{"line":58,"column":40}}]},"6":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":73,"column":8}},{"start":{"line":73,"column":8},"end":{"line":73,"column":8}}]},"7":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":18},"end":{"line":105,"column":25}},{"start":{"line":105,"column":29},"end":{"line":105,"column":31}}]},"8":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":25},"end":{"line":106,"column":39}},{"start":{"line":106,"column":43},"end":{"line":106,"column":47}}]},"9":{"line":107,"type":"cond-expr","locations":[{"start":{"line":107,"column":70},"end":{"line":107,"column":94}},{"start":{"line":107,"column":97},"end":{"line":107,"column":101}}]},"10":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":28},"end":{"line":109,"column":45}},{"start":{"line":109,"column":49},"end":{"line":109,"column":51}}]},"11":{"line":110,"type":"binary-expr","locations":[{"start":{"line":110,"column":30},"end":{"line":110,"column":49}},{"start":{"line":110,"column":53},"end":{"line":110,"column":55}}]},"12":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":31},"end":{"line":112,"column":51}},{"start":{"line":112,"column":55},"end":{"line":112,"column":72}}]},"13":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":32},"end":{"line":113,"column":53}},{"start":{"line":113,"column":57},"end":{"line":113,"column":75}}]},"14":{"line":114,"type":"binary-expr","locations":[{"start":{"line":114,"column":28},"end":{"line":114,"column":45}},{"start":{"line":114,"column":49},"end":{"line":114,"column":100}}]},"15":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":26},"end":{"line":115,"column":41}},{"start":{"line":115,"column":45},"end":{"line":115,"column":82}}]},"16":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":8},"end":{"line":117,"column":8}},{"start":{"line":117,"column":8},"end":{"line":117,"column":8}}]},"17":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":8},"end":{"line":146,"column":8}},{"start":{"line":146,"column":8},"end":{"line":146,"column":8}}]},"18":{"line":146,"type":"binary-expr","locations":[{"start":{"line":146,"column":11},"end":{"line":146,"column":31}},{"start":{"line":146,"column":35},"end":{"line":146,"column":67}}]},"19":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":8},"end":{"line":154,"column":8}},{"start":{"line":154,"column":8},"end":{"line":154,"column":8}}]},"20":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":12},"end":{"line":155,"column":12}},{"start":{"line":155,"column":12},"end":{"line":155,"column":12}}]},"21":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":12},"end":{"line":158,"column":12}},{"start":{"line":158,"column":12},"end":{"line":158,"column":12}}]},"22":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":15},"end":{"line":162,"column":15}},{"start":{"line":162,"column":15},"end":{"line":162,"column":15}}]},"23":{"line":162,"type":"binary-expr","locations":[{"start":{"line":162,"column":18},"end":{"line":162,"column":62}},{"start":{"line":162,"column":66},"end":{"line":162,"column":170}}]},"24":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":12},"end":{"line":163,"column":12}},{"start":{"line":163,"column":12},"end":{"line":163,"column":12}}]},"25":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":12},"end":{"line":176,"column":12}},{"start":{"line":176,"column":12},"end":{"line":176,"column":12}}]},"26":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":8},"end":{"line":188,"column":8}},{"start":{"line":188,"column":8},"end":{"line":188,"column":8}}]},"27":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":8},"end":{"line":192,"column":8}},{"start":{"line":192,"column":8},"end":{"line":192,"column":8}}]},"28":{"line":192,"type":"binary-expr","locations":[{"start":{"line":192,"column":11},"end":{"line":192,"column":23}},{"start":{"line":192,"column":27},"end":{"line":192,"column":47}}]},"29":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":12},"end":{"line":212,"column":12}},{"start":{"line":212,"column":12},"end":{"line":212,"column":12}}]},"30":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":12},"end":{"line":221,"column":12}},{"start":{"line":221,"column":12},"end":{"line":221,"column":12}}]},"31":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":8},"end":{"line":228,"column":8}},{"start":{"line":228,"column":8},"end":{"line":228,"column":8}}]},"32":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":12},"end":{"line":240,"column":12}},{"start":{"line":240,"column":12},"end":{"line":240,"column":12}}]},"33":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":16},"end":{"line":241,"column":16}},{"start":{"line":241,"column":16},"end":{"line":241,"column":16}}]},"34":{"line":249,"type":"if","locations":[{"start":{"line":249,"column":8},"end":{"line":249,"column":8}},{"start":{"line":249,"column":8},"end":{"line":249,"column":8}}]}},"code":["\"use strict\";","","const ChildProcess = require(\"child_process\");","const Piper = require(\"./Piper\");","const VoiceConnection = require(\"./VoiceConnection\");","const Collection = require(\"../util/Collection\");","","var EventEmitter;","try {","    EventEmitter = require(\"eventemitter3\");","} catch(err) {","    EventEmitter = require(\"events\").EventEmitter;","}","var NodeOpus;","try {","    NodeOpus = require(\"node-opus\");","} catch(err) { // eslint-disable no-empty","}","var OpusScript;","try {","    OpusScript = require(\"opusscript\");","} catch(err) { // eslint-disable no-empty","}","","/**","* Represents a collection of VoiceConnections sharing an input stream","* @extends EventEmitter","*/","class SharedStream extends EventEmitter {","    constructor() {","        super();","","        this.samplingRate = 48000;","        this.frameDuration = 60;","        this.channels = 2;","","        this.voiceConnections = new Collection(VoiceConnection);","","        this.converterCommand = null;","        var pick = this.pickCommand();","        if(pick instanceof Error) {","            this.emit(\"error\", pick);","        }","","        if(NodeOpus) {","            this.opus = new NodeOpus.OpusEncoder(this.samplingRate, this.channels);","        } else if(OpusScript) {","            this.emit(\"debug\", \"node-opus not found, falling back to opusscript\");","            this.opus = new OpusScript(this.samplingRate, this.channels, OpusScript.Application.AUDIO);","            this.opus.setBitrate(this.bitrate);","        } else {","            this.emit(\"warn\", new Error(\"No opus encoder found, playing non-opus audio will not work.\"));","        }","","        this.piper = new Piper(this.converterCommand, this.opus);","        this.piper.on(\"error\", (e) => this.emit(\"error\", e));","","        if(pick && this.converterCommand) {","            this.piper.libopus = false;","        }","","        this.speaking = false;","","        this._send = this._send.bind(this);","    }","","    /**","    * Add a voice connection to the shared stream","    * @arg {VoiceConnection} connection The voice connection to add","    */","    add(_connection) {","        var connection = this.voiceConnections.add(_connection);","        if(connection.ready) {","            connection.setSpeaking(this.speaking);","        } else {","            connection.once(\"ready\", () => {","                connection.setSpeaking(this.speaking);","            });","        }","        return connection;","    }","","    /**","    * Remove a voice connection from the shared stream","    * @arg {VoiceConnection} connection The voice connection to remove","    */","    remove(_connection) {","        return this.voiceConnections.remove(_connection);","    }","","    /**","    * Play an audio or video resource. If playing from a non-opus resource, FFMPEG should be compiled with --enable-libopus for best performance. If playing from HTTPS, FFMPEG must be compiled with --enable-openssl","    * @arg {ReadableStream | String} resource The audio or video resource, either a ReadableStream, URL, or file path","    * @arg {Object} [options] Music options","    * @arg {Boolean} [options.inlineVolume=false] Whether to enable on-the-fly volume changing. Note that enabling this leads to increased CPU usage","    * @arg {Number} [options.voiceDataTimeout=2000] Timeout when waiting for voice data (-1 for no timeout)","    * @arg {Array<String>} [options.inputArgs] Additional input parameters to pass to ffmpeg/avconv (before -i)","    * @arg {Array<String>} [options.encoderArgs] Additional encoder parameters to pass to ffmpeg/avconv (after -i)","    * @arg {String} [options.format] The format of the resource. If null, FFmpeg will attempt to guess and play the format. Available options: \"dca\", \"ogg\", \"pcm\", null","    * @arg {Number} [options.frameDuration=60] The resource opus frame duration (required for DCA/Ogg)","    * @arg {Number} [options.frameSize=2880] The resource opus frame size","    * @arg {Number} [options.sampleRate=48000] The resource audio sampling rate","    */","    play(source, options) {","        options = options || {};","        options.format = options.format || null;","        options.voiceDataTimeout = !isNaN(options.voiceDataTimeout) ? options.voiceDataTimeout : 2000;","        options.inlineVolume = !!options.inlineVolume;","        options.inputArgs = options.inputArgs || [];","        options.encoderArgs = options.encoderArgs || [];","","        options.samplingRate = options.samplingRate || this.samplingRate;","        options.frameDuration = options.frameDuration || this.frameDuration;","        options.frameSize = options.frameSize || options.samplingRate * options.frameDuration / 1000;","        options.pcmSize = options.pcmSize || options.frameSize * 2 * this.channels;","","        if(!this.piper.encode(source, options)) {","            this.emit(\"error\", new Error(\"Unable to encode source\"));","            return;","        }","","        this.ended = false;","        this.current = {","            startTime: 0, // later","            playTime: 0,","            pausedTimestamp: 0,","            pausedTime: 0,","            bufferingTicks: 0,","            options: options,","            timeout: null,","            buffer: null","        };","","        this.playing = true;","","        /**","        * Fired when the shared stream starts playing a stream","        * @event SharedStream#start","        */","        this.emit(\"start\");","","        this._send();","    }","","    _send() {","        if(!this.piper.encoding && this.piper.dataPacketCount === 0) {","            return this.stopPlaying();","        }","","        this._incrementTimestamps(this.current.options.frameSize);","","        this._incrementSequences();","","        if((this.current.buffer = this.piper.getDataPacket())) {","            if(this.current.startTime === 0) {","                this.current.startTime = Date.now();","            }","            if(this.current.bufferingTicks > 0) {","                this.current.bufferingTicks = 0;","                this.setSpeaking(true);","            }","        } else if(this.current.options.voiceDataTimeout === -1 || this.current.bufferingTicks < this.current.options.voiceDataTimeout / this.current.options.frameDuration) { // wait for data","            if(++this.current.bufferingTicks <= 0) {","                this.setSpeaking(false);","            } else {","                this.current.pausedTime += 4 * this.current.options.frameDuration;","                this._incrementTimestamps(3 * this.current.options.frameSize);","                this.current.timeout = setTimeout(this._send, 4 * this.current.options.frameDuration);","                return;","            }","        } else {","            return this.stopPlaying();","        }","","        this.voiceConnections.forEach((connection) => {","            if(connection.ready) {","                connection._sendPacket(connection._createPacket(this.current.buffer));","            }","        });","        this.current.playTime += this.current.options.frameDuration;","        this.current.timeout = setTimeout(this._send, this.current.startTime + this.current.pausedTime + this.current.playTime - Date.now());","    }","","    /**","    * Stop the bot from sending audio","    */","    stopPlaying() {","        if(this.ended) {","            return;","        }","        this.ended = true;","        if(this.current && this.current.timeout) {","            clearTimeout(this.current.timeout);","            this.current.timeout = null;","        }","        this.current = null;","        this.piper.stop();","        this.piper.resetPackets();","","        this.setSpeaking(this.playing = false);","","        /**","        * Fired when the shared stream finishes playing a stream","        * @event SharedStream#end","        */","        this.emit(\"end\");","    }","","    _incrementTimestamps(val) {","        for(var vc of this.voiceConnections.values()) {","            vc.timestamp += val;","            if(vc.timestamp >= 4294967295) {","                vc.timestamp -= 4294967295;","            }","        }","    }","","    _incrementSequences() {","        for(var vc of this.voiceConnections.values()) {","            vc.sequence++;","            if(vc.sequence >= 65536) {","                vc.sequence -= 65536;","            }","        }","    }","","    setSpeaking(value) {","        if((value = !!value) != this.speaking) {","            this.speaking = value;","            for(var vc of this.voiceConnections.values()) {","                vc.setSpeaking(value);","            }","        }","    }","","    pickCommand() {","        var tenative;","        for(var command of [\"./ffmpeg\", \"./avconv\", \"ffmpeg\", \"avconv\"]) {","            var res = ChildProcess.spawnSync(command, [\"-encoders\"]);","            if(!res.error) {","                if(!res.stdout.toString().includes(\"libopus\")) {","                    tenative = command;","                    continue;","                }","                this.converterCommand = command;","                return;","            }","        }","        if(tenative) {","            return (this.converterCommand = tenative) + \" does not have libopus support. Non-opus playback may be laggy\";","        }","        throw new Error(\"Neither ffmpeg nor avconv was found. Make sure you installed either one, and check that it is in your PATH\");","    }","}","","module.exports = SharedStream;",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"9":1,"10":1,"12":1,"14":1,"15":1,"16":1,"19":1,"20":1,"21":1,"31":0,"33":0,"34":0,"35":0,"37":0,"39":0,"40":0,"41":0,"42":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"52":0,"55":0,"56":0,"58":0,"59":0,"62":0,"64":0,"72":0,"73":0,"74":0,"76":0,"77":0,"80":0,"88":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"112":0,"113":0,"114":0,"115":0,"117":0,"118":0,"119":0,"122":0,"123":0,"134":0,"140":0,"142":0,"146":0,"147":0,"150":0,"152":0,"154":0,"155":0,"156":0,"158":0,"159":0,"160":0,"162":0,"163":0,"164":0,"166":0,"167":0,"168":0,"169":0,"172":0,"175":0,"176":0,"177":0,"180":0,"181":0,"188":0,"189":0,"191":0,"192":0,"193":0,"194":0,"196":0,"197":0,"198":0,"200":0,"206":0,"210":0,"211":0,"212":0,"213":0,"219":0,"220":0,"221":0,"222":0,"228":0,"229":0,"230":0,"231":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"245":0,"246":0,"249":0,"250":0,"252":0,"256":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/Piper.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/Piper.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"(anonymous_1)","line":24,"loc":{"start":{"line":24,"column":15},"end":{"line":24,"column":40}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":10},"end":{"line":43,"column":28}}},"3":{"name":"(anonymous_3)","line":181,"loc":{"start":{"line":181,"column":8},"end":{"line":181,"column":20}}},"4":{"name":"(anonymous_4)","line":218,"loc":{"start":{"line":218,"column":9},"end":{"line":218,"column":12}}},"5":{"name":"(anonymous_5)","line":224,"loc":{"start":{"line":224,"column":16},"end":{"line":224,"column":19}}},"6":{"name":"(anonymous_6)","line":228,"loc":{"start":{"line":228,"column":17},"end":{"line":228,"column":26}}},"7":{"name":"(anonymous_7)","line":237,"loc":{"start":{"line":237,"column":13},"end":{"line":237,"column":22}}},"8":{"name":"(anonymous_8)","line":250,"loc":{"start":{"line":250,"column":17},"end":{"line":250,"column":20}}},"9":{"name":"(anonymous_9)","line":266,"loc":{"start":{"line":266,"column":23},"end":{"line":266,"column":26}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":67}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":71}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":71}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":25}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":29}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":31}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":67}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":56}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":67}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":40}},"11":{"start":{"line":13,"column":0},"end":{"line":13,"column":65}},"12":{"start":{"line":14,"column":0},"end":{"line":14,"column":69}},"13":{"start":{"line":16,"column":0},"end":{"line":16,"column":17}},"14":{"start":{"line":17,"column":0},"end":{"line":21,"column":1}},"15":{"start":{"line":18,"column":4},"end":{"line":18,"column":44}},"16":{"start":{"line":20,"column":4},"end":{"line":20,"column":50}},"17":{"start":{"line":25,"column":8},"end":{"line":25,"column":16}},"18":{"start":{"line":27,"column":8},"end":{"line":27,"column":21}},"19":{"start":{"line":29,"column":8},"end":{"line":29,"column":49}},"20":{"start":{"line":30,"column":8},"end":{"line":30,"column":31}},"21":{"start":{"line":31,"column":8},"end":{"line":31,"column":33}},"22":{"start":{"line":32,"column":8},"end":{"line":32,"column":33}},"23":{"start":{"line":33,"column":8},"end":{"line":33,"column":30}},"24":{"start":{"line":34,"column":8},"end":{"line":34,"column":28}},"25":{"start":{"line":35,"column":8},"end":{"line":35,"column":25}},"26":{"start":{"line":36,"column":8},"end":{"line":36,"column":29}},"27":{"start":{"line":38,"column":8},"end":{"line":38,"column":33}},"28":{"start":{"line":44,"column":8},"end":{"line":47,"column":9}},"29":{"start":{"line":45,"column":12},"end":{"line":45,"column":62}},"30":{"start":{"line":46,"column":12},"end":{"line":46,"column":25}},"31":{"start":{"line":49,"column":8},"end":{"line":76,"column":9}},"32":{"start":{"line":50,"column":12},"end":{"line":72,"column":13}},"33":{"start":{"line":51,"column":16},"end":{"line":71,"column":17}},"34":{"start":{"line":52,"column":20},"end":{"line":52,"column":62}},"35":{"start":{"line":53,"column":20},"end":{"line":57,"column":21}},"36":{"start":{"line":54,"column":24},"end":{"line":54,"column":108}},"37":{"start":{"line":54,"column":50},"end":{"line":54,"column":71}},"38":{"start":{"line":54,"column":94},"end":{"line":54,"column":106}},"39":{"start":{"line":56,"column":24},"end":{"line":56,"column":109}},"40":{"start":{"line":56,"column":51},"end":{"line":56,"column":72}},"41":{"start":{"line":56,"column":95},"end":{"line":56,"column":107}},"42":{"start":{"line":58,"column":20},"end":{"line":58,"column":41}},"43":{"start":{"line":60,"column":20},"end":{"line":69,"column":21}},"44":{"start":{"line":61,"column":24},"end":{"line":61,"column":44}},"45":{"start":{"line":63,"column":24},"end":{"line":67,"column":25}},"46":{"start":{"line":64,"column":28},"end":{"line":64,"column":87}},"47":{"start":{"line":66,"column":28},"end":{"line":66,"column":106}},"48":{"start":{"line":68,"column":24},"end":{"line":68,"column":37}},"49":{"start":{"line":70,"column":20},"end":{"line":70,"column":57}},"50":{"start":{"line":73,"column":15},"end":{"line":76,"column":9}},"51":{"start":{"line":74,"column":12},"end":{"line":74,"column":65}},"52":{"start":{"line":75,"column":12},"end":{"line":75,"column":25}},"53":{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},"54":{"start":{"line":79,"column":12},"end":{"line":79,"column":73}},"55":{"start":{"line":79,"column":58},"end":{"line":79,"column":70}},"56":{"start":{"line":82,"column":8},"end":{"line":82,"column":33}},"57":{"start":{"line":83,"column":8},"end":{"line":83,"column":33}},"58":{"start":{"line":85,"column":8},"end":{"line":168,"column":9}},"59":{"start":{"line":86,"column":12},"end":{"line":86,"column":104}},"60":{"start":{"line":86,"column":89},"end":{"line":86,"column":101}},"61":{"start":{"line":87,"column":15},"end":{"line":168,"column":9}},"62":{"start":{"line":88,"column":12},"end":{"line":88,"column":104}},"63":{"start":{"line":88,"column":89},"end":{"line":88,"column":101}},"64":{"start":{"line":89,"column":15},"end":{"line":168,"column":9}},"65":{"start":{"line":90,"column":12},"end":{"line":90,"column":105}},"66":{"start":{"line":90,"column":90},"end":{"line":90,"column":102}},"67":{"start":{"line":91,"column":15},"end":{"line":168,"column":9}},"68":{"start":{"line":92,"column":12},"end":{"line":164,"column":13}},"69":{"start":{"line":93,"column":16},"end":{"line":112,"column":17}},"70":{"start":{"line":94,"column":20},"end":{"line":97,"column":21}},"71":{"start":{"line":95,"column":24},"end":{"line":95,"column":145}},"72":{"start":{"line":96,"column":24},"end":{"line":96,"column":37}},"73":{"start":{"line":98,"column":20},"end":{"line":111,"column":21}},"74":{"start":{"line":99,"column":24},"end":{"line":104,"column":63}},"75":{"start":{"line":104,"column":48},"end":{"line":104,"column":60}},"76":{"start":{"line":106,"column":24},"end":{"line":110,"column":64}},"77":{"start":{"line":110,"column":49},"end":{"line":110,"column":61}},"78":{"start":{"line":113,"column":16},"end":{"line":113,"column":130}},"79":{"start":{"line":113,"column":115},"end":{"line":113,"column":127}},"80":{"start":{"line":114,"column":16},"end":{"line":114,"column":56}},"81":{"start":{"line":115,"column":16},"end":{"line":119,"column":56}},"82":{"start":{"line":119,"column":41},"end":{"line":119,"column":53}},"83":{"start":{"line":120,"column":16},"end":{"line":120,"column":40}},"84":{"start":{"line":121,"column":16},"end":{"line":121,"column":40}},"85":{"start":{"line":123,"column":16},"end":{"line":163,"column":17}},"86":{"start":{"line":124,"column":20},"end":{"line":141,"column":21}},"87":{"start":{"line":125,"column":24},"end":{"line":132,"column":63}},"88":{"start":{"line":132,"column":48},"end":{"line":132,"column":60}},"89":{"start":{"line":134,"column":24},"end":{"line":140,"column":64}},"90":{"start":{"line":140,"column":49},"end":{"line":140,"column":61}},"91":{"start":{"line":142,"column":20},"end":{"line":142,"column":112}},"92":{"start":{"line":142,"column":97},"end":{"line":142,"column":109}},"93":{"start":{"line":144,"column":20},"end":{"line":157,"column":21}},"94":{"start":{"line":145,"column":24},"end":{"line":150,"column":63}},"95":{"start":{"line":150,"column":48},"end":{"line":150,"column":60}},"96":{"start":{"line":152,"column":24},"end":{"line":156,"column":64}},"97":{"start":{"line":156,"column":49},"end":{"line":156,"column":61}},"98":{"start":{"line":158,"column":20},"end":{"line":162,"column":60}},"99":{"start":{"line":162,"column":45},"end":{"line":162,"column":57}},"100":{"start":{"line":166,"column":12},"end":{"line":166,"column":65}},"101":{"start":{"line":167,"column":12},"end":{"line":167,"column":25}},"102":{"start":{"line":170,"column":8},"end":{"line":170,"column":64}},"103":{"start":{"line":171,"column":8},"end":{"line":171,"column":40}},"104":{"start":{"line":173,"column":8},"end":{"line":173,"column":66}},"105":{"start":{"line":174,"column":8},"end":{"line":174,"column":70}},"106":{"start":{"line":174,"column":45},"end":{"line":174,"column":68}},"107":{"start":{"line":176,"column":8},"end":{"line":176,"column":27}},"108":{"start":{"line":178,"column":8},"end":{"line":178,"column":38}},"109":{"start":{"line":182,"column":8},"end":{"line":184,"column":9}},"110":{"start":{"line":183,"column":12},"end":{"line":183,"column":19}},"111":{"start":{"line":186,"column":8},"end":{"line":188,"column":9}},"112":{"start":{"line":187,"column":12},"end":{"line":187,"column":34}},"113":{"start":{"line":190,"column":8},"end":{"line":193,"column":9}},"114":{"start":{"line":191,"column":12},"end":{"line":191,"column":47}},"115":{"start":{"line":192,"column":12},"end":{"line":192,"column":40}},"116":{"start":{"line":195,"column":8},"end":{"line":197,"column":9}},"117":{"start":{"line":196,"column":12},"end":{"line":196,"column":19}},"118":{"start":{"line":199,"column":8},"end":{"line":201,"column":9}},"119":{"start":{"line":200,"column":12},"end":{"line":200,"column":55}},"120":{"start":{"line":203,"column":8},"end":{"line":209,"column":9}},"121":{"start":{"line":204,"column":12},"end":{"line":208,"column":13}},"122":{"start":{"line":205,"column":16},"end":{"line":205,"column":33}},"123":{"start":{"line":207,"column":16},"end":{"line":207,"column":32}},"124":{"start":{"line":211,"column":8},"end":{"line":211,"column":21}},"125":{"start":{"line":212,"column":8},"end":{"line":215,"column":9}},"126":{"start":{"line":213,"column":12},"end":{"line":213,"column":34}},"127":{"start":{"line":214,"column":12},"end":{"line":214,"column":30}},"128":{"start":{"line":219,"column":8},"end":{"line":219,"column":26}},"129":{"start":{"line":220,"column":8},"end":{"line":220,"column":31}},"130":{"start":{"line":221,"column":8},"end":{"line":221,"column":27}},"131":{"start":{"line":225,"column":8},"end":{"line":225,"column":31}},"132":{"start":{"line":229,"column":8},"end":{"line":231,"column":9}},"133":{"start":{"line":230,"column":12},"end":{"line":230,"column":19}},"134":{"start":{"line":232,"column":8},"end":{"line":234,"column":9}},"135":{"start":{"line":233,"column":12},"end":{"line":233,"column":85}},"136":{"start":{"line":233,"column":35},"end":{"line":233,"column":83}},"137":{"start":{"line":238,"column":8},"end":{"line":238,"column":34}},"138":{"start":{"line":239,"column":8},"end":{"line":241,"column":9}},"139":{"start":{"line":240,"column":12},"end":{"line":240,"column":19}},"140":{"start":{"line":243,"column":8},"end":{"line":243,"column":38}},"141":{"start":{"line":251,"column":8},"end":{"line":253,"column":9}},"142":{"start":{"line":252,"column":12},"end":{"line":252,"column":42}},"143":{"start":{"line":254,"column":8},"end":{"line":263,"column":9}},"144":{"start":{"line":255,"column":12},"end":{"line":255,"column":45}},"145":{"start":{"line":257,"column":12},"end":{"line":257,"column":69}},"146":{"start":{"line":258,"column":12},"end":{"line":261,"column":13}},"147":{"start":{"line":259,"column":16},"end":{"line":259,"column":78}},"148":{"start":{"line":260,"column":16},"end":{"line":260,"column":92}},"149":{"start":{"line":262,"column":12},"end":{"line":262,"column":58}},"150":{"start":{"line":267,"column":8},"end":{"line":267,"column":40}},"151":{"start":{"line":271,"column":0},"end":{"line":271,"column":23}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":44,"column":8}},{"start":{"line":44,"column":8},"end":{"line":44,"column":8}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":11},"end":{"line":44,"column":24}},{"start":{"line":44,"column":28},"end":{"line":44,"column":47}}]},"3":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":49,"column":8}},{"start":{"line":49,"column":8},"end":{"line":49,"column":8}}]},"4":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":12},"end":{"line":50,"column":12}},{"start":{"line":50,"column":12},"end":{"line":50,"column":12}}]},"5":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":15},"end":{"line":50,"column":39}},{"start":{"line":50,"column":43},"end":{"line":50,"column":67}},{"start":{"line":50,"column":71},"end":{"line":50,"column":96}},{"start":{"line":50,"column":100},"end":{"line":50,"column":124}}]},"6":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":16},"end":{"line":51,"column":16}},{"start":{"line":51,"column":16},"end":{"line":51,"column":16}}]},"7":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":19},"end":{"line":51,"column":47}},{"start":{"line":51,"column":51},"end":{"line":51,"column":80}}]},"8":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":20},"end":{"line":53,"column":20}},{"start":{"line":53,"column":20},"end":{"line":53,"column":20}}]},"9":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":24},"end":{"line":63,"column":24}},{"start":{"line":63,"column":24},"end":{"line":63,"column":24}}]},"10":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":15},"end":{"line":73,"column":15}},{"start":{"line":73,"column":15},"end":{"line":73,"column":15}}]},"11":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":18},"end":{"line":73,"column":45}},{"start":{"line":73,"column":49},"end":{"line":73,"column":61}}]},"12":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":78,"column":8}},{"start":{"line":78,"column":8},"end":{"line":78,"column":8}}]},"13":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":8},"end":{"line":85,"column":8}},{"start":{"line":85,"column":8},"end":{"line":85,"column":8}}]},"14":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":15},"end":{"line":87,"column":15}},{"start":{"line":87,"column":15},"end":{"line":87,"column":15}}]},"15":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":15},"end":{"line":89,"column":15}},{"start":{"line":89,"column":15},"end":{"line":89,"column":15}}]},"16":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":15},"end":{"line":91,"column":15}},{"start":{"line":91,"column":15},"end":{"line":91,"column":15}}]},"17":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":18},"end":{"line":91,"column":33}},{"start":{"line":91,"column":37},"end":{"line":91,"column":61}}]},"18":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":12},"end":{"line":92,"column":12}},{"start":{"line":92,"column":12},"end":{"line":92,"column":12}}]},"19":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":16},"end":{"line":93,"column":16}},{"start":{"line":93,"column":16},"end":{"line":93,"column":16}}]},"20":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":20},"end":{"line":94,"column":20}},{"start":{"line":94,"column":20},"end":{"line":94,"column":20}}]},"21":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":20},"end":{"line":98,"column":20}},{"start":{"line":98,"column":20},"end":{"line":98,"column":20}}]},"22":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":16},"end":{"line":123,"column":16}},{"start":{"line":123,"column":16},"end":{"line":123,"column":16}}]},"23":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":20},"end":{"line":124,"column":20}},{"start":{"line":124,"column":20},"end":{"line":124,"column":20}}]},"24":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":20},"end":{"line":144,"column":20}},{"start":{"line":144,"column":20},"end":{"line":144,"column":20}}]},"25":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":8},"end":{"line":182,"column":8}},{"start":{"line":182,"column":8},"end":{"line":182,"column":8}}]},"26":{"line":182,"type":"binary-expr","locations":[{"start":{"line":182,"column":11},"end":{"line":182,"column":17}},{"start":{"line":182,"column":21},"end":{"line":182,"column":51}}]},"27":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":8},"end":{"line":186,"column":8}},{"start":{"line":186,"column":8},"end":{"line":186,"column":8}}]},"28":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":8},"end":{"line":190,"column":8}},{"start":{"line":190,"column":8},"end":{"line":190,"column":8}}]},"29":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":8},"end":{"line":195,"column":8}},{"start":{"line":195,"column":8},"end":{"line":195,"column":8}}]},"30":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":8},"end":{"line":199,"column":8}},{"start":{"line":199,"column":8},"end":{"line":199,"column":8}}]},"31":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":12},"end":{"line":204,"column":12}},{"start":{"line":204,"column":12},"end":{"line":204,"column":12}}]},"32":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":8},"end":{"line":212,"column":8}},{"start":{"line":212,"column":8},"end":{"line":212,"column":8}}]},"33":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":8},"end":{"line":229,"column":8}},{"start":{"line":229,"column":8},"end":{"line":229,"column":8}}]},"34":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":8},"end":{"line":232,"column":8}},{"start":{"line":232,"column":8},"end":{"line":232,"column":8}}]},"35":{"line":232,"type":"binary-expr","locations":[{"start":{"line":232,"column":11},"end":{"line":232,"column":63}},{"start":{"line":232,"column":67},"end":{"line":232,"column":82}}]},"36":{"line":233,"type":"binary-expr","locations":[{"start":{"line":233,"column":35},"end":{"line":233,"column":50}},{"start":{"line":233,"column":54},"end":{"line":233,"column":83}}]},"37":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":8},"end":{"line":239,"column":8}},{"start":{"line":239,"column":8},"end":{"line":239,"column":8}}]},"38":{"line":251,"type":"if","locations":[{"start":{"line":251,"column":8},"end":{"line":251,"column":8}},{"start":{"line":251,"column":8},"end":{"line":251,"column":8}}]},"39":{"line":251,"type":"binary-expr","locations":[{"start":{"line":251,"column":11},"end":{"line":251,"column":57}},{"start":{"line":251,"column":61},"end":{"line":251,"column":76}}]},"40":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":8},"end":{"line":254,"column":8}},{"start":{"line":254,"column":8},"end":{"line":254,"column":8}}]},"41":{"line":260,"type":"cond-expr","locations":[{"start":{"line":260,"column":51},"end":{"line":260,"column":56}},{"start":{"line":260,"column":59},"end":{"line":260,"column":87}}]},"42":{"line":260,"type":"cond-expr","locations":[{"start":{"line":260,"column":75},"end":{"line":260,"column":81}},{"start":{"line":260,"column":84},"end":{"line":260,"column":87}}]}},"code":["\"use strict\";","","const DCAOpusTransformer = require(\"./streams/DCAOpusTransformer\");","const FFmpegOggTransformer = require(\"./streams/FFmpegOggTransformer\");","const FFmpegPCMTransformer = require(\"./streams/FFmpegPCMTransformer\");","const FS = require(\"fs\");","const HTTP = require(\"http\");","const HTTPS = require(\"https\");","const OggOpusTransformer = require(\"./streams/OggOpusTransformer\");","const PassThroughStream = require(\"stream\").PassThrough;","const PCMOpusTransformer = require(\"./streams/PCMOpusTransformer\");","const Stream = require(\"stream\").Stream;","const VolumeTransformer = require(\"./streams/VolumeTransformer\");","const WebmOpusTransformer = require(\"./streams/WebmOpusTransformer\");","","var EventEmitter;","try {","    EventEmitter = require(\"eventemitter3\");","} catch(err) {","    EventEmitter = require(\"events\").EventEmitter;","}","","class Piper extends EventEmitter {","    constructor(converterCommand, opus) {","        super();","","        this.reset();","","        this.converterCommand = converterCommand;","        this._dataPackets = [];","        this._dataPacketMax = 30;","        this._dataPacketMin = 15;","        this.encoding = false;","        this.libopus = true;","        this.opus = opus;","        this.volumeLevel = 1;","","        this._retransformer = [];","","        // setInterval(() => console.log(this._dataPackets.length), 500);","    }","","    encode(source, options) {","        if(this.encoding || this.streams.length) {","            this.emit(\"error\", new Error(\"Already encoding\"));","            return false;","        }","","        if(typeof source === \"string\") {","            if(options.format === \"dca\" || options.format === \"ogg\" || options.format === \"webm\" || options.format === \"pcm\") {","                if(source.startsWith(\"http://\") || source.startsWith(\"https://\")) {","                    var passThrough = new PassThroughStream();","                    if(source.startsWith(\"http://\")) {","                        HTTP.get(source, (res) => res.pipe(passThrough)).once(\"error\", (e) => this.stop(e));","                    } else {","                        HTTPS.get(source, (res) => res.pipe(passThrough)).once(\"error\", (e) => this.stop(e));","                    }","                    source = passThrough;","                } else {","                    try {","                        FS.statSync(source);","                    } catch(err) {","                        if(err.code === \"ENOENT\") {","                            this.emit(\"error\", new Error(\"That file does not exist.\"));","                        } else {","                            this.emit(\"error\", new Error(\"An error occured trying to access that file.\"));","                        }","                        return false;","                    }","                    source = FS.createReadStream(source);","                }","            }","        } else if(!(source instanceof Stream) || !source.pipe) {","            this.emit(\"error\", new Error(\"Invalid source type\"));","            return false;","        }","","        if(typeof source !== \"string\") {","            this.streams.push(source.once(\"error\", (e) => this.stop(e)));","        }","","        this._dataPacketMax = 30;","        this._dataPacketMin = 15;","","        if(options.format === \"dca\") {","            this.streams.push(source.pipe(new DCAOpusTransformer()).once(\"error\", (e) => this.stop(e)));","        } else if(options.format === \"ogg\") {","            this.streams.push(source.pipe(new OggOpusTransformer()).once(\"error\", (e) => this.stop(e)));","        } else if(options.format === \"webm\") {","            this.streams.push(source.pipe(new WebmOpusTransformer()).once(\"error\", (e) => this.stop(e)));","        } else if(!options.format || options.format === \"pcm\") {","            if(options.inlineVolume) {","                if(!options.format) {","                    if(!this.converterCommand) {","                        this.emit(\"error\", new Error(\"FFmpeg/avconv was not found on this system. Playback of this audio format is impossible\"));","                        return false;","                    }","                    if(typeof source === \"string\") {","                        this.streams.push(source = new FFmpegPCMTransformer({","                            command: this.converterCommand,","                            input: source,","                            encoderArgs: options.encoderArgs,","                            inputArgs: options.inputArgs","                        }).once(\"error\", (e) => this.stop(e)));","                    } else {","                        this.streams.push(source = source.pipe(new FFmpegPCMTransformer({","                            command: this.converterCommand,","                            encoderArgs: options.encoderArgs,","                            inputArgs: options.inputArgs","                        })).once(\"error\", (e) => this.stop(e)));","                    }","                }","                this.streams.push(this.volume = source = source.pipe(new VolumeTransformer()).once(\"error\", (e) => this.stop(e)));","                this.volume.setVolume(this.volumeLevel);","                this.streams.push(this.volume.pipe(new PCMOpusTransformer({","                    opus: this.opus,","                    frameSize: options.frameSize,","                    pcmSize: options.pcmSize","                })).once(\"error\", (e) => this.stop(e)));","                this._dataPacketMax = 1; // Live volume updating","                this._dataPacketMin = 4;","            } else {","                if(this.libopus) {","                    if(typeof source === \"string\") {","                        this.streams.push(source = new FFmpegOggTransformer({","                            command: this.converterCommand,","                            input: source,","                            encoderArgs: options.encoderArgs,","                            inputArgs: options.inputArgs,","                            format: options.format,","                            frameDuration: options.frameDuration","                        }).once(\"error\", (e) => this.stop(e)));","                    } else {","                        this.streams.push(source = source.pipe(new FFmpegOggTransformer({","                            command: this.converterCommand,","                            encoderArgs: options.encoderArgs,","                            inputArgs: options.inputArgs,","                            format: options.format,","                            frameDuration: options.frameDuration","                        })).once(\"error\", (e) => this.stop(e)));","                    }","                    this.streams.push(source.pipe(new OggOpusTransformer()).once(\"error\", (e) => this.stop(e)));","                } else {","                    if(typeof source === \"string\") {","                        this.streams.push(source = new FFmpegPCMTransformer({","                            command: this.converterCommand,","                            input: source,","                            encoderArgs: options.encoderArgs,","                            inputArgs: options.inputArgs","                        }).once(\"error\", (e) => this.stop(e)));","                    } else {","                        this.streams.push(source = source.pipe(new FFmpegPCMTransformer({","                            command: this.converterCommand,","                            encoderArgs: options.encoderArgs,","                            inputArgs: options.inputArgs","                        })).once(\"error\", (e) => this.stop(e)));","                    }","                    this.streams.push(source.pipe(new PCMOpusTransformer({","                        opus: this.opus,","                        frameSize: options.frameSize,","                        pcmSize: options.pcmSize","                    })).once(\"error\", (e) => this.stop(e)));","                }","            }","        } else {","            this.emit(\"error\", new Error(\"Unrecognized format\"));","            return false;","        }","","        this._endStream = this.streams[this.streams.length - 1];","        this._endStream.manualCB = true;","","        this._endStream.on(\"data\", this.addDataPacket.bind(this));","        this._endStream.once(\"finish\", () => this.stop(null, source));","","        this.emit(\"start\");","","        return (this.encoding = true);","    }","","    stop(e, source) {","        if(source && !~this.streams.indexOf(source)) {","            return;","        }","","        if(e) {","            this.emit(\"error\", e);","        }","","        if(this.throttleTimeout) {","            clearTimeout(this.throttleTimeout);","            this.throttleTimeout = null;","        }","","        if(this.streams.length === 0) {","            return;","        }","","        if(this._endStream) {","            this._endStream.removeAllListeners(\"data\");","        }","","        for(var stream of this.streams) {","            if(typeof stream.destroy === \"function\") {","                stream.destroy();","            } else {","                stream.unpipe();","            }","        }","","        this.reset();","        if(this.encoding) {","            this.encoding = false;","            this.emit(\"stop\");","        }","    }","","    reset() {","        this.streams = [];","        this._endStream = null;","        this.volume = null;","    }","","    resetPackets() {","        this._dataPackets = [];","    }","","    addDataPacket(packet) {","        if(!this.encoding) {","            return;","        }","        if(this._dataPackets.push(packet) < this._dataPacketMax && this._endStream) {","            process.nextTick(() => this._endStream && this._endStream.transformCB());","        }","    }","","    setVolume(volume) {","        this.volumeLevel = volume;","        if(!this.volume) {","            return;","        }","        // var oldDB = this.volume.db;","        this.volume.setVolume(volume);","        // var newDBFactor = 10 * Math.log(1 + volume) / 6.931471805599453 / oldDB;","        // for(var i = 0; i < this._dataPackets.length; i++) {","        //     this._retransformer[i] = newDBFactor * (this._retransformer[i] || 1);","        // }","    }","","    getDataPacket() {","        if(this._dataPackets.length < this._dataPacketMin && this._endStream) {","            this._endStream.transformCB();","        }","        if(this._retransformer.length === 0) {","            return this._dataPackets.shift();","        } else {","            var packet = this.opus.decode(this._dataPackets.shift());","            for(var i = 0, num; i < packet.length - 1; i += 2) {","                num = ~~(this._retransformer.shift() * packet.readInt16LE(i));","                packet.writeInt16LE(num >= 32767 ? 32767 : num <= -32767 ? -32767 : num, i);","            }","            return this.opus.encode(packet, 3840 / 2 / 2);","        }","    }","","    get dataPacketCount() {","        return this._dataPackets.length;","    }","}","","module.exports = Piper;",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"16":1,"17":1,"18":1,"20":1,"25":0,"27":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"38":0,"44":0,"45":0,"46":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"56":0,"58":0,"60":0,"61":0,"63":0,"64":0,"66":0,"68":0,"70":0,"73":0,"74":0,"75":0,"78":0,"79":0,"82":0,"83":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"98":0,"99":0,"104":0,"106":0,"110":0,"113":0,"114":0,"115":0,"119":0,"120":0,"121":0,"123":0,"124":0,"125":0,"132":0,"134":0,"140":0,"142":0,"144":0,"145":0,"150":0,"152":0,"156":0,"158":0,"162":0,"166":0,"167":0,"170":0,"171":0,"173":0,"174":0,"176":0,"178":0,"182":0,"183":0,"186":0,"187":0,"190":0,"191":0,"192":0,"195":0,"196":0,"199":0,"200":0,"203":0,"204":0,"205":0,"207":0,"211":0,"212":0,"213":0,"214":0,"219":0,"220":0,"221":0,"225":0,"229":0,"230":0,"232":0,"233":0,"238":0,"239":0,"240":0,"243":0,"251":0,"252":0,"254":0,"255":0,"257":0,"258":0,"259":0,"260":0,"262":0,"267":0,"271":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/DCAOpusTransformer.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/DCAOpusTransformer.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":15},"end":{"line":6,"column":25}}},"2":{"name":"(anonymous_2)","line":13,"loc":{"start":{"line":13,"column":11},"end":{"line":13,"column":20}}},"3":{"name":"(anonymous_3)","line":29,"loc":{"start":{"line":29,"column":14},"end":{"line":29,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":53}},"2":{"start":{"line":7,"column":8},"end":{"line":7,"column":32}},"3":{"start":{"line":8,"column":8},"end":{"line":8,"column":23}},"4":{"start":{"line":10,"column":8},"end":{"line":10,"column":31}},"5":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"6":{"start":{"line":15,"column":12},"end":{"line":15,"column":24}},"7":{"start":{"line":18,"column":8},"end":{"line":18,"column":57}},"8":{"start":{"line":19,"column":8},"end":{"line":19,"column":27}},"9":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"10":{"start":{"line":22,"column":12},"end":{"line":22,"column":25}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":33}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":72}},"13":{"start":{"line":30,"column":8},"end":{"line":33,"column":9}},"14":{"start":{"line":31,"column":12},"end":{"line":31,"column":60}},"15":{"start":{"line":32,"column":12},"end":{"line":32,"column":35}},"16":{"start":{"line":35,"column":8},"end":{"line":60,"column":9}},"17":{"start":{"line":36,"column":12},"end":{"line":59,"column":13}},"18":{"start":{"line":37,"column":16},"end":{"line":37,"column":40}},"19":{"start":{"line":38,"column":16},"end":{"line":38,"column":28}},"20":{"start":{"line":40,"column":16},"end":{"line":40,"column":51}},"21":{"start":{"line":41,"column":16},"end":{"line":58,"column":17}},"22":{"start":{"line":42,"column":20},"end":{"line":42,"column":68}},"23":{"start":{"line":43,"column":23},"end":{"line":58,"column":17}},"24":{"start":{"line":44,"column":20},"end":{"line":47,"column":21}},"25":{"start":{"line":45,"column":24},"end":{"line":45,"column":48}},"26":{"start":{"line":46,"column":24},"end":{"line":46,"column":36}},"27":{"start":{"line":48,"column":20},"end":{"line":48,"column":70}},"28":{"start":{"line":49,"column":20},"end":{"line":52,"column":21}},"29":{"start":{"line":50,"column":24},"end":{"line":50,"column":48}},"30":{"start":{"line":51,"column":24},"end":{"line":51,"column":36}},"31":{"start":{"line":53,"column":20},"end":{"line":53,"column":70}},"32":{"start":{"line":54,"column":20},"end":{"line":54,"column":53}},"33":{"start":{"line":55,"column":20},"end":{"line":55,"column":56}},"34":{"start":{"line":57,"column":20},"end":{"line":57,"column":103}},"35":{"start":{"line":62,"column":8},"end":{"line":62,"column":25}},"36":{"start":{"line":64,"column":8},"end":{"line":72,"column":9}},"37":{"start":{"line":65,"column":12},"end":{"line":65,"column":38}},"38":{"start":{"line":66,"column":12},"end":{"line":66,"column":42}},"39":{"start":{"line":67,"column":12},"end":{"line":71,"column":13}},"40":{"start":{"line":68,"column":16},"end":{"line":68,"column":54}},"41":{"start":{"line":69,"column":16},"end":{"line":69,"column":21}},"42":{"start":{"line":70,"column":16},"end":{"line":70,"column":23}},"43":{"start":{"line":74,"column":8},"end":{"line":74,"column":32}},"44":{"start":{"line":78,"column":0},"end":{"line":78,"column":36}}},"branchMap":{"1":{"line":7,"type":"binary-expr","locations":[{"start":{"line":7,"column":18},"end":{"line":7,"column":25}},{"start":{"line":7,"column":29},"end":{"line":7,"column":31}}]},"2":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":14,"column":8}},{"start":{"line":14,"column":8},"end":{"line":14,"column":8}}]},"3":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":21,"column":8}},{"start":{"line":21,"column":8},"end":{"line":21,"column":8}}]},"4":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":30,"column":8}},{"start":{"line":30,"column":8},"end":{"line":30,"column":8}}]},"5":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":35,"column":8}},{"start":{"line":35,"column":8},"end":{"line":35,"column":8}}]},"6":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":12},"end":{"line":36,"column":12}},{"start":{"line":36,"column":12},"end":{"line":36,"column":12}}]},"7":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":16}},{"start":{"line":41,"column":16},"end":{"line":41,"column":16}}]},"8":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":19},"end":{"line":41,"column":39}},{"start":{"line":41,"column":43},"end":{"line":41,"column":63}},{"start":{"line":41,"column":67},"end":{"line":41,"column":87}}]},"9":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":23},"end":{"line":43,"column":23}},{"start":{"line":43,"column":23},"end":{"line":43,"column":23}}]},"10":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":20},"end":{"line":44,"column":20}},{"start":{"line":44,"column":20},"end":{"line":44,"column":20}}]},"11":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":20},"end":{"line":49,"column":20}},{"start":{"line":49,"column":20},"end":{"line":49,"column":20}}]},"12":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":12},"end":{"line":67,"column":12}},{"start":{"line":67,"column":12},"end":{"line":67,"column":12}}]}},"code":["\"use strict\";","","const BaseTransformer = require(\"./BaseTransformer\");","","class DCAOpusTransformer extends BaseTransformer {","    constructor(options) {","        options = options || {};","        super(options);","","        this._remainder = null;","    }","","    process(buffer) {","        if(buffer.length - buffer._index < 2) {","            return true;","        }","","        var opusLen = buffer.readUInt16LE(buffer._index);","        buffer._index += 2;","","        if(buffer.length - buffer._index < opusLen) {","            return false;","        }","","        buffer._index += opusLen;","        this.push(buffer.slice(buffer._index - opusLen, buffer._index));","    }","","    _transform(chunk, enc, cb) {","        if(this._remainder)  {","            chunk = Buffer.concat([this._remainder, chunk]);","            this._remainder = null;","        }","","        if(!this.head) {","            if(chunk.length < 4) {","                this._remainder = chunk;","                return cb();","            } else {","                var dcaVersion = chunk.slice(0, 4);","                if(dcaVersion[0] !== 68 || dcaVersion[1] !== 67 || dcaVersion[2] !== 65) { // DCA0 or invalid","                    this.emit(\"error\", new Error(\"Not a DCA file\"));","                } else if(dcaVersion[3] === 49) { // DCA1","                    if(chunk.length < 8) {","                        this._remainder = chunk;","                        return cb();","                    }","                    var jsonLength = chunk.slice(4, 8).readInt32LE(0);","                    if(chunk.length < 8 + jsonLength) {","                        this._remainder = chunk;","                        return cb();","                    }","                    var jsonMetadata = chunk.slice(8, 8 + jsonLength);","                    this.emit(\"debug\", jsonMetadata);","                    chunk = chunk.slice(8 + jsonLength);","                } else {","                    this.emit(\"error\", new Error(\"Unsupported DCA version: \" + dcaVersion.toString()));","                }","            }","        }","","        chunk._index = 0;","","        while(chunk._index < chunk.length) {","            var offset = chunk._index;","            var ret = this.process(chunk);","            if(ret) {","                this._remainder = chunk.slice(offset);","                cb();","                return;","            }","        }","","        this.setTransformCB(cb);","    }","}","","module.exports = DCAOpusTransformer;",""],"l":{"3":1,"7":0,"8":0,"10":0,"14":0,"15":0,"18":0,"19":0,"21":0,"22":0,"25":0,"26":0,"30":0,"31":0,"32":0,"35":0,"36":0,"37":0,"38":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"48":0,"49":0,"50":0,"51":0,"53":0,"54":0,"55":0,"57":0,"62":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"74":0,"78":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/BaseTransformer.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/BaseTransformer.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":15},"end":{"line":6,"column":25}}},"2":{"name":"(anonymous_2)","line":18,"loc":{"start":{"line":18,"column":18},"end":{"line":18,"column":23}}},"3":{"name":"(anonymous_3)","line":27,"loc":{"start":{"line":27,"column":15},"end":{"line":27,"column":18}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":52}},"2":{"start":{"line":7,"column":8},"end":{"line":7,"column":32}},"3":{"start":{"line":8,"column":8},"end":{"line":10,"column":9}},"4":{"start":{"line":9,"column":12},"end":{"line":9,"column":41}},"5":{"start":{"line":11,"column":8},"end":{"line":13,"column":9}},"6":{"start":{"line":12,"column":12},"end":{"line":12,"column":38}},"7":{"start":{"line":14,"column":8},"end":{"line":14,"column":23}},"8":{"start":{"line":15,"column":8},"end":{"line":15,"column":30}},"9":{"start":{"line":19,"column":8},"end":{"line":24,"column":9}},"10":{"start":{"line":20,"column":12},"end":{"line":20,"column":31}},"11":{"start":{"line":21,"column":12},"end":{"line":21,"column":35}},"12":{"start":{"line":23,"column":12},"end":{"line":23,"column":17}},"13":{"start":{"line":28,"column":8},"end":{"line":31,"column":9}},"14":{"start":{"line":29,"column":12},"end":{"line":29,"column":32}},"15":{"start":{"line":30,"column":12},"end":{"line":30,"column":37}},"16":{"start":{"line":35,"column":0},"end":{"line":35,"column":33}}},"branchMap":{"1":{"line":7,"type":"binary-expr","locations":[{"start":{"line":7,"column":18},"end":{"line":7,"column":25}},{"start":{"line":7,"column":29},"end":{"line":7,"column":31}}]},"2":{"line":8,"type":"if","locations":[{"start":{"line":8,"column":8},"end":{"line":8,"column":8}},{"start":{"line":8,"column":8},"end":{"line":8,"column":8}}]},"3":{"line":11,"type":"if","locations":[{"start":{"line":11,"column":8},"end":{"line":11,"column":8}},{"start":{"line":11,"column":8},"end":{"line":11,"column":8}}]},"4":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":8},"end":{"line":19,"column":8}},{"start":{"line":19,"column":8},"end":{"line":19,"column":8}}]},"5":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":28,"column":8}},{"start":{"line":28,"column":8},"end":{"line":28,"column":8}}]}},"code":["\"use strict\";","","const TransformStream = require(\"stream\").Transform;","","class BaseTransformer extends TransformStream {","    constructor(options) {","        options = options || {};","        if(options.allowHalfOpen === undefined) {","            options.allowHalfOpen = true;","        }","        if(options.highWaterMark === undefined) {","            options.highWaterMark = 0;","        }","        super(options);","        this.manualCB = false;","    }","","    setTransformCB(cb) {","        if(this.manualCB) {","            this.transformCB();","            this._transformCB = cb;","        } else {","            cb();","        }","    }","","    transformCB() {","        if(this._transformCB) {","            this._transformCB();","            this._transformCB = null;","        }","    }","}","","module.exports = BaseTransformer;",""],"l":{"3":1,"7":0,"8":0,"9":0,"11":0,"12":0,"14":0,"15":0,"19":0,"20":0,"21":0,"23":0,"28":0,"29":0,"30":0,"35":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/FFmpegOggTransformer.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/FFmpegOggTransformer.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":17},"end":{"line":5,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":47}},"2":{"start":{"line":5,"column":0},"end":{"line":36,"column":2}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":28}},"4":{"start":{"line":7,"column":4},"end":{"line":9,"column":5}},"5":{"start":{"line":8,"column":8},"end":{"line":8,"column":53}},"6":{"start":{"line":10,"column":4},"end":{"line":12,"column":5}},"7":{"start":{"line":11,"column":8},"end":{"line":11,"column":35}},"8":{"start":{"line":13,"column":4},"end":{"line":16,"column":38}},"9":{"start":{"line":17,"column":4},"end":{"line":23,"column":5}},"10":{"start":{"line":18,"column":8},"end":{"line":22,"column":10}},"11":{"start":{"line":24,"column":4},"end":{"line":27,"column":6}},"12":{"start":{"line":28,"column":4},"end":{"line":34,"column":6}},"13":{"start":{"line":35,"column":4},"end":{"line":35,"column":104}}},"branchMap":{"1":{"line":6,"type":"binary-expr","locations":[{"start":{"line":6,"column":14},"end":{"line":6,"column":21}},{"start":{"line":6,"column":25},"end":{"line":6,"column":27}}]},"2":{"line":7,"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":7,"column":4}},{"start":{"line":7,"column":4},"end":{"line":7,"column":4}}]},"3":{"line":10,"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":4}},{"start":{"line":10,"column":4},"end":{"line":10,"column":4}}]},"4":{"line":16,"type":"binary-expr","locations":[{"start":{"line":16,"column":13},"end":{"line":16,"column":30}},{"start":{"line":16,"column":34},"end":{"line":16,"column":36}}]},"5":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":4}},{"start":{"line":17,"column":4},"end":{"line":17,"column":4}}]},"6":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":14},"end":{"line":25,"column":27}},{"start":{"line":25,"column":31},"end":{"line":25,"column":34}}]},"7":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":64},"end":{"line":35,"column":83}},{"start":{"line":35,"column":87},"end":{"line":35,"column":89}}]}},"code":["\"use strict\";","","const FFmpegDuplex = require(\"./FFmpegDuplex\");","","module.exports = function(options) {","    options = options || {};","    if(!options.command) {","        throw new Error(\"Invalid converter command\");","    }","    if(options.frameDuration === undefined) {","        options.frameDuration = 60;","    }","    var inputArgs = [","        \"-analyzeduration\", \"0\",","        \"-loglevel\", \"24\"","    ].concat(options.inputArgs || []);","    if(options.format === \"pcm\") {","        inputArgs = inputArgs.concat(","            \"-f\", \"s16le\",","            \"-ar\", \"48000\",","            \"-ac\", \"2\"","        );","    }","    inputArgs = inputArgs.concat(","        \"-i\", options.input || \"-\",","        \"-vn\"","    );","    var outputArgs = [","        \"-c:a\", \"libopus\",","        \"-vbr\", \"on\",","        \"-frame_duration\", \"\" + options.frameDuration,","        \"-f\", \"ogg\",","        \"-\"","    ];","    return FFmpegDuplex.spawn(options.command, inputArgs.concat(options.encoderArgs || [], outputArgs));","};",""],"l":{"3":1,"5":1,"6":0,"7":0,"8":0,"10":0,"11":0,"13":0,"17":0,"18":0,"24":0,"28":0,"35":0}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/FFmpegDuplex.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/FFmpegDuplex.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":1,"91":1,"92":0,"93":1,"94":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":15},"end":{"line":8,"column":34}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":27},"end":{"line":30,"column":44}}},"3":{"name":"(anonymous_3)","line":41,"loc":{"start":{"line":41,"column":9},"end":{"line":41,"column":25}}},"4":{"name":"(anonymous_4)","line":149,"loc":{"start":{"line":149,"column":8},"end":{"line":149,"column":21}}},"5":{"name":"(anonymous_5)","line":153,"loc":{"start":{"line":153,"column":10},"end":{"line":153,"column":17}}},"6":{"name":"(anonymous_6)","line":157,"loc":{"start":{"line":157,"column":15},"end":{"line":157,"column":21}}},"7":{"name":"(anonymous_7)","line":161,"loc":{"start":{"line":161,"column":8},"end":{"line":161,"column":15}}},"8":{"name":"(anonymous_8)","line":165,"loc":{"start":{"line":165,"column":7},"end":{"line":165,"column":24}}},"9":{"name":"(anonymous_9)","line":169,"loc":{"start":{"line":169,"column":9},"end":{"line":169,"column":26}}},"10":{"name":"(anonymous_10)","line":173,"loc":{"start":{"line":173,"column":11},"end":{"line":173,"column":14}}},"11":{"name":"(anonymous_11)","line":176,"loc":{"start":{"line":176,"column":8},"end":{"line":176,"column":11}}},"12":{"name":"(anonymous_12)","line":179,"loc":{"start":{"line":179,"column":8},"end":{"line":179,"column":11}}},"13":{"name":"(anonymous_13)","line":185,"loc":{"start":{"line":185,"column":21},"end":{"line":185,"column":57}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":46}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":46}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":9,"column":8},"end":{"line":9,"column":32}},"5":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"6":{"start":{"line":11,"column":12},"end":{"line":11,"column":38}},"7":{"start":{"line":13,"column":8},"end":{"line":13,"column":23}},"8":{"start":{"line":15,"column":8},"end":{"line":15,"column":31}},"9":{"start":{"line":16,"column":8},"end":{"line":16,"column":54}},"10":{"start":{"line":17,"column":8},"end":{"line":17,"column":54}},"11":{"start":{"line":19,"column":8},"end":{"line":19,"column":54}},"12":{"start":{"line":21,"column":8},"end":{"line":21,"column":48}},"13":{"start":{"line":22,"column":8},"end":{"line":22,"column":48}},"14":{"start":{"line":24,"column":8},"end":{"line":24,"column":58}},"15":{"start":{"line":25,"column":8},"end":{"line":25,"column":58}},"16":{"start":{"line":27,"column":8},"end":{"line":38,"column":11}},"17":{"start":{"line":28,"column":12},"end":{"line":28,"column":52}},"18":{"start":{"line":30,"column":12},"end":{"line":37,"column":14}},"19":{"start":{"line":31,"column":16},"end":{"line":31,"column":51}},"20":{"start":{"line":32,"column":16},"end":{"line":36,"column":17}},"21":{"start":{"line":33,"column":20},"end":{"line":33,"column":59}},"22":{"start":{"line":35,"column":20},"end":{"line":35,"column":49}},"23":{"start":{"line":42,"column":8},"end":{"line":42,"column":32}},"24":{"start":{"line":43,"column":8},"end":{"line":43,"column":38}},"25":{"start":{"line":44,"column":8},"end":{"line":44,"column":24}},"26":{"start":{"line":46,"column":8},"end":{"line":52,"column":10}},"27":{"start":{"line":47,"column":12},"end":{"line":51,"column":13}},"28":{"start":{"line":48,"column":16},"end":{"line":48,"column":29}},"29":{"start":{"line":49,"column":16},"end":{"line":49,"column":35}},"30":{"start":{"line":50,"column":16},"end":{"line":50,"column":60}},"31":{"start":{"line":54,"column":8},"end":{"line":56,"column":10}},"32":{"start":{"line":55,"column":12},"end":{"line":55,"column":31}},"33":{"start":{"line":58,"column":8},"end":{"line":83,"column":10}},"34":{"start":{"line":59,"column":12},"end":{"line":61,"column":13}},"35":{"start":{"line":60,"column":16},"end":{"line":60,"column":23}},"36":{"start":{"line":62,"column":12},"end":{"line":62,"column":26}},"37":{"start":{"line":64,"column":12},"end":{"line":80,"column":13}},"38":{"start":{"line":65,"column":16},"end":{"line":67,"column":17}},"39":{"start":{"line":66,"column":20},"end":{"line":66,"column":43}},"40":{"start":{"line":68,"column":16},"end":{"line":68,"column":35}},"41":{"start":{"line":69,"column":19},"end":{"line":80,"column":13}},"42":{"start":{"line":71,"column":16},"end":{"line":71,"column":30}},"43":{"start":{"line":74,"column":16},"end":{"line":74,"column":92}},"44":{"start":{"line":75,"column":16},"end":{"line":75,"column":59}},"45":{"start":{"line":76,"column":16},"end":{"line":76,"column":31}},"46":{"start":{"line":77,"column":16},"end":{"line":77,"column":35}},"47":{"start":{"line":78,"column":16},"end":{"line":78,"column":39}},"48":{"start":{"line":79,"column":16},"end":{"line":79,"column":35}},"49":{"start":{"line":82,"column":12},"end":{"line":82,"column":22}},"50":{"start":{"line":85,"column":8},"end":{"line":90,"column":10}},"51":{"start":{"line":86,"column":12},"end":{"line":86,"column":21}},"52":{"start":{"line":87,"column":12},"end":{"line":87,"column":35}},"53":{"start":{"line":88,"column":12},"end":{"line":88,"column":35}},"54":{"start":{"line":89,"column":12},"end":{"line":89,"column":21}},"55":{"start":{"line":92,"column":8},"end":{"line":108,"column":10}},"56":{"start":{"line":93,"column":12},"end":{"line":95,"column":13}},"57":{"start":{"line":94,"column":16},"end":{"line":94,"column":23}},"58":{"start":{"line":96,"column":12},"end":{"line":96,"column":35}},"59":{"start":{"line":97,"column":12},"end":{"line":97,"column":35}},"60":{"start":{"line":99,"column":12},"end":{"line":99,"column":26}},"61":{"start":{"line":101,"column":12},"end":{"line":107,"column":13}},"62":{"start":{"line":102,"column":16},"end":{"line":102,"column":68}},"63":{"start":{"line":103,"column":16},"end":{"line":103,"column":87}},"64":{"start":{"line":103,"column":33},"end":{"line":103,"column":79}},"65":{"start":{"line":105,"column":16},"end":{"line":105,"column":23}},"66":{"start":{"line":106,"column":16},"end":{"line":106,"column":25}},"67":{"start":{"line":110,"column":8},"end":{"line":121,"column":10}},"68":{"start":{"line":111,"column":12},"end":{"line":117,"column":26}},"69":{"start":{"line":119,"column":12},"end":{"line":120,"column":37}},"70":{"start":{"line":123,"column":8},"end":{"line":123,"column":72}},"71":{"start":{"line":124,"column":8},"end":{"line":124,"column":42}},"72":{"start":{"line":125,"column":8},"end":{"line":125,"column":44}},"73":{"start":{"line":126,"column":8},"end":{"line":126,"column":44}},"74":{"start":{"line":127,"column":8},"end":{"line":127,"column":39}},"75":{"start":{"line":128,"column":8},"end":{"line":130,"column":11}},"76":{"start":{"line":131,"column":8},"end":{"line":131,"column":40}},"77":{"start":{"line":134,"column":8},"end":{"line":134,"column":46}},"78":{"start":{"line":138,"column":8},"end":{"line":138,"column":43}},"79":{"start":{"line":139,"column":8},"end":{"line":139,"column":44}},"80":{"start":{"line":141,"column":8},"end":{"line":141,"column":44}},"81":{"start":{"line":143,"column":8},"end":{"line":143,"column":44}},"82":{"start":{"line":144,"column":8},"end":{"line":144,"column":45}},"83":{"start":{"line":146,"column":8},"end":{"line":146,"column":20}},"84":{"start":{"line":150,"column":8},"end":{"line":150,"column":45}},"85":{"start":{"line":154,"column":8},"end":{"line":154,"column":56}},"86":{"start":{"line":158,"column":8},"end":{"line":158,"column":45}},"87":{"start":{"line":162,"column":8},"end":{"line":162,"column":39}},"88":{"start":{"line":166,"column":8},"end":{"line":166,"column":48}},"89":{"start":{"line":170,"column":8},"end":{"line":170,"column":50}},"90":{"start":{"line":183,"column":0},"end":{"line":183,"column":63}},"91":{"start":{"line":185,"column":0},"end":{"line":187,"column":2}},"92":{"start":{"line":186,"column":4},"end":{"line":186,"column":70}},"93":{"start":{"line":189,"column":0},"end":{"line":195,"column":2}},"94":{"start":{"line":197,"column":0},"end":{"line":197,"column":30}}},"branchMap":{"1":{"line":9,"type":"binary-expr","locations":[{"start":{"line":9,"column":18},"end":{"line":9,"column":25}},{"start":{"line":9,"column":29},"end":{"line":9,"column":31}}]},"2":{"line":10,"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":10,"column":8}},{"start":{"line":10,"column":8},"end":{"line":10,"column":8}}]},"3":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":16},"end":{"line":32,"column":16}},{"start":{"line":32,"column":16},"end":{"line":32,"column":16}}]},"4":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":18},"end":{"line":42,"column":25}},{"start":{"line":42,"column":29},"end":{"line":42,"column":31}}]},"5":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":12},"end":{"line":47,"column":12}},{"start":{"line":47,"column":12},"end":{"line":47,"column":12}}]},"6":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":16},"end":{"line":47,"column":22}},{"start":{"line":47,"column":26},"end":{"line":47,"column":32}}]},"7":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":12},"end":{"line":59,"column":12}},{"start":{"line":59,"column":12},"end":{"line":59,"column":12}}]},"8":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":12},"end":{"line":64,"column":12}},{"start":{"line":64,"column":12},"end":{"line":64,"column":12}}]},"9":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":16},"end":{"line":65,"column":16}},{"start":{"line":65,"column":16},"end":{"line":65,"column":16}}]},"10":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":19},"end":{"line":69,"column":19}},{"start":{"line":69,"column":19},"end":{"line":69,"column":19}}]},"11":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":23},"end":{"line":69,"column":33}},{"start":{"line":69,"column":37},"end":{"line":69,"column":51}}]},"12":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":28},"end":{"line":75,"column":48}},{"start":{"line":75,"column":52},"end":{"line":75,"column":58}}]},"13":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":12},"end":{"line":93,"column":12}},{"start":{"line":93,"column":12},"end":{"line":93,"column":12}}]},"14":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":35},"end":{"line":102,"column":53}},{"start":{"line":102,"column":57},"end":{"line":102,"column":66}}]},"15":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":33},"end":{"line":103,"column":46}},{"start":{"line":103,"column":50},"end":{"line":103,"column":79}}]},"16":{"line":154,"type":"binary-expr","locations":[{"start":{"line":154,"column":15},"end":{"line":154,"column":40}},{"start":{"line":154,"column":44},"end":{"line":154,"column":55}}]}},"code":["\"use strict\";","","const ChildProcess = require(\"child_process\");","const DuplexStream = require(\"stream\").Duplex;","const PassThroughStream = require(\"stream\").PassThrough;","","class FFmpegDuplex extends DuplexStream {","    constructor(command, options) {","        options = options || {};","        if(options.highWaterMark === undefined) {","            options.highWaterMark = 0;","        }","        super(options);","","        this.command = command;","        this._reader = new PassThroughStream(options);","        this._writer = new PassThroughStream(options);","","        this._onError = this.emit.bind(this, \"error\");","","        this._reader.on(\"error\", this._onError);","        this._writer.on(\"error\", this._onError);","","        this._readableState = this._reader._readableState;","        this._writableState = this._writer._writableState;","","        [\"on\", \"once\", \"removeListener\", \"removeListeners\", \"listeners\"].forEach((method) => {","            var og = DuplexStream.prototype[method];","","            this[method] = function(ev, fn) {","                var substream = delegateEvents[ev];","                if (substream) {","                    return this[substream][method](ev, fn);","                } else {","                    return og.call(this, ev, fn);","                }","            };","        });","    }","","    spawn(args, options) {","        options = options || {};","        var ex, exited, killed, ended;","        var stderr = [];","","        var onStdoutEnd = () => {","            if (exited && !ended) {","                ended = true;","                this._reader.end();","                setImmediate(this.emit.bind(this, \"close\"));","            }","        };","","        var onStderrData = (chunk) => {","            stderr.push(chunk);","        };","","        var onExit = (code, signal) => {","            if(exited) {","                return;","            }","            exited = true;","","            if (killed) {","                if (ex) {","                    this.emit(\"error\", ex);","                }","                this.emit(\"close\");","            } else if (code === 0 && signal == null) {","                // All is well","                onStdoutEnd();","            } else {","                // Everything else","                ex = new Error(\"Command failed: \" + Buffer.concat(stderr).toString(\"utf8\"));","                ex.killed = this._process.killed || killed;","                ex.code = code;","                ex.signal = signal;","                this.emit(\"error\", ex);","                this.emit(\"close\");","            }","","            cleanup();","        };","","        var onError = (err) => {","            ex = err;","            this._stdout.destroy();","            this._stderr.destroy();","            onExit();","        };","","        var kill = () => {","            if(killed) {","                return;","            }","            this._stdout.destroy();","            this._stderr.destroy();","","            killed = true;","","            try {","                this._process.kill(options.killSignal || \"SIGTERM\");","                setTimeout(() => this._process && this._process.kill(\"SIGKILL\"), 2000);","            } catch (e) {","                ex = e;","                onExit();","            }","        };","","        var cleanup = () => {","            this._process =","            this._stderr =","            this._stdout =","            this._stdin =","            stderr =","            ex =","            killed = null;","","            this.kill =","            this.destroy = this.noop;","        };","","        this._process = ChildProcess.spawn(this.command, args, options);","        this._stdin = this._process.stdin;","        this._stdout = this._process.stdout;","        this._stderr = this._process.stderr;","        this._writer.pipe(this._stdin);","        this._stdout.pipe(this._reader, {","            end: false","        });","        this.kill = this.destroy = kill;","","        // this._stderr.pipe(process.stderr);","        this._stderr.on(\"data\", onStderrData);","","        // In some cases ECONNRESET can be emitted by stdin because the process is not interested in any","        // more data but the _writer is still piping. Forget about errors emitted on stdin and stdout","        this._stdin.on(\"error\", this.noop);","        this._stdout.on(\"error\", this.noop);","","        this._stdout.on(\"end\", onStdoutEnd);","","        this._process.once(\"close\", onExit);","        this._process.once(\"error\", onError);","","        return this;","    }","","    pipe(dest, opts) {","        return this._reader.pipe(dest, opts);","    }","","    unpipe(dest) {","        return this._reader.unpipe(dest) || this.kill();","    }","","    setEncoding(enc) {","        return this._reader.setEncoding(enc);","    }","","    read(size) {","        return this._reader.read(size);","    }","","    end(chunk, enc, cb) {","        return this._writer.end(chunk, enc, cb);","    }","","    write(chunk, enc, cb) {","        return this._writer.write(chunk, enc, cb);","    }","","    destroy() {","    }","","    kill() {","    }","","    noop() {","    }","}","","FFmpegDuplex.prototype.addListener = FFmpegDuplex.prototype.on;","","FFmpegDuplex.spawn = function(connection, args, options) {","    return new FFmpegDuplex(connection, options).spawn(args, options);","};","","var delegateEvents = {","    readable: \"_reader\",","    data: \"_reader\",","    end: \"_reader\",","    drain: \"_writer\",","    finish: \"_writer\"","};","","module.exports = FFmpegDuplex;",""],"l":{"3":1,"4":1,"5":1,"9":0,"10":0,"11":0,"13":0,"15":0,"16":0,"17":0,"19":0,"21":0,"22":0,"24":0,"25":0,"27":0,"28":0,"30":0,"31":0,"32":0,"33":0,"35":0,"42":0,"43":0,"44":0,"46":0,"47":0,"48":0,"49":0,"50":0,"54":0,"55":0,"58":0,"59":0,"60":0,"62":0,"64":0,"65":0,"66":0,"68":0,"69":0,"71":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"82":0,"85":0,"86":0,"87":0,"88":0,"89":0,"92":0,"93":0,"94":0,"96":0,"97":0,"99":0,"101":0,"102":0,"103":0,"105":0,"106":0,"110":0,"111":0,"119":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"131":0,"134":0,"138":0,"139":0,"141":0,"143":0,"144":0,"146":0,"150":0,"154":0,"158":0,"162":0,"166":0,"170":0,"183":1,"185":1,"186":0,"189":1,"197":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/FFmpegPCMTransformer.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/FFmpegPCMTransformer.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":17},"end":{"line":5,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":47}},"2":{"start":{"line":5,"column":0},"end":{"line":27,"column":2}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":28}},"4":{"start":{"line":7,"column":4},"end":{"line":9,"column":5}},"5":{"start":{"line":8,"column":8},"end":{"line":8,"column":53}},"6":{"start":{"line":10,"column":4},"end":{"line":12,"column":5}},"7":{"start":{"line":11,"column":8},"end":{"line":11,"column":37}},"8":{"start":{"line":13,"column":4},"end":{"line":19,"column":6}},"9":{"start":{"line":20,"column":4},"end":{"line":25,"column":6}},"10":{"start":{"line":26,"column":4},"end":{"line":26,"column":104}}},"branchMap":{"1":{"line":6,"type":"binary-expr","locations":[{"start":{"line":6,"column":14},"end":{"line":6,"column":21}},{"start":{"line":6,"column":25},"end":{"line":6,"column":27}}]},"2":{"line":7,"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":7,"column":4}},{"start":{"line":7,"column":4},"end":{"line":7,"column":4}}]},"3":{"line":10,"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":4}},{"start":{"line":10,"column":4},"end":{"line":10,"column":4}}]},"4":{"line":16,"type":"binary-expr","locations":[{"start":{"line":16,"column":13},"end":{"line":16,"column":30}},{"start":{"line":16,"column":34},"end":{"line":16,"column":36}}]},"5":{"line":17,"type":"binary-expr","locations":[{"start":{"line":17,"column":14},"end":{"line":17,"column":27}},{"start":{"line":17,"column":31},"end":{"line":17,"column":34}}]},"6":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":64},"end":{"line":26,"column":83}},{"start":{"line":26,"column":87},"end":{"line":26,"column":89}}]}},"code":["\"use strict\";","","const FFmpegDuplex = require(\"./FFmpegDuplex\");","","module.exports = function(options) {","    options = options || {};","    if(!options.command) {","        throw new Error(\"Invalid converter command\");","    }","    if(options.samplingRate === undefined) {","        options.samplingRate = 48000;","    }","    var inputArgs = [","        \"-analyzeduration\", \"0\",","        \"-loglevel\", \"24\"","    ].concat(options.inputArgs || [],","        \"-i\", options.input || \"-\",","        \"-vn\"","    );","    var outputArgs = [","        \"-f\", \"s16le\",","        \"-ar\", \"\" + options.samplingRate,","        \"-ac\", \"2\",","        \"-\"","    ];","    return FFmpegDuplex.spawn(options.command, inputArgs.concat(options.encoderArgs || [], outputArgs));","};",""],"l":{"3":1,"5":1,"6":0,"7":0,"8":0,"10":0,"11":0,"13":0,"20":0,"26":0}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/OggOpusTransformer.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/OggOpusTransformer.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":15},"end":{"line":6,"column":25}}},"2":{"name":"(anonymous_2)","line":13,"loc":{"start":{"line":13,"column":11},"end":{"line":13,"column":20}}},"3":{"name":"(anonymous_3)","line":73,"loc":{"start":{"line":73,"column":14},"end":{"line":73,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":53}},"2":{"start":{"line":7,"column":8},"end":{"line":7,"column":32}},"3":{"start":{"line":8,"column":8},"end":{"line":8,"column":23}},"4":{"start":{"line":10,"column":8},"end":{"line":10,"column":31}},"5":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"6":{"start":{"line":15,"column":12},"end":{"line":15,"column":24}},"7":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"8":{"start":{"line":19,"column":12},"end":{"line":19,"column":119}},"9":{"start":{"line":22,"column":8},"end":{"line":22,"column":59}},"10":{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},"11":{"start":{"line":24,"column":12},"end":{"line":24,"column":65}},"12":{"start":{"line":27,"column":8},"end":{"line":27,"column":28}},"13":{"start":{"line":29,"column":8},"end":{"line":29,"column":59}},"14":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"15":{"start":{"line":31,"column":12},"end":{"line":31,"column":24}},"16":{"start":{"line":34,"column":8},"end":{"line":34,"column":26}},"17":{"start":{"line":35,"column":8},"end":{"line":35,"column":21}},"18":{"start":{"line":36,"column":8},"end":{"line":36,"column":21}},"19":{"start":{"line":37,"column":8},"end":{"line":37,"column":22}},"20":{"start":{"line":38,"column":8},"end":{"line":38,"column":18}},"21":{"start":{"line":39,"column":8},"end":{"line":48,"column":9}},"22":{"start":{"line":40,"column":12},"end":{"line":40,"column":53}},"23":{"start":{"line":41,"column":12},"end":{"line":46,"column":13}},"24":{"start":{"line":42,"column":16},"end":{"line":42,"column":43}},"25":{"start":{"line":43,"column":16},"end":{"line":43,"column":25}},"26":{"start":{"line":45,"column":16},"end":{"line":45,"column":29}},"27":{"start":{"line":47,"column":12},"end":{"line":47,"column":26}},"28":{"start":{"line":50,"column":8},"end":{"line":50,"column":24}},"29":{"start":{"line":52,"column":8},"end":{"line":54,"column":9}},"30":{"start":{"line":53,"column":12},"end":{"line":53,"column":24}},"31":{"start":{"line":56,"column":8},"end":{"line":70,"column":9}},"32":{"start":{"line":57,"column":12},"end":{"line":57,"column":37}},"33":{"start":{"line":58,"column":12},"end":{"line":58,"column":107}},"34":{"start":{"line":59,"column":12},"end":{"line":69,"column":13}},"35":{"start":{"line":60,"column":16},"end":{"line":64,"column":17}},"36":{"start":{"line":61,"column":20},"end":{"line":61,"column":59}},"37":{"start":{"line":63,"column":20},"end":{"line":63,"column":39}},"38":{"start":{"line":65,"column":19},"end":{"line":69,"column":13}},"39":{"start":{"line":66,"column":16},"end":{"line":66,"column":69}},"40":{"start":{"line":68,"column":16},"end":{"line":68,"column":72}},"41":{"start":{"line":74,"column":8},"end":{"line":77,"column":9}},"42":{"start":{"line":75,"column":12},"end":{"line":75,"column":60}},"43":{"start":{"line":76,"column":12},"end":{"line":76,"column":35}},"44":{"start":{"line":79,"column":8},"end":{"line":79,"column":25}},"45":{"start":{"line":81,"column":8},"end":{"line":92,"column":9}},"46":{"start":{"line":82,"column":12},"end":{"line":82,"column":38}},"47":{"start":{"line":83,"column":12},"end":{"line":83,"column":42}},"48":{"start":{"line":84,"column":12},"end":{"line":91,"column":13}},"49":{"start":{"line":85,"column":16},"end":{"line":85,"column":54}},"50":{"start":{"line":86,"column":16},"end":{"line":88,"column":17}},"51":{"start":{"line":87,"column":20},"end":{"line":87,"column":44}},"52":{"start":{"line":89,"column":16},"end":{"line":89,"column":21}},"53":{"start":{"line":90,"column":16},"end":{"line":90,"column":23}},"54":{"start":{"line":94,"column":8},"end":{"line":94,"column":32}},"55":{"start":{"line":98,"column":0},"end":{"line":98,"column":36}}},"branchMap":{"1":{"line":7,"type":"binary-expr","locations":[{"start":{"line":7,"column":18},"end":{"line":7,"column":25}},{"start":{"line":7,"column":29},"end":{"line":7,"column":31}}]},"2":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":14,"column":8}},{"start":{"line":14,"column":8},"end":{"line":14,"column":8}}]},"3":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":18,"column":8}},{"start":{"line":18,"column":8},"end":{"line":18,"column":8}}]},"4":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":23,"column":8}},{"start":{"line":23,"column":8},"end":{"line":23,"column":8}}]},"5":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":30,"column":8}},{"start":{"line":30,"column":8},"end":{"line":30,"column":8}}]},"6":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":12},"end":{"line":41,"column":12}},{"start":{"line":41,"column":12},"end":{"line":41,"column":12}}]},"7":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":52,"column":8}},{"start":{"line":52,"column":8},"end":{"line":52,"column":8}}]},"8":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":12},"end":{"line":59,"column":12}},{"start":{"line":59,"column":12},"end":{"line":59,"column":12}}]},"9":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":16},"end":{"line":60,"column":16}},{"start":{"line":60,"column":16},"end":{"line":60,"column":16}}]},"10":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":19},"end":{"line":65,"column":19}},{"start":{"line":65,"column":19},"end":{"line":65,"column":19}}]},"11":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":8},"end":{"line":74,"column":8}},{"start":{"line":74,"column":8},"end":{"line":74,"column":8}}]},"12":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":12},"end":{"line":84,"column":12}},{"start":{"line":84,"column":12},"end":{"line":84,"column":12}}]},"13":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":16},"end":{"line":86,"column":16}},{"start":{"line":86,"column":16},"end":{"line":86,"column":16}}]}},"code":["\"use strict\";","","const BaseTransformer = require(\"./BaseTransformer\");","","class OggOpusTransformer extends BaseTransformer {","    constructor(options) {","        options = options || {};","        super(options);","","        this._remainder = null;","    }","","    process(buffer) {","        if(buffer.length - buffer._index <= 26) {","            return true;","        }","","        if(buffer.toString(\"utf8\", buffer._index, buffer._index + 4) !== \"OggS\") {","            return new Error(\"Invalid OGG magic string: \" + buffer.toString(\"utf8\", buffer._index, buffer._index + 4));","        }","","        var typeFlag = buffer.readUInt8(buffer._index + 5);","        if(typeFlag === 1) {","            return new Error(\"OGG continued page not supported\");","        }","","        buffer._index += 26;","","        var segmentCount = buffer.readUInt8(buffer._index);","        if(buffer.length - buffer._index - 1 < segmentCount) {","            return true;","        }","","        var segments = [];","        var size = 0;","        var byte = 0;","        var total = 0;","        var i = 0;","        for(; i < segmentCount; i++) {","            byte = buffer.readUInt8(++buffer._index);","            if(byte < 255) {","                segments.push(size + byte);","                size = 0;","            } else {","                size += byte;","            }","            total += byte;","        }","","        ++buffer._index;","","        if(buffer.length - buffer._index < total) {","            return true;","        }","","        for(var segment of segments) {","            buffer._index += segment;","            byte = (segment = buffer.slice(buffer._index - segment, buffer._index)).toString(\"utf8\", 0, 8);","            if(this.head) {","                if(byte === \"OpusTags\") {","                    this.emit(\"debug\", segment.toString());","                } else {","                    this.push(segment);","                }","            } else if(byte === \"OpusHead\") {","                this.emit(\"debug\", (this.head = segment.toString()));","            } else {","                this.emit(\"error\", new Error(\"Invalid codec: \" + byte));","            }","        }","    }","","    _transform(chunk, enc, cb) {","        if(this._remainder)  {","            chunk = Buffer.concat([this._remainder, chunk]);","            this._remainder = null;","        }","","        chunk._index = 0;","","        while(chunk._index < chunk.length) {","            var offset = chunk._index;","            var ret = this.process(chunk);","            if(ret) {","                this._remainder = chunk.slice(offset);","                if(ret instanceof Error) {","                    this.emit(\"error\", ret);","                }","                cb();","                return;","            }","        }","","        this.setTransformCB(cb);","    }","}","","module.exports = OggOpusTransformer;",""],"l":{"3":1,"7":0,"8":0,"10":0,"14":0,"15":0,"18":0,"19":0,"22":0,"23":0,"24":0,"27":0,"29":0,"30":0,"31":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"45":0,"47":0,"50":0,"52":0,"53":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"63":0,"65":0,"66":0,"68":0,"74":0,"75":0,"76":0,"79":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"89":0,"90":0,"94":0,"98":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/PCMOpusTransformer.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/PCMOpusTransformer.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":15},"end":{"line":6,"column":25}}},"2":{"name":"(anonymous_2)","line":20,"loc":{"start":{"line":20,"column":14},"end":{"line":20,"column":31}}},"3":{"name":"(anonymous_3)","line":45,"loc":{"start":{"line":45,"column":10},"end":{"line":45,"column":15}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":53}},"2":{"start":{"line":7,"column":8},"end":{"line":7,"column":32}},"3":{"start":{"line":8,"column":8},"end":{"line":10,"column":9}},"4":{"start":{"line":9,"column":12},"end":{"line":9,"column":64}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":23}},"6":{"start":{"line":13,"column":8},"end":{"line":13,"column":33}},"7":{"start":{"line":14,"column":8},"end":{"line":14,"column":51}},"8":{"start":{"line":15,"column":8},"end":{"line":15,"column":48}},"9":{"start":{"line":17,"column":8},"end":{"line":17,"column":31}},"10":{"start":{"line":21,"column":8},"end":{"line":24,"column":9}},"11":{"start":{"line":22,"column":12},"end":{"line":22,"column":60}},"12":{"start":{"line":23,"column":12},"end":{"line":23,"column":35}},"13":{"start":{"line":26,"column":8},"end":{"line":29,"column":9}},"14":{"start":{"line":27,"column":12},"end":{"line":27,"column":36}},"15":{"start":{"line":28,"column":12},"end":{"line":28,"column":24}},"16":{"start":{"line":31,"column":8},"end":{"line":31,"column":25}},"17":{"start":{"line":33,"column":8},"end":{"line":36,"column":9}},"18":{"start":{"line":34,"column":12},"end":{"line":34,"column":41}},"19":{"start":{"line":35,"column":12},"end":{"line":35,"column":112}},"20":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"21":{"start":{"line":39,"column":12},"end":{"line":39,"column":56}},"22":{"start":{"line":42,"column":8},"end":{"line":42,"column":32}},"23":{"start":{"line":46,"column":8},"end":{"line":52,"column":9}},"24":{"start":{"line":47,"column":12},"end":{"line":47,"column":47}},"25":{"start":{"line":48,"column":12},"end":{"line":48,"column":38}},"26":{"start":{"line":49,"column":12},"end":{"line":49,"column":48}},"27":{"start":{"line":50,"column":12},"end":{"line":50,"column":61}},"28":{"start":{"line":51,"column":12},"end":{"line":51,"column":35}},"29":{"start":{"line":53,"column":8},"end":{"line":53,"column":13}},"30":{"start":{"line":57,"column":0},"end":{"line":57,"column":36}}},"branchMap":{"1":{"line":7,"type":"binary-expr","locations":[{"start":{"line":7,"column":18},"end":{"line":7,"column":25}},{"start":{"line":7,"column":29},"end":{"line":7,"column":31}}]},"2":{"line":8,"type":"if","locations":[{"start":{"line":8,"column":8},"end":{"line":8,"column":8}},{"start":{"line":8,"column":8},"end":{"line":8,"column":8}}]},"3":{"line":14,"type":"binary-expr","locations":[{"start":{"line":14,"column":25},"end":{"line":14,"column":42}},{"start":{"line":14,"column":46},"end":{"line":14,"column":50}}]},"4":{"line":15,"type":"binary-expr","locations":[{"start":{"line":15,"column":23},"end":{"line":15,"column":38}},{"start":{"line":15,"column":42},"end":{"line":15,"column":47}}]},"5":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":21,"column":8}},{"start":{"line":21,"column":8},"end":{"line":21,"column":8}}]},"6":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":8},"end":{"line":26,"column":8}},{"start":{"line":26,"column":8},"end":{"line":26,"column":8}}]},"7":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":38,"column":8}},{"start":{"line":38,"column":8},"end":{"line":38,"column":8}}]},"8":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]}},"code":["\"use strict\";","","const BaseTransformer = require(\"./BaseTransformer\");","","class PCMOpusTransformer extends BaseTransformer {","    constructor(options) {","        options = options || {};","        if(!options.opus) {","            throw new Error(\"Supported opus encoder not found\");","        }","        super(options);","","        this.opus = options.opus;","        this.frameSize = options.frameSize || 2880;","        this.pcmSize = options.pcmSize || 11520;","","        this._remainder = null;","    }","","    _transform(chunk, enc, cb) {","        if(this._remainder) {","            chunk = Buffer.concat([this._remainder, chunk]);","            this._remainder = null;","        }","","        if(chunk.length < this.pcmSize) {","            this._remainder = chunk;","            return cb();","        }","","        chunk._index = 0;","","        while(chunk._index + this.pcmSize < chunk.length) {","            chunk._index += this.pcmSize;","            this.push(this.opus.encode(chunk.slice(chunk._index - this.pcmSize, chunk._index), this.frameSize));","        }","","        if(chunk._index < chunk.length) {","            this._remainder = chunk.slice(chunk._index);","        }","","        this.setTransformCB(cb);","    }","","    _flush(cb) {","        if(this._remainder) {","            var buf = new Buffer(this.pcmSize);","            this._remainder.copy(buf);","            buf.fill(0, this._remainder.length);","            this.push(this.opus.encode(buf, this.frameSize));","            this._remainder = null;","        }","        cb();","    }","}","","module.exports = PCMOpusTransformer;",""],"l":{"3":1,"7":0,"8":0,"9":0,"11":0,"13":0,"14":0,"15":0,"17":0,"21":0,"22":0,"23":0,"26":0,"27":0,"28":0,"31":0,"33":0,"34":0,"35":0,"38":0,"39":0,"42":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"53":0,"57":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/VolumeTransformer.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/VolumeTransformer.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":6,"loc":{"start":{"line":6,"column":15},"end":{"line":6,"column":25}}},"2":{"name":"(anonymous_2)","line":14,"loc":{"start":{"line":14,"column":13},"end":{"line":14,"column":22}}},"3":{"name":"(anonymous_3)","line":22,"loc":{"start":{"line":22,"column":14},"end":{"line":22,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":53}},"2":{"start":{"line":7,"column":8},"end":{"line":7,"column":32}},"3":{"start":{"line":8,"column":8},"end":{"line":8,"column":23}},"4":{"start":{"line":10,"column":8},"end":{"line":10,"column":31}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":28}},"6":{"start":{"line":15,"column":8},"end":{"line":17,"column":9}},"7":{"start":{"line":16,"column":12},"end":{"line":16,"column":63}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":29}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":69}},"10":{"start":{"line":23,"column":8},"end":{"line":26,"column":9}},"11":{"start":{"line":24,"column":12},"end":{"line":24,"column":60}},"12":{"start":{"line":25,"column":12},"end":{"line":25,"column":35}},"13":{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},"14":{"start":{"line":29,"column":12},"end":{"line":29,"column":24}},"15":{"start":{"line":32,"column":8},"end":{"line":32,"column":16}},"16":{"start":{"line":33,"column":8},"end":{"line":38,"column":9}},"17":{"start":{"line":34,"column":12},"end":{"line":34,"column":60}},"18":{"start":{"line":35,"column":12},"end":{"line":35,"column":47}},"19":{"start":{"line":37,"column":12},"end":{"line":37,"column":43}},"20":{"start":{"line":40,"column":8},"end":{"line":44,"column":9}},"21":{"start":{"line":42,"column":12},"end":{"line":42,"column":53}},"22":{"start":{"line":43,"column":12},"end":{"line":43,"column":85}},"23":{"start":{"line":46,"column":8},"end":{"line":46,"column":23}},"24":{"start":{"line":47,"column":8},"end":{"line":47,"column":32}},"25":{"start":{"line":51,"column":0},"end":{"line":51,"column":35}}},"branchMap":{"1":{"line":7,"type":"binary-expr","locations":[{"start":{"line":7,"column":18},"end":{"line":7,"column":25}},{"start":{"line":7,"column":29},"end":{"line":7,"column":31}}]},"2":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":8},"end":{"line":15,"column":8}},{"start":{"line":15,"column":8},"end":{"line":15,"column":8}}]},"3":{"line":15,"type":"binary-expr","locations":[{"start":{"line":15,"column":11},"end":{"line":15,"column":24}},{"start":{"line":15,"column":28},"end":{"line":15,"column":50}}]},"4":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":23,"column":8}},{"start":{"line":23,"column":8},"end":{"line":23,"column":8}}]},"5":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":28,"column":8}},{"start":{"line":28,"column":8},"end":{"line":28,"column":8}}]},"6":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":33,"column":8}},{"start":{"line":33,"column":8},"end":{"line":33,"column":8}}]},"7":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":44},"end":{"line":43,"column":49}},{"start":{"line":43,"column":52},"end":{"line":43,"column":80}}]},"8":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":68},"end":{"line":43,"column":74}},{"start":{"line":43,"column":77},"end":{"line":43,"column":80}}]}},"code":["\"use strict\";","","const BaseTransformer = require(\"./BaseTransformer\");","","class VolumeTransformer extends BaseTransformer {","    constructor(options) {","        options = options || {};","        super(options);","","        this._remainder = null;","        this.setVolume(1.0);","    }","","    setVolume(volume) {","        if(isNaN(volume) || (volume = +volume) < 0) {","            throw new Error(\"Invalid volume level: \" + volume);","        }","        this.volume = volume;","        this.db = 10 * Math.log(1 + this.volume) / 6.931471805599453;","    }","","    _transform(chunk, enc, cb) {","        if(this._remainder)  {","            chunk = Buffer.concat([this._remainder, chunk]);","            this._remainder = null;","        }","","        if(chunk.length < 2) {","            return cb();","        }","","        var buf;","        if(chunk.length & 1) {","            this._remainder = chunk.slice(chunk.length - 1);","            buf = new Buffer(chunk.length - 1);","        } else {","            buf = new Buffer(chunk.length);","        }","","        for(var i = 0, num; i < buf.length - 1; i += 2) {","            // Bind transformed chunk to to 16 bit","            num = ~~(this.db * chunk.readInt16LE(i));","            buf.writeInt16LE(num >= 32767 ? 32767 : num <= -32767 ? -32767 : num, i);","        }","","        this.push(buf);","        this.setTransformCB(cb);","    }","}","","module.exports = VolumeTransformer;",""],"l":{"3":1,"7":0,"8":0,"10":0,"11":0,"15":0,"16":0,"18":0,"19":0,"23":0,"24":0,"25":0,"28":0,"29":0,"32":0,"33":0,"34":0,"35":0,"37":0,"40":0,"42":0,"43":0,"46":0,"47":0,"51":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/WebmOpusTransformer.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/streams/WebmOpusTransformer.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":1,"111":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":19,"loc":{"start":{"line":19,"column":15},"end":{"line":19,"column":25}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":11},"end":{"line":28,"column":24}}},"3":{"name":"(anonymous_3)","line":83,"loc":{"start":{"line":83,"column":17},"end":{"line":83,"column":33}}},"4":{"name":"(anonymous_4)","line":99,"loc":{"start":{"line":99,"column":11},"end":{"line":99,"column":20}}},"5":{"name":"(anonymous_5)","line":146,"loc":{"start":{"line":146,"column":15},"end":{"line":146,"column":24}}},"6":{"name":"(anonymous_6)","line":178,"loc":{"start":{"line":178,"column":14},"end":{"line":178,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":53}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":41}},"3":{"start":{"line":9,"column":0},"end":{"line":9,"column":24}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":20}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":23}},"6":{"start":{"line":13,"column":0},"end":{"line":13,"column":25}},"7":{"start":{"line":14,"column":0},"end":{"line":14,"column":23}},"8":{"start":{"line":16,"column":0},"end":{"line":16,"column":26}},"9":{"start":{"line":20,"column":8},"end":{"line":20,"column":32}},"10":{"start":{"line":21,"column":8},"end":{"line":21,"column":23}},"11":{"start":{"line":23,"column":8},"end":{"line":23,"column":29}},"12":{"start":{"line":24,"column":8},"end":{"line":24,"column":32}},"13":{"start":{"line":25,"column":8},"end":{"line":25,"column":24}},"14":{"start":{"line":29,"column":8},"end":{"line":51,"column":9}},"15":{"start":{"line":30,"column":12},"end":{"line":33,"column":13}},"16":{"start":{"line":31,"column":16},"end":{"line":31,"column":46}},"17":{"start":{"line":32,"column":16},"end":{"line":32,"column":23}},"18":{"start":{"line":34,"column":12},"end":{"line":50,"column":13}},"19":{"start":{"line":35,"column":16},"end":{"line":35,"column":60}},"20":{"start":{"line":36,"column":16},"end":{"line":39,"column":17}},"21":{"start":{"line":37,"column":20},"end":{"line":37,"column":76}},"22":{"start":{"line":38,"column":20},"end":{"line":38,"column":27}},"23":{"start":{"line":41,"column":16},"end":{"line":48,"column":18}},"24":{"start":{"line":49,"column":16},"end":{"line":49,"column":23}},"25":{"start":{"line":53,"column":8},"end":{"line":80,"column":9}},"26":{"start":{"line":54,"column":12},"end":{"line":64,"column":13}},"27":{"start":{"line":55,"column":16},"end":{"line":62,"column":17}},"28":{"start":{"line":56,"column":20},"end":{"line":56,"column":43}},"29":{"start":{"line":57,"column":23},"end":{"line":62,"column":17}},"30":{"start":{"line":58,"column":20},"end":{"line":60,"column":21}},"31":{"start":{"line":59,"column":24},"end":{"line":59,"column":65}},"32":{"start":{"line":61,"column":20},"end":{"line":61,"column":45}},"33":{"start":{"line":63,"column":16},"end":{"line":63,"column":23}},"34":{"start":{"line":65,"column":12},"end":{"line":74,"column":13}},"35":{"start":{"line":66,"column":16},"end":{"line":69,"column":17}},"36":{"start":{"line":67,"column":20},"end":{"line":67,"column":65}},"37":{"start":{"line":68,"column":20},"end":{"line":68,"column":27}},"38":{"start":{"line":70,"column":16},"end":{"line":73,"column":17}},"39":{"start":{"line":71,"column":20},"end":{"line":71,"column":63}},"40":{"start":{"line":72,"column":20},"end":{"line":72,"column":27}},"41":{"start":{"line":75,"column":12},"end":{"line":78,"column":13}},"42":{"start":{"line":76,"column":16},"end":{"line":76,"column":64}},"43":{"start":{"line":77,"column":16},"end":{"line":77,"column":23}},"44":{"start":{"line":79,"column":12},"end":{"line":79,"column":19}},"45":{"start":{"line":84,"column":8},"end":{"line":88,"column":9}},"46":{"start":{"line":85,"column":12},"end":{"line":87,"column":13}},"47":{"start":{"line":86,"column":16},"end":{"line":86,"column":22}},"48":{"start":{"line":89,"column":8},"end":{"line":92,"column":9}},"49":{"start":{"line":90,"column":12},"end":{"line":90,"column":118}},"50":{"start":{"line":91,"column":12},"end":{"line":91,"column":24}},"51":{"start":{"line":93,"column":8},"end":{"line":95,"column":9}},"52":{"start":{"line":94,"column":12},"end":{"line":94,"column":24}},"53":{"start":{"line":96,"column":8},"end":{"line":96,"column":22}},"54":{"start":{"line":100,"column":8},"end":{"line":100,"column":64}},"55":{"start":{"line":101,"column":8},"end":{"line":103,"column":9}},"56":{"start":{"line":102,"column":12},"end":{"line":102,"column":25}},"57":{"start":{"line":105,"column":8},"end":{"line":105,"column":71}},"58":{"start":{"line":106,"column":8},"end":{"line":108,"column":9}},"59":{"start":{"line":107,"column":12},"end":{"line":107,"column":25}},"60":{"start":{"line":110,"column":8},"end":{"line":110,"column":84}},"61":{"start":{"line":112,"column":8},"end":{"line":116,"column":10}},"62":{"start":{"line":117,"column":8},"end":{"line":120,"column":9}},"63":{"start":{"line":118,"column":12},"end":{"line":118,"column":46}},"64":{"start":{"line":119,"column":12},"end":{"line":119,"column":46}},"65":{"start":{"line":122,"column":8},"end":{"line":122,"column":33}},"66":{"start":{"line":124,"column":8},"end":{"line":124,"column":66}},"67":{"start":{"line":125,"column":8},"end":{"line":131,"column":9}},"68":{"start":{"line":126,"column":12},"end":{"line":129,"column":13}},"69":{"start":{"line":127,"column":16},"end":{"line":127,"column":32}},"70":{"start":{"line":128,"column":16},"end":{"line":128,"column":22}},"71":{"start":{"line":130,"column":12},"end":{"line":130,"column":61}},"72":{"start":{"line":132,"column":8},"end":{"line":134,"column":9}},"73":{"start":{"line":133,"column":12},"end":{"line":133,"column":39}},"74":{"start":{"line":135,"column":8},"end":{"line":135,"column":28}},"75":{"start":{"line":137,"column":8},"end":{"line":137,"column":30}},"76":{"start":{"line":138,"column":8},"end":{"line":138,"column":38}},"77":{"start":{"line":139,"column":8},"end":{"line":139,"column":36}},"78":{"start":{"line":141,"column":8},"end":{"line":141,"column":37}},"79":{"start":{"line":143,"column":8},"end":{"line":143,"column":20}},"80":{"start":{"line":147,"column":8},"end":{"line":147,"column":65}},"81":{"start":{"line":149,"column":8},"end":{"line":153,"column":9}},"82":{"start":{"line":150,"column":12},"end":{"line":150,"column":49}},"83":{"start":{"line":151,"column":12},"end":{"line":151,"column":36}},"84":{"start":{"line":152,"column":12},"end":{"line":152,"column":24}},"85":{"start":{"line":155,"column":8},"end":{"line":157,"column":9}},"86":{"start":{"line":156,"column":12},"end":{"line":156,"column":25}},"87":{"start":{"line":159,"column":8},"end":{"line":159,"column":79}},"88":{"start":{"line":160,"column":8},"end":{"line":160,"column":37}},"89":{"start":{"line":161,"column":8},"end":{"line":161,"column":35}},"90":{"start":{"line":162,"column":8},"end":{"line":162,"column":32}},"91":{"start":{"line":164,"column":8},"end":{"line":164,"column":30}},"92":{"start":{"line":166,"column":8},"end":{"line":166,"column":43}},"93":{"start":{"line":168,"column":8},"end":{"line":173,"column":9}},"94":{"start":{"line":169,"column":12},"end":{"line":171,"column":13}},"95":{"start":{"line":170,"column":16},"end":{"line":170,"column":22}},"96":{"start":{"line":172,"column":12},"end":{"line":172,"column":62}},"97":{"start":{"line":175,"column":8},"end":{"line":175,"column":20}},"98":{"start":{"line":179,"column":8},"end":{"line":182,"column":9}},"99":{"start":{"line":180,"column":12},"end":{"line":180,"column":60}},"100":{"start":{"line":181,"column":12},"end":{"line":181,"column":35}},"101":{"start":{"line":184,"column":8},"end":{"line":184,"column":25}},"102":{"start":{"line":186,"column":8},"end":{"line":193,"column":9}},"103":{"start":{"line":187,"column":12},"end":{"line":189,"column":13}},"104":{"start":{"line":188,"column":16},"end":{"line":188,"column":22}},"105":{"start":{"line":190,"column":12},"end":{"line":192,"column":13}},"106":{"start":{"line":191,"column":16},"end":{"line":191,"column":22}},"107":{"start":{"line":195,"column":8},"end":{"line":197,"column":9}},"108":{"start":{"line":196,"column":12},"end":{"line":196,"column":56}},"109":{"start":{"line":199,"column":8},"end":{"line":199,"column":32}},"110":{"start":{"line":203,"column":0},"end":{"line":203,"column":37}},"111":{"start":{"line":205,"column":0},"end":{"line":258,"column":2}}},"branchMap":{"1":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":18},"end":{"line":20,"column":25}},{"start":{"line":20,"column":29},"end":{"line":20,"column":31}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":8},"end":{"line":29,"column":8}},{"start":{"line":29,"column":8},"end":{"line":29,"column":8}}]},"3":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":12},"end":{"line":30,"column":12}},{"start":{"line":30,"column":12},"end":{"line":30,"column":12}}]},"4":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":15},"end":{"line":30,"column":42}},{"start":{"line":30,"column":46},"end":{"line":30,"column":113}}]},"5":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":12},"end":{"line":34,"column":12}},{"start":{"line":34,"column":12},"end":{"line":34,"column":12}}]},"6":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":16},"end":{"line":36,"column":16}},{"start":{"line":36,"column":16},"end":{"line":36,"column":16}}]},"7":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":8}},{"start":{"line":53,"column":8},"end":{"line":53,"column":8}}]},"8":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":12},"end":{"line":54,"column":12}},{"start":{"line":54,"column":12},"end":{"line":54,"column":12}}]},"9":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":16}},{"start":{"line":55,"column":16},"end":{"line":55,"column":16}}]},"10":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":23},"end":{"line":57,"column":23}},{"start":{"line":57,"column":23},"end":{"line":57,"column":23}}]},"11":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":20},"end":{"line":58,"column":20}},{"start":{"line":58,"column":20},"end":{"line":58,"column":20}}]},"12":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":23},"end":{"line":58,"column":52}},{"start":{"line":58,"column":56},"end":{"line":58,"column":103}}]},"13":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":12},"end":{"line":65,"column":12}},{"start":{"line":65,"column":12},"end":{"line":65,"column":12}}]},"14":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":16},"end":{"line":66,"column":16}},{"start":{"line":66,"column":16},"end":{"line":66,"column":16}}]},"15":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":16}},{"start":{"line":70,"column":16},"end":{"line":70,"column":16}}]},"16":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":12},"end":{"line":75,"column":12}},{"start":{"line":75,"column":12},"end":{"line":75,"column":12}}]},"17":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":15},"end":{"line":75,"column":36}},{"start":{"line":75,"column":40},"end":{"line":75,"column":62}}]},"18":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":12},"end":{"line":85,"column":12}},{"start":{"line":85,"column":12},"end":{"line":85,"column":12}}]},"19":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":8},"end":{"line":89,"column":8}},{"start":{"line":89,"column":8},"end":{"line":89,"column":8}}]},"20":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":8},"end":{"line":93,"column":8}},{"start":{"line":93,"column":8},"end":{"line":93,"column":8}}]},"21":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":8},"end":{"line":101,"column":8}},{"start":{"line":101,"column":8},"end":{"line":101,"column":8}}]},"22":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":8},"end":{"line":106,"column":8}},{"start":{"line":106,"column":8},"end":{"line":106,"column":8}}]},"23":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":8},"end":{"line":117,"column":8}},{"start":{"line":117,"column":8},"end":{"line":117,"column":8}}]},"24":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":12},"end":{"line":126,"column":12}},{"start":{"line":126,"column":12},"end":{"line":126,"column":12}}]},"25":{"line":126,"type":"binary-expr","locations":[{"start":{"line":126,"column":15},"end":{"line":126,"column":22}},{"start":{"line":126,"column":26},"end":{"line":126,"column":51}},{"start":{"line":126,"column":55},"end":{"line":126,"column":84}}]},"26":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":8},"end":{"line":132,"column":8}},{"start":{"line":132,"column":8},"end":{"line":132,"column":8}}]},"27":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":8},"end":{"line":149,"column":8}},{"start":{"line":149,"column":8},"end":{"line":149,"column":8}}]},"28":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":8},"end":{"line":155,"column":8}},{"start":{"line":155,"column":8},"end":{"line":155,"column":8}}]},"29":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":12},"end":{"line":169,"column":12}},{"start":{"line":169,"column":12},"end":{"line":169,"column":12}}]},"30":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":8},"end":{"line":179,"column":8}},{"start":{"line":179,"column":8},"end":{"line":179,"column":8}}]},"31":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":12},"end":{"line":187,"column":12}},{"start":{"line":187,"column":12},"end":{"line":187,"column":12}}]},"32":{"line":187,"type":"binary-expr","locations":[{"start":{"line":187,"column":15},"end":{"line":187,"column":40}},{"start":{"line":187,"column":44},"end":{"line":187,"column":64}}]},"33":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":12},"end":{"line":190,"column":12}},{"start":{"line":190,"column":12},"end":{"line":190,"column":12}}]},"34":{"line":190,"type":"binary-expr","locations":[{"start":{"line":190,"column":15},"end":{"line":190,"column":44}},{"start":{"line":190,"column":48},"end":{"line":190,"column":72}}]},"35":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":8},"end":{"line":195,"column":8}},{"start":{"line":195,"column":8},"end":{"line":195,"column":8}}]}},"code":["\"use strict\";","","const BaseTransformer = require(\"./BaseTransformer\");","","// EBML VInt max value is (2 ^ 56 - 2), but JS only supports 2^53","// 45 = 53 - 8 - check before last 8 bytes","const MAX_SHIFTED_VINT = Math.pow(2, 45);","","const STATE_CONTENT = 0;","const STATE_TAG = 1;","","const TAG_TYPE_END = 0;","const TAG_TYPE_START = 1;","const TAG_TYPE_TAG = 2;","","const TRACKTYPE_AUDIO = 2; // EBML spec: https://www.matroska.org/technical/specs/index.html#TrackType","","class WebmOpusTransformer extends BaseTransformer {","    constructor(options) {","        options = options || {};","        super(options);","","        this._tag_stack = [];","        this._state = STATE_TAG;","        this._total = 0;","    }","","    process(type, info) {","        if(type === TAG_TYPE_TAG) {","            if(info.name === \"SimpleBlock\" && (info.data.readUInt8(0) & 0xF) === this.firstAudioTrack.TrackNumber) {","                this.push(info.data.slice(4));","                return;","            }","            if(info.name === \"CodecPrivate\") {","                var head = info.data.toString(\"utf8\", 0, 8);","                if(head !== \"OpusHead\") {","                    this.emit(\"error\", new Error(\"Invalid codec: \" + head));","                    return;","                }","","                this.codecData = {","                    version: info.data.readUInt8(8),","                    channelCount: info.data.readUInt8(9),","                    preSkip: info.data.readUInt16LE(10),","                    inputSampleRate: info.data.readUInt32LE(12),","                    outputGain: info.data.readUInt16LE(16),","                    mappingFamily: info.data.readUInt8(18)","                };","                return;","            }","        }","","        if(!this.firstAudioTrack) {","            if(info.name === \"TrackEntry\") {","                if(type === TAG_TYPE_START) {","                    this.parsingTrack = {};","                } else if(type === TAG_TYPE_END) {","                    if(this.parsingTrack.TrackNumber && this.parsingTrack.TrackType === TRACKTYPE_AUDIO) {","                        this.firstAudioTrack = this.parsingTrack;","                    }","                    delete this.parsingTrack;","                }","                return;","            }","            if(this.parsingTrack) {","                if(info.name === \"TrackNumber\") {","                    this.parsingTrack.TrackNumber = info.data[0];","                    return;","                }","                if(info.name === \"TrackType\") {","                    this.parsingTrack.TrackType = info.data[0];","                    return;","                }","            }","            if(type === TAG_TYPE_END && info.name === \"Tracks\") {","                this.emit(\"error\", new Error(\"No audio track\"));","                return;","            }","            return;","        }","    }","","    getVIntLength(buffer, index) {","        for(var length = 1; length <= 8; ++length) {","            if(buffer[index] & (1 << (8 - length))) {","                break;","            }","        }","        if(length > 8) {","            this.emit(\"debug\", new Error(`VInt length ${length} | ${buffer.toString(\"hex\", index, index + length)}`));","            return null;","        }","        if(index + length > buffer.length) {","            return null;","        }","        return length;","    }","","    readTag(buffer) {","        var tagSize = this.getVIntLength(buffer, buffer._index);","        if(tagSize === null) {","            return false;","        }","","        var size = this.getVIntLength(buffer, buffer._index + tagSize);","        if(size === null) {","            return false;","        }","","        var tagStr = buffer.toString(\"hex\", buffer._index, buffer._index + tagSize);","","        var tagObj = {","            type: \"unknown\",","            name: \"unknown\",","            end: this._total + tagSize","        };","        if(schema[tagStr]) {","            tagObj.type = schema[tagStr].type;","            tagObj.name = schema[tagStr].name;","        }","","        buffer._index += tagSize;","","        var value = buffer[buffer._index] & (1 << (8 - size)) - 1;","        for(var i = 1; i < size; ++i) {","            if(i === 7 && value >= MAX_SHIFTED_VINT && buffer[buffer._index + 7] > 0) {","                tagObj.end = -1; // Special livestreaming int 0x1FFFFFFFFFFFFFF","                break;","            }","            value = (value << 8) + buffer[buffer._index + i];","        }","        if(tagObj.end !== -1) {","            tagObj.end += value + size;","        }","        tagObj.size = value;","","        buffer._index += size;","        this._total += tagSize + size;","        this._state = STATE_CONTENT;","","        this._tag_stack.push(tagObj);","","        return true;","    }","","    readContent(buffer) {","        var tagObj = this._tag_stack[this._tag_stack.length - 1];","","        if(tagObj.type === \"m\") {","            this.process(TAG_TYPE_START, tagObj);","            this._state = STATE_TAG;","            return true;","        }","","        if(buffer.length < buffer._index + tagObj.size) {","            return false;","        }","","        tagObj.data = buffer.slice(buffer._index, buffer._index + tagObj.size);","        buffer._index += tagObj.size;","        this._total += tagObj.size;","        this._state = STATE_TAG;","","        this._tag_stack.pop();","","        this.process(TAG_TYPE_TAG, tagObj);","","        while(this._tag_stack.length > 0) {","            if(this._total < this._tag_stack[this._tag_stack.length - 1].end) {","                break;","            }","            this.process(TAG_TYPE_END, this._tag_stack.pop());","        }","","        return true;","    }","","    _transform(chunk, enc, cb) {","        if(this._remainder)  {","            chunk = Buffer.concat([this._remainder, chunk]);","            this._remainder = null;","        }","","        chunk._index = 0;","","        while(chunk._index < chunk.length) {","            if(this._state === STATE_TAG && !this.readTag(chunk)) {","                break;","            }","            if(this._state === STATE_CONTENT && !this.readContent(chunk)) {","                break;","            }","        }","","        if(chunk._index < chunk.length) {","            this._remainder = chunk.slice(chunk._index);","        }","","        this.setTransformCB(cb);","    }","}","","module.exports = WebmOpusTransformer;","","const schema = {","    ae: {","        name: \"TrackEntry\",","        type: \"m\"","    },","    d7: {","        name: \"TrackNumber\",","        type: \"u\"","    },","    \"86\": {","        name: \"CodecID\",","        type: \"s\"","    },","    \"83\": {","        name: \"TrackType\",","        type: \"u\"","    },","    \"1654ae6b\": {","        name: \"Tracks\",","        type: \"m\"","    },","    \"63a2\": {","        name: \"CodecPrivate\",","        type: \"b\"","    },","    a3: {","        name: \"SimpleBlock\",","        type: \"b\"","    },","    \"1a45dfa3\": {","        name: \"EBML\",","        type: \"m\"","    },","    \"18538067\": {","        name: \"Segment\",","        type: \"m\"","    },","    \"114d9b74\": {","        name: \"SeekHead\",","        type: \"m\"","    },","    \"1549a966\": {","        name: \"Info\",","        type: \"m\"","    },","    e1: {","        name: \"Audio\",","        type: \"m\"","    },","    \"1f43b675\": {","        name: \"Cluster\",","        type: \"m\"","    }","};",""],"l":{"3":1,"7":1,"9":1,"10":1,"12":1,"13":1,"14":1,"16":1,"20":0,"21":0,"23":0,"24":0,"25":0,"29":0,"30":0,"31":0,"32":0,"34":0,"35":0,"36":0,"37":0,"38":0,"41":0,"49":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"61":0,"63":0,"65":0,"66":0,"67":0,"68":0,"70":0,"71":0,"72":0,"75":0,"76":0,"77":0,"79":0,"84":0,"85":0,"86":0,"89":0,"90":0,"91":0,"93":0,"94":0,"96":0,"100":0,"101":0,"102":0,"105":0,"106":0,"107":0,"110":0,"112":0,"117":0,"118":0,"119":0,"122":0,"124":0,"125":0,"126":0,"127":0,"128":0,"130":0,"132":0,"133":0,"135":0,"137":0,"138":0,"139":0,"141":0,"143":0,"147":0,"149":0,"150":0,"151":0,"152":0,"155":0,"156":0,"159":0,"160":0,"161":0,"162":0,"164":0,"166":0,"168":0,"169":0,"170":0,"172":0,"175":0,"179":0,"180":0,"181":0,"184":0,"186":0,"187":0,"188":0,"190":0,"191":0,"195":0,"196":0,"199":0,"203":1,"205":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/VoiceConnection.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/VoiceConnection.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":1},"b":{"1":[0,1],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0,0],"23":[0,0],"24":[0,0,0,0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"fnMap":{"1":{"name":"(anonymous_1)","line":64,"loc":{"start":{"line":64,"column":15},"end":{"line":64,"column":29}}},"2":{"name":"(anonymous_2)","line":137,"loc":{"start":{"line":137,"column":12},"end":{"line":137,"column":15}}},"3":{"name":"(anonymous_3)","line":151,"loc":{"start":{"line":151,"column":11},"end":{"line":151,"column":18}}},"4":{"name":"(anonymous_4)","line":322,"loc":{"start":{"line":322,"column":14},"end":{"line":322,"column":36}}},"5":{"name":"(anonymous_5)","line":371,"loc":{"start":{"line":371,"column":13},"end":{"line":371,"column":16}}},"6":{"name":"(anonymous_6)","line":388,"loc":{"start":{"line":388,"column":8},"end":{"line":388,"column":26}}},"7":{"name":"(anonymous_7)","line":436,"loc":{"start":{"line":436,"column":9},"end":{"line":436,"column":12}}},"8":{"name":"(anonymous_8)","line":481,"loc":{"start":{"line":481,"column":15},"end":{"line":481,"column":18}}},"9":{"name":"(anonymous_9)","line":517,"loc":{"start":{"line":517,"column":17},"end":{"line":517,"column":27}}},"10":{"name":"(anonymous_10)","line":539,"loc":{"start":{"line":539,"column":15},"end":{"line":539,"column":24}}},"11":{"name":"(anonymous_11)","line":554,"loc":{"start":{"line":554,"column":11},"end":{"line":554,"column":18}}},"12":{"name":"(anonymous_12)","line":575,"loc":{"start":{"line":575,"column":31},"end":{"line":575,"column":34}}},"13":{"name":"(anonymous_13)","line":616,"loc":{"start":{"line":616,"column":15},"end":{"line":616,"column":18}}},"14":{"name":"(anonymous_14)","line":635,"loc":{"start":{"line":635,"column":15},"end":{"line":635,"column":23}}},"15":{"name":"(anonymous_15)","line":649,"loc":{"start":{"line":649,"column":17},"end":{"line":649,"column":39}}},"16":{"name":"(anonymous_16)","line":665,"loc":{"start":{"line":665,"column":20},"end":{"line":665,"column":41}}},"17":{"name":"(anonymous_17)","line":676,"loc":{"start":{"line":676,"column":10},"end":{"line":676,"column":21}}},"18":{"name":"(anonymous_18)","line":684,"loc":{"start":{"line":684,"column":14},"end":{"line":684,"column":17}}},"19":{"name":"(anonymous_19)","line":692,"loc":{"start":{"line":692,"column":13},"end":{"line":692,"column":22}}},"20":{"name":"(anonymous_20)","line":699,"loc":{"start":{"line":699,"column":9},"end":{"line":699,"column":12}}},"21":{"name":"(anonymous_21)","line":715,"loc":{"start":{"line":715,"column":10},"end":{"line":715,"column":13}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":46}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":42}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":31}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":27}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":39}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":33}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":53}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":81}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":17}},"10":{"start":{"line":13,"column":0},"end":{"line":17,"column":1}},"11":{"start":{"line":14,"column":4},"end":{"line":14,"column":44}},"12":{"start":{"line":16,"column":4},"end":{"line":16,"column":50}},"13":{"start":{"line":18,"column":0},"end":{"line":18,"column":13}},"14":{"start":{"line":19,"column":0},"end":{"line":22,"column":1}},"15":{"start":{"line":20,"column":4},"end":{"line":20,"column":36}},"16":{"start":{"line":23,"column":0},"end":{"line":23,"column":15}},"17":{"start":{"line":24,"column":0},"end":{"line":27,"column":1}},"18":{"start":{"line":25,"column":4},"end":{"line":25,"column":39}},"19":{"start":{"line":28,"column":0},"end":{"line":28,"column":19}},"20":{"start":{"line":29,"column":0},"end":{"line":29,"column":17}},"21":{"start":{"line":30,"column":0},"end":{"line":37,"column":1}},"22":{"start":{"line":31,"column":4},"end":{"line":31,"column":38}},"23":{"start":{"line":33,"column":4},"end":{"line":36,"column":5}},"24":{"start":{"line":34,"column":8},"end":{"line":34,"column":36}},"25":{"start":{"line":38,"column":0},"end":{"line":41,"column":1}},"26":{"start":{"line":39,"column":4},"end":{"line":39,"column":31}},"27":{"start":{"line":43,"column":0},"end":{"line":43,"column":32}},"28":{"start":{"line":44,"column":0},"end":{"line":44,"column":44}},"29":{"start":{"line":65,"column":8},"end":{"line":65,"column":16}},"30":{"start":{"line":66,"column":8},"end":{"line":66,"column":32}},"31":{"start":{"line":68,"column":8},"end":{"line":70,"column":9}},"32":{"start":{"line":69,"column":12},"end":{"line":69,"column":79}},"33":{"start":{"line":72,"column":8},"end":{"line":74,"column":9}},"34":{"start":{"line":73,"column":12},"end":{"line":73,"column":86}},"35":{"start":{"line":76,"column":8},"end":{"line":76,"column":21}},"36":{"start":{"line":77,"column":8},"end":{"line":77,"column":34}},"37":{"start":{"line":78,"column":8},"end":{"line":78,"column":26}},"38":{"start":{"line":79,"column":8},"end":{"line":79,"column":32}},"39":{"start":{"line":80,"column":8},"end":{"line":80,"column":71}},"40":{"start":{"line":81,"column":8},"end":{"line":81,"column":58}},"41":{"start":{"line":82,"column":8},"end":{"line":82,"column":29}},"42":{"start":{"line":83,"column":8},"end":{"line":83,"column":39}},"43":{"start":{"line":84,"column":8},"end":{"line":84,"column":41}},"44":{"start":{"line":85,"column":8},"end":{"line":85,"column":43}},"45":{"start":{"line":87,"column":8},"end":{"line":97,"column":9}},"46":{"start":{"line":88,"column":12},"end":{"line":96,"column":13}},"47":{"start":{"line":89,"column":16},"end":{"line":89,"column":87}},"48":{"start":{"line":90,"column":19},"end":{"line":96,"column":13}},"49":{"start":{"line":91,"column":16},"end":{"line":91,"column":86}},"50":{"start":{"line":92,"column":16},"end":{"line":92,"column":107}},"51":{"start":{"line":93,"column":16},"end":{"line":93,"column":51}},"52":{"start":{"line":95,"column":16},"end":{"line":95,"column":96}},"53":{"start":{"line":99,"column":8},"end":{"line":99,"column":30}},"54":{"start":{"line":100,"column":8},"end":{"line":100,"column":27}},"55":{"start":{"line":101,"column":8},"end":{"line":101,"column":30}},"56":{"start":{"line":102,"column":8},"end":{"line":102,"column":26}},"57":{"start":{"line":103,"column":8},"end":{"line":103,"column":27}},"58":{"start":{"line":104,"column":8},"end":{"line":104,"column":30}},"59":{"start":{"line":105,"column":8},"end":{"line":105,"column":37}},"60":{"start":{"line":107,"column":8},"end":{"line":107,"column":36}},"61":{"start":{"line":108,"column":8},"end":{"line":108,"column":27}},"62":{"start":{"line":110,"column":8},"end":{"line":110,"column":65}},"63":{"start":{"line":111,"column":8},"end":{"line":111,"column":34}},"64":{"start":{"line":112,"column":8},"end":{"line":112,"column":36}},"65":{"start":{"line":113,"column":8},"end":{"line":113,"column":36}},"66":{"start":{"line":115,"column":8},"end":{"line":132,"column":9}},"67":{"start":{"line":116,"column":12},"end":{"line":116,"column":42}},"68":{"start":{"line":117,"column":12},"end":{"line":124,"column":13}},"69":{"start":{"line":123,"column":16},"end":{"line":123,"column":41}},"70":{"start":{"line":126,"column":12},"end":{"line":126,"column":69}},"71":{"start":{"line":127,"column":12},"end":{"line":127,"column":65}},"72":{"start":{"line":127,"column":42},"end":{"line":127,"column":63}},"73":{"start":{"line":129,"column":12},"end":{"line":131,"column":13}},"74":{"start":{"line":130,"column":16},"end":{"line":130,"column":43}},"75":{"start":{"line":134,"column":8},"end":{"line":134,"column":43}},"76":{"start":{"line":138,"column":8},"end":{"line":141,"column":9}},"77":{"start":{"line":139,"column":12},"end":{"line":139,"column":31}},"78":{"start":{"line":140,"column":12},"end":{"line":140,"column":29}},"79":{"start":{"line":142,"column":8},"end":{"line":142,"column":26}},"80":{"start":{"line":143,"column":8},"end":{"line":145,"column":9}},"81":{"start":{"line":144,"column":12},"end":{"line":144,"column":45}},"82":{"start":{"line":146,"column":8},"end":{"line":148,"column":9}},"83":{"start":{"line":147,"column":12},"end":{"line":147,"column":44}},"84":{"start":{"line":152,"column":8},"end":{"line":155,"column":9}},"85":{"start":{"line":153,"column":12},"end":{"line":153,"column":45}},"86":{"start":{"line":154,"column":12},"end":{"line":154,"column":61}},"87":{"start":{"line":154,"column":36},"end":{"line":154,"column":54}},"88":{"start":{"line":156,"column":8},"end":{"line":159,"column":9}},"89":{"start":{"line":157,"column":12},"end":{"line":157,"column":104}},"90":{"start":{"line":158,"column":12},"end":{"line":158,"column":19}},"91":{"start":{"line":160,"column":8},"end":{"line":160,"column":41}},"92":{"start":{"line":161,"column":8},"end":{"line":161,"column":52}},"93":{"start":{"line":162,"column":8},"end":{"line":162,"column":58}},"94":{"start":{"line":168,"column":8},"end":{"line":168,"column":71}},"95":{"start":{"line":169,"column":8},"end":{"line":181,"column":11}},"96":{"start":{"line":174,"column":12},"end":{"line":174,"column":33}},"97":{"start":{"line":175,"column":12},"end":{"line":180,"column":15}},"98":{"start":{"line":182,"column":8},"end":{"line":303,"column":11}},"99":{"start":{"line":183,"column":12},"end":{"line":183,"column":39}},"100":{"start":{"line":184,"column":12},"end":{"line":184,"column":65}},"101":{"start":{"line":185,"column":12},"end":{"line":302,"column":13}},"102":{"start":{"line":187,"column":20},"end":{"line":195,"column":21}},"103":{"start":{"line":188,"column":24},"end":{"line":190,"column":25}},"104":{"start":{"line":189,"column":28},"end":{"line":189,"column":66}},"105":{"start":{"line":191,"column":24},"end":{"line":193,"column":56}},"106":{"start":{"line":192,"column":28},"end":{"line":192,"column":45}},"107":{"start":{"line":194,"column":24},"end":{"line":194,"column":41}},"108":{"start":{"line":196,"column":20},"end":{"line":196,"column":63}},"109":{"start":{"line":197,"column":20},"end":{"line":197,"column":46}},"110":{"start":{"line":198,"column":20},"end":{"line":198,"column":67}},"111":{"start":{"line":199,"column":20},"end":{"line":201,"column":21}},"112":{"start":{"line":200,"column":24},"end":{"line":200,"column":73}},"113":{"start":{"line":202,"column":20},"end":{"line":202,"column":48}},"114":{"start":{"line":203,"column":20},"end":{"line":203,"column":49}},"115":{"start":{"line":204,"column":20},"end":{"line":254,"column":23}},"116":{"start":{"line":205,"column":24},"end":{"line":208,"column":25}},"117":{"start":{"line":206,"column":28},"end":{"line":206,"column":52}},"118":{"start":{"line":207,"column":28},"end":{"line":207,"column":35}},"119":{"start":{"line":210,"column":24},"end":{"line":210,"column":45}},"120":{"start":{"line":212,"column":24},"end":{"line":212,"column":100}},"121":{"start":{"line":214,"column":24},"end":{"line":214,"column":68}},"122":{"start":{"line":215,"column":24},"end":{"line":232,"column":27}},"123":{"start":{"line":216,"column":28},"end":{"line":216,"column":66}},"124":{"start":{"line":217,"column":28},"end":{"line":217,"column":45}},"125":{"start":{"line":218,"column":28},"end":{"line":218,"column":38}},"126":{"start":{"line":219,"column":28},"end":{"line":221,"column":29}},"127":{"start":{"line":220,"column":32},"end":{"line":220,"column":74}},"128":{"start":{"line":222,"column":28},"end":{"line":222,"column":107}},"129":{"start":{"line":224,"column":28},"end":{"line":231,"column":31}},"130":{"start":{"line":233,"column":24},"end":{"line":241,"column":27}},"131":{"start":{"line":234,"column":28},"end":{"line":234,"column":52}},"132":{"start":{"line":235,"column":28},"end":{"line":237,"column":29}},"133":{"start":{"line":236,"column":32},"end":{"line":236,"column":78}},"134":{"start":{"line":238,"column":28},"end":{"line":240,"column":29}},"135":{"start":{"line":239,"column":32},"end":{"line":239,"column":53}},"136":{"start":{"line":242,"column":24},"end":{"line":249,"column":27}},"137":{"start":{"line":243,"column":28},"end":{"line":245,"column":29}},"138":{"start":{"line":244,"column":32},"end":{"line":244,"column":77}},"139":{"start":{"line":246,"column":28},"end":{"line":248,"column":29}},"140":{"start":{"line":247,"column":32},"end":{"line":247,"column":53}},"141":{"start":{"line":250,"column":24},"end":{"line":250,"column":56}},"142":{"start":{"line":251,"column":24},"end":{"line":251,"column":43}},"143":{"start":{"line":252,"column":24},"end":{"line":252,"column":64}},"144":{"start":{"line":253,"column":24},"end":{"line":253,"column":53}},"145":{"start":{"line":255,"column":20},"end":{"line":255,"column":26}},"146":{"start":{"line":258,"column":20},"end":{"line":258,"column":46}},"147":{"start":{"line":259,"column":20},"end":{"line":259,"column":94}},"148":{"start":{"line":260,"column":20},"end":{"line":262,"column":21}},"149":{"start":{"line":261,"column":24},"end":{"line":261,"column":64}},"150":{"start":{"line":263,"column":20},"end":{"line":263,"column":38}},"151":{"start":{"line":268,"column":20},"end":{"line":268,"column":39}},"152":{"start":{"line":269,"column":20},"end":{"line":269,"column":40}},"153":{"start":{"line":270,"column":20},"end":{"line":270,"column":39}},"154":{"start":{"line":271,"column":20},"end":{"line":271,"column":38}},"155":{"start":{"line":272,"column":20},"end":{"line":272,"column":26}},"156":{"start":{"line":280,"column":20},"end":{"line":280,"column":61}},"157":{"start":{"line":281,"column":20},"end":{"line":281,"column":26}},"158":{"start":{"line":284,"column":20},"end":{"line":284,"column":71}},"159":{"start":{"line":295,"column":20},"end":{"line":295,"column":102}},"160":{"start":{"line":296,"column":20},"end":{"line":296,"column":26}},"161":{"start":{"line":299,"column":20},"end":{"line":299,"column":49}},"162":{"start":{"line":300,"column":20},"end":{"line":300,"column":26}},"163":{"start":{"line":304,"column":8},"end":{"line":309,"column":11}},"164":{"start":{"line":305,"column":12},"end":{"line":305,"column":79}},"165":{"start":{"line":306,"column":12},"end":{"line":308,"column":13}},"166":{"start":{"line":307,"column":16},"end":{"line":307,"column":37}},"167":{"start":{"line":310,"column":8},"end":{"line":314,"column":84}},"168":{"start":{"line":311,"column":12},"end":{"line":313,"column":13}},"169":{"start":{"line":312,"column":16},"end":{"line":312,"column":71}},"170":{"start":{"line":323,"column":8},"end":{"line":323,"column":27}},"171":{"start":{"line":324,"column":8},"end":{"line":324,"column":30}},"172":{"start":{"line":325,"column":8},"end":{"line":325,"column":27}},"173":{"start":{"line":326,"column":8},"end":{"line":326,"column":26}},"174":{"start":{"line":328,"column":8},"end":{"line":328,"column":27}},"175":{"start":{"line":330,"column":8},"end":{"line":334,"column":9}},"176":{"start":{"line":331,"column":12},"end":{"line":331,"column":31}},"177":{"start":{"line":333,"column":12},"end":{"line":333,"column":33}},"178":{"start":{"line":335,"column":8},"end":{"line":338,"column":9}},"179":{"start":{"line":336,"column":12},"end":{"line":336,"column":50}},"180":{"start":{"line":337,"column":12},"end":{"line":337,"column":42}},"181":{"start":{"line":339,"column":8},"end":{"line":348,"column":9}},"182":{"start":{"line":340,"column":12},"end":{"line":346,"column":13}},"183":{"start":{"line":341,"column":16},"end":{"line":341,"column":39}},"184":{"start":{"line":343,"column":16},"end":{"line":345,"column":17}},"185":{"start":{"line":344,"column":20},"end":{"line":344,"column":44}},"186":{"start":{"line":347,"column":12},"end":{"line":347,"column":34}},"187":{"start":{"line":349,"column":8},"end":{"line":356,"column":9}},"188":{"start":{"line":350,"column":12},"end":{"line":354,"column":13}},"189":{"start":{"line":351,"column":16},"end":{"line":351,"column":32}},"190":{"start":{"line":353,"column":16},"end":{"line":353,"column":40}},"191":{"start":{"line":355,"column":12},"end":{"line":355,"column":27}},"192":{"start":{"line":357,"column":8},"end":{"line":368,"column":9}},"193":{"start":{"line":358,"column":12},"end":{"line":358,"column":38}},"194":{"start":{"line":360,"column":12},"end":{"line":360,"column":34}},"195":{"start":{"line":361,"column":12},"end":{"line":361,"column":36}},"196":{"start":{"line":367,"column":12},"end":{"line":367,"column":43}},"197":{"start":{"line":372,"column":8},"end":{"line":372,"column":51}},"198":{"start":{"line":389,"column":8},"end":{"line":391,"column":9}},"199":{"start":{"line":390,"column":12},"end":{"line":390,"column":77}},"200":{"start":{"line":392,"column":8},"end":{"line":394,"column":9}},"201":{"start":{"line":393,"column":12},"end":{"line":393,"column":45}},"202":{"start":{"line":396,"column":8},"end":{"line":396,"column":32}},"203":{"start":{"line":397,"column":8},"end":{"line":397,"column":48}},"204":{"start":{"line":398,"column":8},"end":{"line":398,"column":102}},"205":{"start":{"line":399,"column":8},"end":{"line":399,"column":54}},"206":{"start":{"line":400,"column":8},"end":{"line":400,"column":52}},"207":{"start":{"line":401,"column":8},"end":{"line":401,"column":56}},"208":{"start":{"line":403,"column":8},"end":{"line":403,"column":73}},"209":{"start":{"line":404,"column":8},"end":{"line":404,"column":76}},"210":{"start":{"line":405,"column":8},"end":{"line":405,"column":101}},"211":{"start":{"line":406,"column":8},"end":{"line":406,"column":83}},"212":{"start":{"line":408,"column":8},"end":{"line":411,"column":9}},"213":{"start":{"line":409,"column":12},"end":{"line":409,"column":69}},"214":{"start":{"line":410,"column":12},"end":{"line":410,"column":19}},"215":{"start":{"line":413,"column":8},"end":{"line":413,"column":27}},"216":{"start":{"line":414,"column":8},"end":{"line":423,"column":10}},"217":{"start":{"line":425,"column":8},"end":{"line":425,"column":28}},"218":{"start":{"line":431,"column":8},"end":{"line":431,"column":27}},"219":{"start":{"line":433,"column":8},"end":{"line":433,"column":21}},"220":{"start":{"line":437,"column":8},"end":{"line":439,"column":9}},"221":{"start":{"line":438,"column":12},"end":{"line":438,"column":38}},"222":{"start":{"line":441,"column":8},"end":{"line":441,"column":57}},"223":{"start":{"line":442,"column":8},"end":{"line":444,"column":9}},"224":{"start":{"line":443,"column":12},"end":{"line":443,"column":41}},"225":{"start":{"line":446,"column":8},"end":{"line":448,"column":9}},"226":{"start":{"line":447,"column":12},"end":{"line":447,"column":35}},"227":{"start":{"line":450,"column":8},"end":{"line":471,"column":9}},"228":{"start":{"line":451,"column":12},"end":{"line":453,"column":13}},"229":{"start":{"line":452,"column":16},"end":{"line":452,"column":52}},"230":{"start":{"line":454,"column":12},"end":{"line":457,"column":13}},"231":{"start":{"line":455,"column":16},"end":{"line":455,"column":48}},"232":{"start":{"line":456,"column":16},"end":{"line":456,"column":39}},"233":{"start":{"line":458,"column":15},"end":{"line":471,"column":9}},"234":{"start":{"line":459,"column":12},"end":{"line":461,"column":13}},"235":{"start":{"line":460,"column":16},"end":{"line":460,"column":40}},"236":{"start":{"line":462,"column":12},"end":{"line":462,"column":78}},"237":{"start":{"line":463,"column":12},"end":{"line":463,"column":65}},"238":{"start":{"line":464,"column":12},"end":{"line":466,"column":13}},"239":{"start":{"line":465,"column":16},"end":{"line":465,"column":45}},"240":{"start":{"line":467,"column":12},"end":{"line":467,"column":98}},"241":{"start":{"line":468,"column":12},"end":{"line":468,"column":19}},"242":{"start":{"line":470,"column":12},"end":{"line":470,"column":38}},"243":{"start":{"line":473,"column":8},"end":{"line":473,"column":66}},"244":{"start":{"line":474,"column":8},"end":{"line":474,"column":68}},"245":{"start":{"line":475,"column":8},"end":{"line":475,"column":141}},"246":{"start":{"line":482,"column":8},"end":{"line":484,"column":9}},"247":{"start":{"line":483,"column":12},"end":{"line":483,"column":19}},"248":{"start":{"line":485,"column":8},"end":{"line":485,"column":26}},"249":{"start":{"line":486,"column":8},"end":{"line":489,"column":9}},"250":{"start":{"line":487,"column":12},"end":{"line":487,"column":47}},"251":{"start":{"line":488,"column":12},"end":{"line":488,"column":40}},"252":{"start":{"line":490,"column":8},"end":{"line":490,"column":28}},"253":{"start":{"line":491,"column":8},"end":{"line":491,"column":26}},"254":{"start":{"line":492,"column":8},"end":{"line":492,"column":34}},"255":{"start":{"line":494,"column":8},"end":{"line":507,"column":9}},"256":{"start":{"line":495,"column":12},"end":{"line":506,"column":13}},"257":{"start":{"line":496,"column":16},"end":{"line":496,"column":49}},"258":{"start":{"line":497,"column":16},"end":{"line":499,"column":17}},"259":{"start":{"line":498,"column":20},"end":{"line":498,"column":49}},"260":{"start":{"line":501,"column":16},"end":{"line":503,"column":17}},"261":{"start":{"line":502,"column":20},"end":{"line":502,"column":43}},"262":{"start":{"line":505,"column":16},"end":{"line":505,"column":85}},"263":{"start":{"line":508,"column":8},"end":{"line":508,"column":47}},"264":{"start":{"line":514,"column":8},"end":{"line":514,"column":25}},"265":{"start":{"line":518,"column":8},"end":{"line":518,"column":59}},"266":{"start":{"line":519,"column":8},"end":{"line":519,"column":60}},"267":{"start":{"line":521,"column":8},"end":{"line":521,"column":53}},"268":{"start":{"line":523,"column":8},"end":{"line":523,"column":33}},"269":{"start":{"line":524,"column":8},"end":{"line":534,"column":9}},"270":{"start":{"line":525,"column":12},"end":{"line":525,"column":104}},"271":{"start":{"line":526,"column":12},"end":{"line":526,"column":52}},"272":{"start":{"line":528,"column":12},"end":{"line":528,"column":74}},"273":{"start":{"line":529,"column":12},"end":{"line":529,"column":63}},"274":{"start":{"line":530,"column":12},"end":{"line":530,"column":52}},"275":{"start":{"line":531,"column":12},"end":{"line":533,"column":13}},"276":{"start":{"line":532,"column":16},"end":{"line":532,"column":54}},"277":{"start":{"line":536,"column":8},"end":{"line":536,"column":52}},"278":{"start":{"line":540,"column":8},"end":{"line":546,"column":9}},"279":{"start":{"line":541,"column":12},"end":{"line":541,"column":84}},"280":{"start":{"line":543,"column":12},"end":{"line":545,"column":13}},"281":{"start":{"line":544,"column":16},"end":{"line":544,"column":38}},"282":{"start":{"line":555,"column":8},"end":{"line":571,"column":9}},"283":{"start":{"line":556,"column":12},"end":{"line":561,"column":13}},"284":{"start":{"line":557,"column":16},"end":{"line":557,"column":66}},"285":{"start":{"line":558,"column":16},"end":{"line":560,"column":17}},"286":{"start":{"line":559,"column":20},"end":{"line":559,"column":55}},"287":{"start":{"line":562,"column":15},"end":{"line":571,"column":9}},"288":{"start":{"line":563,"column":12},"end":{"line":568,"column":13}},"289":{"start":{"line":564,"column":16},"end":{"line":564,"column":67}},"290":{"start":{"line":565,"column":16},"end":{"line":567,"column":17}},"291":{"start":{"line":566,"column":20},"end":{"line":566,"column":55}},"292":{"start":{"line":570,"column":12},"end":{"line":570,"column":68}},"293":{"start":{"line":572,"column":8},"end":{"line":572,"column":79}},"294":{"start":{"line":576,"column":8},"end":{"line":613,"column":11}},"295":{"start":{"line":577,"column":12},"end":{"line":577,"column":39}},"296":{"start":{"line":578,"column":12},"end":{"line":578,"column":26}},"297":{"start":{"line":579,"column":12},"end":{"line":579,"column":38}},"298":{"start":{"line":580,"column":12},"end":{"line":580,"column":21}},"299":{"start":{"line":581,"column":12},"end":{"line":594,"column":13}},"300":{"start":{"line":582,"column":16},"end":{"line":582,"column":86}},"301":{"start":{"line":583,"column":16},"end":{"line":583,"column":96}},"302":{"start":{"line":585,"column":16},"end":{"line":593,"column":17}},"303":{"start":{"line":591,"column":20},"end":{"line":591,"column":75}},"304":{"start":{"line":592,"column":20},"end":{"line":592,"column":27}},"305":{"start":{"line":595,"column":12},"end":{"line":605,"column":13}},"306":{"start":{"line":604,"column":16},"end":{"line":604,"column":148}},"307":{"start":{"line":606,"column":12},"end":{"line":612,"column":13}},"308":{"start":{"line":607,"column":16},"end":{"line":607,"column":62}},"309":{"start":{"line":608,"column":16},"end":{"line":610,"column":17}},"310":{"start":{"line":609,"column":20},"end":{"line":609,"column":81}},"311":{"start":{"line":611,"column":16},"end":{"line":611,"column":147}},"312":{"start":{"line":617,"column":8},"end":{"line":617,"column":21}},"313":{"start":{"line":618,"column":8},"end":{"line":628,"column":9}},"314":{"start":{"line":619,"column":12},"end":{"line":619,"column":69}},"315":{"start":{"line":620,"column":12},"end":{"line":627,"column":13}},"316":{"start":{"line":621,"column":16},"end":{"line":624,"column":17}},"317":{"start":{"line":622,"column":20},"end":{"line":622,"column":39}},"318":{"start":{"line":623,"column":20},"end":{"line":623,"column":29}},"319":{"start":{"line":625,"column":16},"end":{"line":625,"column":48}},"320":{"start":{"line":626,"column":16},"end":{"line":626,"column":23}},"321":{"start":{"line":629,"column":8},"end":{"line":631,"column":9}},"322":{"start":{"line":630,"column":12},"end":{"line":630,"column":121}},"323":{"start":{"line":632,"column":8},"end":{"line":632,"column":134}},"324":{"start":{"line":636,"column":8},"end":{"line":642,"column":9}},"325":{"start":{"line":637,"column":12},"end":{"line":637,"column":34}},"326":{"start":{"line":638,"column":12},"end":{"line":641,"column":15}},"327":{"start":{"line":650,"column":8},"end":{"line":652,"column":9}},"328":{"start":{"line":651,"column":12},"end":{"line":651,"column":19}},"329":{"start":{"line":654,"column":8},"end":{"line":654,"column":35}},"330":{"start":{"line":655,"column":8},"end":{"line":657,"column":9}},"331":{"start":{"line":656,"column":12},"end":{"line":656,"column":36}},"332":{"start":{"line":666,"column":8},"end":{"line":673,"column":9}},"333":{"start":{"line":667,"column":12},"end":{"line":672,"column":15}},"334":{"start":{"line":677,"column":8},"end":{"line":681,"column":9}},"335":{"start":{"line":678,"column":12},"end":{"line":678,"column":53}},"336":{"start":{"line":679,"column":12},"end":{"line":679,"column":31}},"337":{"start":{"line":680,"column":12},"end":{"line":680,"column":37}},"338":{"start":{"line":685,"column":8},"end":{"line":685,"column":38}},"339":{"start":{"line":693,"column":8},"end":{"line":693,"column":37}},"340":{"start":{"line":700,"column":8},"end":{"line":700,"column":27}},"341":{"start":{"line":701,"column":8},"end":{"line":709,"column":9}},"342":{"start":{"line":702,"column":12},"end":{"line":704,"column":13}},"343":{"start":{"line":703,"column":16},"end":{"line":703,"column":58}},"344":{"start":{"line":705,"column":12},"end":{"line":708,"column":13}},"345":{"start":{"line":706,"column":16},"end":{"line":706,"column":51}},"346":{"start":{"line":707,"column":16},"end":{"line":707,"column":44}},"347":{"start":{"line":716,"column":8},"end":{"line":716,"column":28}},"348":{"start":{"line":717,"column":8},"end":{"line":723,"column":9}},"349":{"start":{"line":718,"column":12},"end":{"line":721,"column":13}},"350":{"start":{"line":719,"column":16},"end":{"line":719,"column":85}},"351":{"start":{"line":720,"column":16},"end":{"line":720,"column":49}},"352":{"start":{"line":722,"column":12},"end":{"line":722,"column":25}},"353":{"start":{"line":727,"column":0},"end":{"line":727,"column":33}}},"branchMap":{"1":{"line":10,"type":"cond-expr","locations":[{"start":{"line":10,"column":48},"end":{"line":10,"column":64}},{"start":{"line":10,"column":67},"end":{"line":10,"column":80}}]},"2":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":18},"end":{"line":66,"column":25}},{"start":{"line":66,"column":29},"end":{"line":66,"column":31}}]},"3":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":8}},{"start":{"line":68,"column":8},"end":{"line":68,"column":8}}]},"4":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":72,"column":8}},{"start":{"line":72,"column":8},"end":{"line":72,"column":8}}]},"5":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":11},"end":{"line":72,"column":18}},{"start":{"line":72,"column":22},"end":{"line":72,"column":27}}]},"6":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":21},"end":{"line":84,"column":34}},{"start":{"line":84,"column":38},"end":{"line":84,"column":40}}]},"7":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":8},"end":{"line":87,"column":8}},{"start":{"line":87,"column":8},"end":{"line":87,"column":8}}]},"8":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":11},"end":{"line":87,"column":25}},{"start":{"line":87,"column":29},"end":{"line":87,"column":41}}]},"9":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":12},"end":{"line":88,"column":12}},{"start":{"line":88,"column":12},"end":{"line":88,"column":12}}]},"10":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":19},"end":{"line":90,"column":19}},{"start":{"line":90,"column":19},"end":{"line":90,"column":19}}]},"11":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":8},"end":{"line":115,"column":8}},{"start":{"line":115,"column":8},"end":{"line":115,"column":8}}]},"12":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":12},"end":{"line":117,"column":12}},{"start":{"line":117,"column":12},"end":{"line":117,"column":12}}]},"13":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":12},"end":{"line":129,"column":12}},{"start":{"line":129,"column":12},"end":{"line":129,"column":12}}]},"14":{"line":129,"type":"binary-expr","locations":[{"start":{"line":129,"column":15},"end":{"line":129,"column":19}},{"start":{"line":129,"column":23},"end":{"line":129,"column":44}}]},"15":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":8},"end":{"line":138,"column":8}},{"start":{"line":138,"column":8},"end":{"line":138,"column":8}}]},"16":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":11},"end":{"line":138,"column":20}},{"start":{"line":138,"column":24},"end":{"line":138,"column":40}}]},"17":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":8},"end":{"line":143,"column":8}},{"start":{"line":143,"column":8},"end":{"line":143,"column":8}}]},"18":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":8},"end":{"line":146,"column":8}},{"start":{"line":146,"column":8},"end":{"line":146,"column":8}}]},"19":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":8},"end":{"line":152,"column":8}},{"start":{"line":152,"column":8},"end":{"line":152,"column":8}}]},"20":{"line":152,"type":"binary-expr","locations":[{"start":{"line":152,"column":11},"end":{"line":152,"column":18}},{"start":{"line":152,"column":22},"end":{"line":152,"column":61}}]},"21":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":8},"end":{"line":156,"column":8}},{"start":{"line":156,"column":8},"end":{"line":156,"column":8}}]},"22":{"line":156,"type":"binary-expr","locations":[{"start":{"line":156,"column":11},"end":{"line":156,"column":25}},{"start":{"line":156,"column":29},"end":{"line":156,"column":40}},{"start":{"line":156,"column":44},"end":{"line":156,"column":60}},{"start":{"line":156,"column":64},"end":{"line":156,"column":77}}]},"23":{"line":176,"type":"cond-expr","locations":[{"start":{"line":176,"column":48},"end":{"line":176,"column":63}},{"start":{"line":176,"column":66},"end":{"line":176,"column":73}}]},"24":{"line":185,"type":"switch","locations":[{"start":{"line":186,"column":16},"end":{"line":256,"column":17}},{"start":{"line":257,"column":16},"end":{"line":273,"column":17}},{"start":{"line":274,"column":16},"end":{"line":282,"column":17}},{"start":{"line":283,"column":16},"end":{"line":297,"column":17}},{"start":{"line":298,"column":16},"end":{"line":301,"column":17}}]},"25":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":20},"end":{"line":187,"column":20}},{"start":{"line":187,"column":20},"end":{"line":187,"column":20}}]},"26":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":24},"end":{"line":188,"column":24}},{"start":{"line":188,"column":24},"end":{"line":188,"column":24}}]},"27":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":20},"end":{"line":199,"column":20}},{"start":{"line":199,"column":20},"end":{"line":199,"column":20}}]},"28":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":24},"end":{"line":205,"column":24}},{"start":{"line":205,"column":24},"end":{"line":205,"column":24}}]},"29":{"line":235,"type":"if","locations":[{"start":{"line":235,"column":28},"end":{"line":235,"column":28}},{"start":{"line":235,"column":28},"end":{"line":235,"column":28}}]},"30":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":28},"end":{"line":238,"column":28}},{"start":{"line":238,"column":28},"end":{"line":238,"column":28}}]},"31":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":28},"end":{"line":243,"column":28}},{"start":{"line":243,"column":28},"end":{"line":243,"column":28}}]},"32":{"line":246,"type":"if","locations":[{"start":{"line":246,"column":28},"end":{"line":246,"column":28}},{"start":{"line":246,"column":28},"end":{"line":246,"column":28}}]},"33":{"line":295,"type":"cond-expr","locations":[{"start":{"line":295,"column":50},"end":{"line":295,"column":65}},{"start":{"line":295,"column":68},"end":{"line":295,"column":82}}]},"34":{"line":305,"type":"binary-expr","locations":[{"start":{"line":305,"column":58},"end":{"line":305,"column":61}},{"start":{"line":305,"column":65},"end":{"line":305,"column":76}}]},"35":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":12},"end":{"line":306,"column":12}},{"start":{"line":306,"column":12},"end":{"line":306,"column":12}}]},"36":{"line":311,"type":"if","locations":[{"start":{"line":311,"column":12},"end":{"line":311,"column":12}},{"start":{"line":311,"column":12},"end":{"line":311,"column":12}}]},"37":{"line":314,"type":"cond-expr","locations":[{"start":{"line":314,"column":31},"end":{"line":314,"column":74}},{"start":{"line":314,"column":77},"end":{"line":314,"column":82}}]},"38":{"line":330,"type":"if","locations":[{"start":{"line":330,"column":8},"end":{"line":330,"column":8}},{"start":{"line":330,"column":8},"end":{"line":330,"column":8}}]},"39":{"line":335,"type":"if","locations":[{"start":{"line":335,"column":8},"end":{"line":335,"column":8}},{"start":{"line":335,"column":8},"end":{"line":335,"column":8}}]},"40":{"line":339,"type":"if","locations":[{"start":{"line":339,"column":8},"end":{"line":339,"column":8}},{"start":{"line":339,"column":8},"end":{"line":339,"column":8}}]},"41":{"line":343,"type":"if","locations":[{"start":{"line":343,"column":16},"end":{"line":343,"column":16}},{"start":{"line":343,"column":16},"end":{"line":343,"column":16}}]},"42":{"line":349,"type":"if","locations":[{"start":{"line":349,"column":8},"end":{"line":349,"column":8}},{"start":{"line":349,"column":8},"end":{"line":349,"column":8}}]},"43":{"line":357,"type":"if","locations":[{"start":{"line":357,"column":8},"end":{"line":357,"column":8}},{"start":{"line":357,"column":8},"end":{"line":357,"column":8}}]},"44":{"line":389,"type":"if","locations":[{"start":{"line":389,"column":8},"end":{"line":389,"column":8}},{"start":{"line":389,"column":8},"end":{"line":389,"column":8}}]},"45":{"line":392,"type":"if","locations":[{"start":{"line":392,"column":8},"end":{"line":392,"column":8}},{"start":{"line":392,"column":8},"end":{"line":392,"column":8}}]},"46":{"line":396,"type":"binary-expr","locations":[{"start":{"line":396,"column":18},"end":{"line":396,"column":25}},{"start":{"line":396,"column":29},"end":{"line":396,"column":31}}]},"47":{"line":397,"type":"binary-expr","locations":[{"start":{"line":397,"column":25},"end":{"line":397,"column":39}},{"start":{"line":397,"column":43},"end":{"line":397,"column":47}}]},"48":{"line":398,"type":"cond-expr","locations":[{"start":{"line":398,"column":70},"end":{"line":398,"column":94}},{"start":{"line":398,"column":97},"end":{"line":398,"column":101}}]},"49":{"line":400,"type":"binary-expr","locations":[{"start":{"line":400,"column":28},"end":{"line":400,"column":45}},{"start":{"line":400,"column":49},"end":{"line":400,"column":51}}]},"50":{"line":401,"type":"binary-expr","locations":[{"start":{"line":401,"column":30},"end":{"line":401,"column":49}},{"start":{"line":401,"column":53},"end":{"line":401,"column":55}}]},"51":{"line":403,"type":"binary-expr","locations":[{"start":{"line":403,"column":31},"end":{"line":403,"column":51}},{"start":{"line":403,"column":55},"end":{"line":403,"column":72}}]},"52":{"line":404,"type":"binary-expr","locations":[{"start":{"line":404,"column":32},"end":{"line":404,"column":53}},{"start":{"line":404,"column":57},"end":{"line":404,"column":75}}]},"53":{"line":405,"type":"binary-expr","locations":[{"start":{"line":405,"column":28},"end":{"line":405,"column":45}},{"start":{"line":405,"column":49},"end":{"line":405,"column":100}}]},"54":{"line":406,"type":"binary-expr","locations":[{"start":{"line":406,"column":26},"end":{"line":406,"column":41}},{"start":{"line":406,"column":45},"end":{"line":406,"column":82}}]},"55":{"line":408,"type":"if","locations":[{"start":{"line":408,"column":8},"end":{"line":408,"column":8}},{"start":{"line":408,"column":8},"end":{"line":408,"column":8}}]},"56":{"line":437,"type":"if","locations":[{"start":{"line":437,"column":8},"end":{"line":437,"column":8}},{"start":{"line":437,"column":8},"end":{"line":437,"column":8}}]},"57":{"line":437,"type":"binary-expr","locations":[{"start":{"line":437,"column":11},"end":{"line":437,"column":31}},{"start":{"line":437,"column":35},"end":{"line":437,"column":67}}]},"58":{"line":442,"type":"if","locations":[{"start":{"line":442,"column":8},"end":{"line":442,"column":8}},{"start":{"line":442,"column":8},"end":{"line":442,"column":8}}]},"59":{"line":446,"type":"if","locations":[{"start":{"line":446,"column":8},"end":{"line":446,"column":8}},{"start":{"line":446,"column":8},"end":{"line":446,"column":8}}]},"60":{"line":450,"type":"if","locations":[{"start":{"line":450,"column":8},"end":{"line":450,"column":8}},{"start":{"line":450,"column":8},"end":{"line":450,"column":8}}]},"61":{"line":451,"type":"if","locations":[{"start":{"line":451,"column":12},"end":{"line":451,"column":12}},{"start":{"line":451,"column":12},"end":{"line":451,"column":12}}]},"62":{"line":454,"type":"if","locations":[{"start":{"line":454,"column":12},"end":{"line":454,"column":12}},{"start":{"line":454,"column":12},"end":{"line":454,"column":12}}]},"63":{"line":458,"type":"if","locations":[{"start":{"line":458,"column":15},"end":{"line":458,"column":15}},{"start":{"line":458,"column":15},"end":{"line":458,"column":15}}]},"64":{"line":458,"type":"binary-expr","locations":[{"start":{"line":458,"column":18},"end":{"line":458,"column":62}},{"start":{"line":458,"column":66},"end":{"line":458,"column":170}}]},"65":{"line":459,"type":"if","locations":[{"start":{"line":459,"column":12},"end":{"line":459,"column":12}},{"start":{"line":459,"column":12},"end":{"line":459,"column":12}}]},"66":{"line":464,"type":"if","locations":[{"start":{"line":464,"column":12},"end":{"line":464,"column":12}},{"start":{"line":464,"column":12},"end":{"line":464,"column":12}}]},"67":{"line":482,"type":"if","locations":[{"start":{"line":482,"column":8},"end":{"line":482,"column":8}},{"start":{"line":482,"column":8},"end":{"line":482,"column":8}}]},"68":{"line":486,"type":"if","locations":[{"start":{"line":486,"column":8},"end":{"line":486,"column":8}},{"start":{"line":486,"column":8},"end":{"line":486,"column":8}}]},"69":{"line":486,"type":"binary-expr","locations":[{"start":{"line":486,"column":11},"end":{"line":486,"column":23}},{"start":{"line":486,"column":27},"end":{"line":486,"column":47}}]},"70":{"line":494,"type":"if","locations":[{"start":{"line":494,"column":8},"end":{"line":494,"column":8}},{"start":{"line":494,"column":8},"end":{"line":494,"column":8}}]},"71":{"line":497,"type":"if","locations":[{"start":{"line":497,"column":16},"end":{"line":497,"column":16}},{"start":{"line":497,"column":16},"end":{"line":497,"column":16}}]},"72":{"line":501,"type":"if","locations":[{"start":{"line":501,"column":16},"end":{"line":501,"column":16}},{"start":{"line":501,"column":16},"end":{"line":501,"column":16}}]},"73":{"line":524,"type":"if","locations":[{"start":{"line":524,"column":8},"end":{"line":524,"column":8}},{"start":{"line":524,"column":8},"end":{"line":524,"column":8}}]},"74":{"line":543,"type":"if","locations":[{"start":{"line":543,"column":12},"end":{"line":543,"column":12}},{"start":{"line":543,"column":12},"end":{"line":543,"column":12}}]},"75":{"line":555,"type":"if","locations":[{"start":{"line":555,"column":8},"end":{"line":555,"column":8}},{"start":{"line":555,"column":8},"end":{"line":555,"column":8}}]},"76":{"line":556,"type":"if","locations":[{"start":{"line":556,"column":12},"end":{"line":556,"column":12}},{"start":{"line":556,"column":12},"end":{"line":556,"column":12}}]},"77":{"line":558,"type":"if","locations":[{"start":{"line":558,"column":16},"end":{"line":558,"column":16}},{"start":{"line":558,"column":16},"end":{"line":558,"column":16}}]},"78":{"line":562,"type":"if","locations":[{"start":{"line":562,"column":15},"end":{"line":562,"column":15}},{"start":{"line":562,"column":15},"end":{"line":562,"column":15}}]},"79":{"line":563,"type":"if","locations":[{"start":{"line":563,"column":12},"end":{"line":563,"column":12}},{"start":{"line":563,"column":12},"end":{"line":563,"column":12}}]},"80":{"line":565,"type":"if","locations":[{"start":{"line":565,"column":16},"end":{"line":565,"column":16}},{"start":{"line":565,"column":16},"end":{"line":565,"column":16}}]},"81":{"line":572,"type":"cond-expr","locations":[{"start":{"line":572,"column":32},"end":{"line":572,"column":53}},{"start":{"line":572,"column":56},"end":{"line":572,"column":78}}]},"82":{"line":581,"type":"if","locations":[{"start":{"line":581,"column":12},"end":{"line":581,"column":12}},{"start":{"line":581,"column":12},"end":{"line":581,"column":12}}]},"83":{"line":585,"type":"if","locations":[{"start":{"line":585,"column":16},"end":{"line":585,"column":16}},{"start":{"line":585,"column":16},"end":{"line":585,"column":16}}]},"84":{"line":595,"type":"if","locations":[{"start":{"line":595,"column":12},"end":{"line":595,"column":12}},{"start":{"line":595,"column":12},"end":{"line":595,"column":12}}]},"85":{"line":606,"type":"if","locations":[{"start":{"line":606,"column":12},"end":{"line":606,"column":12}},{"start":{"line":606,"column":12},"end":{"line":606,"column":12}}]},"86":{"line":608,"type":"if","locations":[{"start":{"line":608,"column":16},"end":{"line":608,"column":16}},{"start":{"line":608,"column":16},"end":{"line":608,"column":16}}]},"87":{"line":620,"type":"if","locations":[{"start":{"line":620,"column":12},"end":{"line":620,"column":12}},{"start":{"line":620,"column":12},"end":{"line":620,"column":12}}]},"88":{"line":621,"type":"if","locations":[{"start":{"line":621,"column":16},"end":{"line":621,"column":16}},{"start":{"line":621,"column":16},"end":{"line":621,"column":16}}]},"89":{"line":629,"type":"if","locations":[{"start":{"line":629,"column":8},"end":{"line":629,"column":8}},{"start":{"line":629,"column":8},"end":{"line":629,"column":8}}]},"90":{"line":636,"type":"if","locations":[{"start":{"line":636,"column":8},"end":{"line":636,"column":8}},{"start":{"line":636,"column":8},"end":{"line":636,"column":8}}]},"91":{"line":650,"type":"if","locations":[{"start":{"line":650,"column":8},"end":{"line":650,"column":8}},{"start":{"line":650,"column":8},"end":{"line":650,"column":8}}]},"92":{"line":655,"type":"if","locations":[{"start":{"line":655,"column":8},"end":{"line":655,"column":8}},{"start":{"line":655,"column":8},"end":{"line":655,"column":8}}]},"93":{"line":666,"type":"if","locations":[{"start":{"line":666,"column":8},"end":{"line":666,"column":8}},{"start":{"line":666,"column":8},"end":{"line":666,"column":8}}]},"94":{"line":668,"type":"cond-expr","locations":[{"start":{"line":668,"column":47},"end":{"line":668,"column":51}},{"start":{"line":668,"column":54},"end":{"line":668,"column":61}}]},"95":{"line":669,"type":"binary-expr","locations":[{"start":{"line":669,"column":28},"end":{"line":669,"column":42}},{"start":{"line":669,"column":46},"end":{"line":669,"column":50}}]},"96":{"line":677,"type":"if","locations":[{"start":{"line":677,"column":8},"end":{"line":677,"column":8}},{"start":{"line":677,"column":8},"end":{"line":677,"column":8}}]},"97":{"line":677,"type":"binary-expr","locations":[{"start":{"line":677,"column":11},"end":{"line":677,"column":18}},{"start":{"line":677,"column":22},"end":{"line":677,"column":59}}]},"98":{"line":701,"type":"if","locations":[{"start":{"line":701,"column":8},"end":{"line":701,"column":8}},{"start":{"line":701,"column":8},"end":{"line":701,"column":8}}]},"99":{"line":702,"type":"if","locations":[{"start":{"line":702,"column":12},"end":{"line":702,"column":12}},{"start":{"line":702,"column":12},"end":{"line":702,"column":12}}]},"100":{"line":705,"type":"if","locations":[{"start":{"line":705,"column":12},"end":{"line":705,"column":12}},{"start":{"line":705,"column":12},"end":{"line":705,"column":12}}]},"101":{"line":717,"type":"if","locations":[{"start":{"line":717,"column":8},"end":{"line":717,"column":8}},{"start":{"line":717,"column":8},"end":{"line":717,"column":8}}]},"102":{"line":718,"type":"if","locations":[{"start":{"line":718,"column":12},"end":{"line":718,"column":12}},{"start":{"line":718,"column":12},"end":{"line":718,"column":12}}]}},"code":["\"use strict\";","","const ChildProcess = require(\"child_process\");","const Constants = require(\"../Constants\");","const Dgram = require(\"dgram\");","const DNS = require(\"dns\");","const OPCodes = Constants.VoiceOPCodes;","const Piper = require(\"./Piper\");","const VoiceDataStream = require(\"./VoiceDataStream\");","var WebSocket = typeof window !== \"undefined\" ? window.WebSocket : require(\"ws\");","","var EventEmitter;","try {","    EventEmitter = require(\"eventemitter3\");","} catch(err) {","    EventEmitter = require(\"events\").EventEmitter;","}","var NodeOpus;","try {","    NodeOpus = require(\"node-opus\");","} catch(err) { // eslint-disable no-empty","}","var OpusScript;","try {","    OpusScript = require(\"opusscript\");","} catch(err) { // eslint-disable no-empty","}","var Sodium = false;","var NaCl = false;","try {","    Sodium = require(\"sodium-native\");","} catch(err) {","    try {","        NaCl = require(\"tweetnacl\");","    } catch(err) { // eslint-disable no-empty","    }","}","try {","    WebSocket = require(\"uws\");","} catch(err) { // eslint-disable no-empty","}","","const MAX_FRAME_SIZE = 1276 * 3;","const ENCRYPTION_MODE = \"xsalsa20_poly1305\";","","/**","* Represents a voice connection","* @extends EventEmitter","* @prop {String} id The ID of the voice connection (guild ID)","* @prop {String} channelID The ID of the voice connection's current channel","* @prop {Boolean} connecting Whether the voice connection is connecting","* @prop {Boolean} ready Whether the voice connection is ready","* @prop {Boolean} playing Whether the voice connection is playing something","* @prop {Boolean} paused Whether the voice connection is paused","* @prop {Number} volume The current volume level of the connection","* @prop {Object?} current The state of the currently playing stream","* @prop {Number} current.startTime The timestamp of the start of the current stream","* @prop {Number} current.playTime How long the current stream has been playing for, in milliseconds","* @prop {Number} current.pausedTimestamp The timestamp of the most recent pause","* @prop {Number} current.pausedTime How long the current stream has been paused for, in milliseconds","* @prop {Options} current.options The custom options for the current stream","*/","class VoiceConnection extends EventEmitter {","    constructor(id, options) {","        super();","        options = options || {};","","        if(typeof window !== \"undefined\") {","            throw new Error(\"Voice is not supported in browsers at this time\");","        }","","        if(!Sodium && !NaCl) {","            throw new Error(\"Error loading tweetnacl/libsodium, voice not available\");","        }","","        this.id = id;","        this.samplingRate = 48000;","        this.channels = 2;","        this.frameDuration = 20;","        this.frameSize = this.samplingRate * this.frameDuration / 1000;","        this.pcmSize = this.frameSize * this.channels * 2;","        this.bitrate = 64000;","        this.shared = !!options.shared;","        this.shard = options.shard || {};","        this.opusOnly = !!options.opusOnly;","","        if(!this.opusOnly && !this.shared) {","            if(NodeOpus) {","                this.opus = new NodeOpus.OpusEncoder(this.samplingRate, this.channels);","            } else if(OpusScript) {","                this.emit(\"debug\", \"node-opus not found, falling back to opusscript\");","                this.opus = new OpusScript(this.samplingRate, this.channels, OpusScript.Application.AUDIO);","                this.opus.setBitrate(this.bitrate);","            } else {","                throw new Error(\"No opus encoder found, playing non-opus audio will not work.\");","            }","        }","","        this.channelID = null;","        this.paused = true;","        this.speaking = false;","        this.sequence = 0;","        this.timestamp = 0;","        this.ssrcUserMap = {};","        this.converterCommand = null;","","        this.nonce = new Buffer(24);","        this.nonce.fill(0);","","        this.packetBuffer = new Buffer(12 + 16 + MAX_FRAME_SIZE);","        this.packetBuffer.fill(0);","        this.packetBuffer[0] = 0x80;","        this.packetBuffer[1] = 0x78;","","        if(!options.shared) {","            var pick = this.pickCommand();","            if(pick instanceof Error) {","                /**","                * Fired when the voice connection encounters an error. This event should be handled by users","                * @event VoiceConnection#error","                * @prop {Error} err The error object","                */","                this.emit(\"error\", pick);","            }","","            this.piper = new Piper(this.converterCommand, this.opus);","            this.piper.on(\"error\", (e) => this.emit(\"error\", e));","","            if(pick && this.converterCommand) {","                this.piper.libopus = false;","            }","        }","","        this._send = this._send.bind(this);","    }","","    _destroy() {","        if(this.opus && this.opus.delete) {","            this.opus.delete();","            delete this.opus;","        }","        delete this.piper;","        if(this.receiveStreamOpus) {","            this.receiveStreamOpus.destroy();","        }","        if(this.receiveStreamPCM) {","            this.receiveStreamPCM.destroy();","        }","    }","","    connect(data) {","        if(this.ws && this.ws.readyState !== WebSocket.CLOSED) {","            this.disconnect(undefined, true);","            return setTimeout(() => this.connect(data), 500);","        }","        if(!data.endpoint || !data.token || !data.session_id || !data.user_id) {","            this.disconnect(new Error(\"Malformed voice server update: \" + JSON.stringify(data)), false);","            return;","        }","        this.channelID = data.channel_id;","        this.endpoint = data.endpoint.split(\":\")[0];","        this.ws = new WebSocket(\"wss://\" + this.endpoint);","        /**","        * Fired when stuff happens and gives more info","        * @event VoiceConnection#debug","        * @prop {String} message The debug message","        */","        this.emit(\"debug\", \"Connecting to WS: wss://\" + this.endpoint);","        this.ws.on(\"open\", () => {","            /**","            * Fired when the voice connection connects","            * @event VoiceConnection#connect","            */","            this.emit(\"connect\");","            this.sendWS(OPCodes.IDENTIFY, {","                server_id: this.id === \"call\" ? data.channel_id : this.id,","                user_id: data.user_id,","                session_id: data.session_id,","                token: data.token","            });","        });","        this.ws.on(\"message\", (m) => {","            var packet = JSON.parse(m);","            this.emit(\"debug\", \"Rec: \" + JSON.stringify(packet));","            switch(packet.op) {","                case OPCodes.HELLO: {","                    if(packet.d.heartbeat_interval > 0) {","                        if(this.heartbeatInterval) {","                            clearInterval(this.heartbeatInterval);","                        }","                        this.heartbeatInterval = setInterval(() => {","                            this.heartbeat();","                        }, packet.d.heartbeat_interval);","                        this.heartbeat();","                    }","                    this.emit(\"debug\", JSON.stringify(packet));","                    this.ssrc = packet.d.ssrc;","                    this.packetBuffer.writeUIntBE(this.ssrc, 8, 4);","                    if(!~packet.d.modes.indexOf(ENCRYPTION_MODE)) {","                        throw new Error(\"No supported voice mode found\");","                    }","                    this.modes = packet.d.modes;","                    this.udpPort = packet.d.port;","                    DNS.lookup(this.endpoint, (err, address) => { // RIP DNS","                        if(err) {","                            this.emit(\"error\", err);","                            return;","                        }","","                        this.udpIP = address;","","                        this.emit(\"debug\", \"Connecting to UDP: \" + this.udpIP + \":\" + this.udpPort);","","                        this.udpSocket = Dgram.createSocket(\"udp4\");","                        this.udpSocket.once(\"message\", (packet) => {","                            this.emit(\"debug\", packet.toString());","                            var localIP = \"\";","                            var i = 3;","                            while(++i < packet.indexOf(0, i)) {","                                localIP += String.fromCharCode(packet[i]);","                            }","                            var localPort = parseInt(packet.readUIntLE(packet.length - 2, 2).toString(10));","","                            this.sendWS(OPCodes.SELECT_PROTOCOL, {","                                protocol: \"udp\",","                                data: {","                                    address: localIP,","                                    port: localPort,","                                    mode: ENCRYPTION_MODE","                                }","                            });","                        });","                        this.udpSocket.on(\"error\", (err, msg) => {","                            this.emit(\"error\", err);","                            if(msg) {","                                this.emit(\"debug\", \"Voice UDP error: \" + msg);","                            }","                            if(this.ready) {","                                this.disconnect(err);","                            }","                        });","                        this.udpSocket.on(\"close\", (err) => {","                            if(err) {","                                this.emit(\"warn\", \"Voice UDP close: \" + err);","                            }","                            if(this.ready) {","                                this.disconnect(err);","                            }","                        });","                        var udpMessage = new Buffer(70);","                        udpMessage.fill(0);","                        udpMessage.writeUIntBE(this.ssrc, 0, 4);","                        this._sendPacket(udpMessage);","                    });","                    break;","                }","                case OPCodes.SESSION_DESCRIPTION: {","                    this.mode = packet.d.mode;","                    this.secret = new Uint8Array(new ArrayBuffer(packet.d.secret_key.length));","                    for (var i = 0; i < packet.d.secret_key.length; ++i) {","                        this.secret[i] = packet.d.secret_key[i];","                    }","                    this.ready = true;","                    /**","                    * Fired when the voice connection turns ready","                    * @event VoiceConnection#ready","                    */","                    this.emit(\"ready\");","                    this.paused = false;","                    this.timestamp = 0;","                    this.sequence = 0;","                    break;","                }","                case OPCodes.HEARTBEAT: {","                    /**","                    * Fired when the voice connection receives a pong","                    * @event VoiceConnection#pong","                    * @prop {Number} latency The current latency in milliseconds","                    */","                    this.emit(\"pong\", Date.now() - packet.d);","                    break;","                }","                case OPCodes.SPEAKING: {","                    this.ssrcUserMap[packet.d.ssrc] = packet.d.user_id;","                    /**","                    * Fired when a user begins speaking","                    * @event VoiceConnection#speakingStart","                    * @prop {String} userID The ID of the user that began speaking","                    */","                    /**","                    * Fired when a user stops speaking","                    * @event VoiceConnection#speakingStop","                    * @prop {String} userID The ID of the user that stopped speaking","                    */","                    this.emit(packet.d.speaking ? \"speakingStart\" : \"speakingStop\", packet.d.user_id);","                    break;","                }","                default: {","                    this.emit(\"unknown\", packet);","                    break;","                }","            }","        });","        this.ws.on(\"close\", (code, err) => {","            this.emit(\"warn\", `Voice WS close ${code}` + (err && \" | \" + err));","            if(this.ready) {","                this.disconnect(err);","            }","        });","        setTimeout(() => {","            if(this.connecting) {","                this.disconnect(new Error(\"Voice connection timeout\"));","            }","        }, this.shard.client ? this.shard.client.options.connectionTimeout : 30000);","    }","","    /**","    * Tells the voice connection to disconnect","    * @arg {Error} [err] The error, if any","    * @arg {Boolean} [reconnecting] Whether the voice connection is reconnecting or not","    */","    disconnect(error, reconnecting) {","        this.ready = false;","        this.speaking = false;","        this.timestamp = 0;","        this.sequence = 0;","","        this.stopPlaying();","","        if(reconnecting) {","            this.paused = true;","        } else {","            this.playing = false;","        }","        if(this.heartbeatInterval) {","            clearInterval(this.heartbeatInterval);","            this.heartbeatInterval = null;","        }","        if(this.udpSocket) {","            try {","                this.udpSocket.close();","            } catch(err) {","                if(err.message !== \"Not running\") {","                    this.emit(\"error\", err);","                }","            }","            this.udpSocket = null;","        }","        if(this.ws) {","            try {","                this.ws.close();","            } catch(err) {","                this.emit(\"error\", err);","            }","            this.ws = null;","        }","        if(reconnecting) {","            this.emit(\"error\", error);","        } else {","            this.channelID = null;","            this.updateVoiceState();","            /**","            * Fired when the voice connection disconnects","            * @event VoiceConnection#disconnect","            * @prop {Error?} err The error, if any","            */","            this.emit(\"disconnect\", error);","        }","    }","","    heartbeat() {","        this.sendWS(OPCodes.HEARTBEAT, Date.now());","    }","","    /**","    * Play an audio or video resource. If playing from a non-opus resource, FFMPEG should be compiled with --enable-libopus for best performance. If playing from HTTPS, FFMPEG must be compiled with --enable-openssl","    * @arg {ReadableStream | String} resource The audio or video resource, either a ReadableStream, URL, or file path","    * @arg {Object} [options] Music options","    * @arg {Boolean} [options.inlineVolume=false] Whether to enable on-the-fly volume changing. Note that enabling this leads to increased CPU usage","    * @arg {Number} [options.voiceDataTimeout=2000] Timeout when waiting for voice data (-1 for no timeout)","    * @arg {Array<String>} [options.inputArgs] Additional input parameters to pass to ffmpeg/avconv (before -i)","    * @arg {Array<String>} [options.encoderArgs] Additional encoder parameters to pass to ffmpeg/avconv (after -i)","    * @arg {String} [options.format] The format of the resource. If null, FFmpeg will attempt to guess and play the format. Available options: \"dca\", \"ogg\", \"pcm\", null","    * @arg {Number} [options.frameDuration=20] The resource opus frame duration (required for DCA/Ogg)","    * @arg {Number} [options.frameSize=2880] The resource opus frame size","    * @arg {Number} [options.sampleRate=48000] The resource audio sampling rate","    */","    play(source, options) {","        if(this.shared) {","            throw new Error(\"Cannot play stream on shared voice connection\");","        }","        if(!this.ready) {","            throw new Error(\"Not ready yet\");","        }","","        options = options || {};","        options.format = options.format || null;","        options.voiceDataTimeout = !isNaN(options.voiceDataTimeout) ? options.voiceDataTimeout : 2000;","        options.inlineVolume = !!options.inlineVolume;","        options.inputArgs = options.inputArgs || [];","        options.encoderArgs = options.encoderArgs || [];","","        options.samplingRate = options.samplingRate || this.samplingRate;","        options.frameDuration = options.frameDuration || this.frameDuration;","        options.frameSize = options.frameSize || options.samplingRate * options.frameDuration / 1000;","        options.pcmSize = options.pcmSize || options.frameSize * 2 * this.channels;","","        if(!this.piper.encode(source, options)) {","            this.emit(\"error\", new Error(\"Unable to encode source\"));","            return;","        }","","        this.ended = false;","        this.current = {","            startTime: 0, // later","            playTime: 0,","            pausedTimestamp: 0,","            pausedTime: 0,","            bufferingTicks: 0,","            options: options,","            timeout: null,","            buffer: null","        };","","        this.playing = true;","","        /**","        * Fired when the voice connection starts playing a stream","        * @event SharedStream#start","        */","        this.emit(\"start\");","","        this._send();","    }","","    _send() {","        if(!this.piper.encoding && this.piper.dataPacketCount === 0) {","            return this.stopPlaying();","        }","","        this.timestamp += this.current.options.frameSize;","        if(this.timestamp >= 4294967295) {","            this.timestamp -= 4294967295;","        }","","        if(++this.sequence >= 65536) {","            this.sequence -= 65536;","        }","","        if((this.current.buffer = this.piper.getDataPacket())) {","            if(this.current.startTime === 0) {","                this.current.startTime = Date.now();","            }","            if(this.current.bufferingTicks > 0) {","                this.current.bufferingTicks = 0;","                this.setSpeaking(true);","            }","        } else if(this.current.options.voiceDataTimeout === -1 || this.current.bufferingTicks < this.current.options.voiceDataTimeout / this.current.options.frameDuration) { // wait for data","            if(++this.current.bufferingTicks <= 0) {","                this.setSpeaking(false);","            }","            this.current.pausedTime += 4 * this.current.options.frameDuration;","            this.timestamp += 3 * this.current.options.frameSize;","            if(this.timestamp >= 4294967295) {","                this.timestamp -= 4294967295;","            }","            this.current.timeout = setTimeout(this._send, 4 * this.current.options.frameDuration);","            return;","        } else {","            return this.stopPlaying();","        }","","        this._sendPacket(this._createPacket(this.current.buffer));","        this.current.playTime += this.current.options.frameDuration;","        this.current.timeout = setTimeout(this._send, this.current.startTime + this.current.pausedTime + this.current.playTime - Date.now());","    }","","    /**","    * Stop the bot from sending audio","    */","    stopPlaying() {","        if(this.ended) {","            return;","        }","        this.ended = true;","        if(this.current && this.current.timeout) {","            clearTimeout(this.current.timeout);","            this.current.timeout = null;","        }","        this.current = null;","        this.piper.stop();","        this.piper.resetPackets();","","        if(this.secret) {","            for(var i = 0; i < 5; i++) {","                this.timestamp += this.frameSize;","                if(this.timestamp >= 4294967295) {","                    this.timestamp -= 4294967295;","                }","","                if(++this.sequence >= 65536) {","                    this.sequence -= 65536;","                }","","                this._sendPacket(this._createPacket(new Buffer([0xF8, 0xFF, 0xFE])));","            }","        }","        this.setSpeaking(this.playing = false);","","        /**","        * Fired when the voice connection finishes playing a stream","        * @event VoiceConnection#end","        */","        this.emit(\"end\");","    }","","    _createPacket(_buffer) {","        this.packetBuffer.writeUIntBE(this.sequence, 2, 2);","        this.packetBuffer.writeUIntBE(this.timestamp, 4, 4);","","        this.packetBuffer.copy(this.nonce, 0, 0, 12);","","        var len = _buffer.length;","        if(!NaCl) {","            Sodium.crypto_secretbox_easy(this.packetBuffer.slice(12), _buffer, this.nonce, this.secret);","            len += Sodium.crypto_secretbox_MACBYTES;","        } else {","            var buffer = NaCl.secretbox(_buffer, this.nonce, this.secret);","            len += NaCl.lowlevel.crypto_secretbox_BOXZEROBYTES;","            this.packetBuffer.fill(0, 12, 12 + len);","            for (var i = 0; i < len; ++i) {","                this.packetBuffer[12 + i] = buffer[i];","            }","        }","","        return this.packetBuffer.slice(0, 12 + len);","    }","","    _sendPacket(packet) {","        try {","            this.udpSocket.send(packet, 0, packet.length, this.udpPort, this.udpIP);","        } catch(e) {","            if(this.udpSocket) {","                this.emit(\"error\", e);","            }","        }","    }","","    /**","    * Generate a receive stream for the voice connection.","    * @arg {String} [type=\"pcm\"] The desired vocie data type, either \"opus\" or \"pcm\"","    * @returns {VoiceDataStream}","    */","    receive(type) {","        if(type === \"pcm\") {","            if(!this.receiveStreamPCM) {","                this.receiveStreamPCM = new VoiceDataStream(type);","                if(!this.receiveStreamOpus) {","                    this.registerReceiveEventHandler();","                }","            }","        } else if(type === \"opus\") {","            if(!this.receiveStreamOpus) {","                this.receiveStreamOpus = new VoiceDataStream(type);","                if(!this.receiveStreamPCM) {","                    this.registerReceiveEventHandler();","                }","            }","        } else {","            throw new Error(`Unsupported voice data type: ${type}`);","        }","        return type === \"pcm\" ? this.receiveStreamPCM : this.receiveStreamOpus;","    }","","    registerReceiveEventHandler() {","        this.udpSocket.on(\"message\", (msg) => {","            var nonce = new Buffer(24);","            nonce.fill(0);","            msg.copy(nonce, 0, 0, 12);","            var data;","            if(!NaCl) {","                data = new Buffer(msg.length - 12 - Sodium.crypto_secretbox_MACBYTES);","                Sodium.crypto_secretbox_open_easy(data, msg.slice(12), this.nonce, this.secret);","            } else {","                if(!(data = NaCl.secretbox_open(msg.slice(12), nonce, this.secret))) {","                    /**","                    * Fired to warn of something weird but non-breaking happening","                    * @event VoiceConnection#warn","                    * @prop {String} message The warning message","                    */","                    this.emit(\"warn\", \"Failed to decrypt received packet\");","                    return;","                }","            }","            if(this.receiveStreamOpus) {","                /**","                * Fired when a voice data packet is received","                * @event VoiceDataStream#data","                * @prop {Buffer} data The voice data","                * @prop {String} userID The user who sent the voice packet","                * @prop {Number} timestamp The intended timestamp of the packet","                * @prop {Number} sequence The intended sequence number of the packet","                */","                this.receiveStreamOpus.emit(\"data\", data, this.ssrcUserMap[nonce.readUIntBE(8, 4)], nonce.readUIntBE(4, 4), nonce.readUIntBE(2, 2));","            }","            if(this.receiveStreamPCM) {","                data = this.opus.decode(data, this.frameSize);","                if(!data) {","                    return this.emit(\"warn\", \"Failed to decode received packet\");","                }","                this.receiveStreamPCM.emit(\"data\", data, this.ssrcUserMap[nonce.readUIntBE(8, 4)], nonce.readUIntBE(4, 4), nonce.readUIntBE(2, 2));","            }","        });","    }","","    pickCommand() {","        var tenative;","        for(var command of [\"./ffmpeg\", \"./avconv\", \"ffmpeg\", \"avconv\"]) {","            var res = ChildProcess.spawnSync(command, [\"-encoders\"]);","            if(!res.error) {","                if(!res.stdout.toString().includes(\"libopus\")) {","                    tenative = command;","                    continue;","                }","                this.converterCommand = command;","                return;","            }","        }","        if(tenative) {","            return (this.converterCommand = tenative) + \" does not have libopus support. Non-opus playback may be laggy\";","        }","        throw new Error(\"Neither ffmpeg nor avconv was found. Make sure you installed either one, and check that it is in your PATH\");","    }","","    setSpeaking(value) {","        if((value = !!value) != this.speaking) {","            this.speaking = value;","            this.sendWS(OPCodes.SPEAKING, {","                speaking: value,","                delay: 0","            });","        }","    }","","    /**","    * Switch the voice channel the bot is in. The channel to switch to must be in the same guild as the current voice channel","    * @arg {String} channelID The ID of the voice channel","    */","    switchChannel(channelID, reactive) {","        if(this.channelID === channelID) {","            return;","        }","","        this.channelID = channelID;","        if(!reactive) {","            this.updateVoiceState();","        }","    }","","    /**","    * Update the bot's voice state","    * @arg {Boolean} selfMute Whether the bot muted itself or not (audio sending is unaffected)","    * @arg {Boolean} selfDeaf Whether the bot deafened itself or not (audio receiving is unaffected)","    */","    updateVoiceState(selfMute, selfDeaf) {","        if(this.shard.sendWS) {","            this.shard.sendWS(Constants.GatewayOPCodes.VOICE_STATE_UPDATE, {","                guild_id: this.id === \"call\" ? null : this.id,","                channel_id: this.channelID || null,","                self_mute: !!selfMute,","                self_deaf: !!selfDeaf","            });","        }","    }","","    sendWS(op, data) {","        if(this.ws && this.ws.readyState === WebSocket.OPEN) {","            data = JSON.stringify({op: op, d: data});","            this.ws.send(data);","            this.emit(\"debug\", data);","        }","    }","","    get volume() {","        return this.piper.volumeLevel;","    }","","    /**","    * Modify the output volume of the current stream (if inlineVolume is enabled for the current stream)","    * @arg {Number} [volume=1.0] The desired volume. 0.0 is 0%, 1.0 is 100%, 2.0 is 200%, etc. It is not recommended to go above 2.0","    */","    setVolume(volume) {","        this.piper.setVolume(volume);","    }","","    /**","    * Pause sending audio (if playing)","    */","    pause() {","        this.paused = true;","        if(this.current) {","            if(!this.current.pausedTimestamp) {","                this.current.pausedTimestamp = Date.now();","            }","            if(this.current.timeout) {","                clearTimeout(this.current.timeout);","                this.current.timeout = null;","            }","        }","    }","","    /**","    * Resume sending audio (if paused)","    */","    resume() {","        this.paused = false;","        if(this.current) {","            if(this.current.pausedTimestamp) {","                this.current.pausedTime += Date.now() - this.current.pausedTimestamp;","                this.current.pausedTimestamp = 0;","            }","            this._send();","        }","    }","}","","module.exports = VoiceConnection;",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"12":1,"13":1,"14":1,"16":1,"18":1,"19":1,"20":1,"23":1,"24":1,"25":1,"28":1,"29":1,"30":1,"31":1,"33":1,"34":1,"38":1,"39":1,"43":1,"44":1,"65":0,"66":0,"68":0,"69":0,"72":0,"73":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"95":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"107":0,"108":0,"110":0,"111":0,"112":0,"113":0,"115":0,"116":0,"117":0,"123":0,"126":0,"127":0,"129":0,"130":0,"134":0,"138":0,"139":0,"140":0,"142":0,"143":0,"144":0,"146":0,"147":0,"152":0,"153":0,"154":0,"156":0,"157":0,"158":0,"160":0,"161":0,"162":0,"168":0,"169":0,"174":0,"175":0,"182":0,"183":0,"184":0,"185":0,"187":0,"188":0,"189":0,"191":0,"192":0,"194":0,"196":0,"197":0,"198":0,"199":0,"200":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"210":0,"212":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"222":0,"224":0,"233":0,"234":0,"235":0,"236":0,"238":0,"239":0,"242":0,"243":0,"244":0,"246":0,"247":0,"250":0,"251":0,"252":0,"253":0,"255":0,"258":0,"259":0,"260":0,"261":0,"263":0,"268":0,"269":0,"270":0,"271":0,"272":0,"280":0,"281":0,"284":0,"295":0,"296":0,"299":0,"300":0,"304":0,"305":0,"306":0,"307":0,"310":0,"311":0,"312":0,"323":0,"324":0,"325":0,"326":0,"328":0,"330":0,"331":0,"333":0,"335":0,"336":0,"337":0,"339":0,"340":0,"341":0,"343":0,"344":0,"347":0,"349":0,"350":0,"351":0,"353":0,"355":0,"357":0,"358":0,"360":0,"361":0,"367":0,"372":0,"389":0,"390":0,"392":0,"393":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"403":0,"404":0,"405":0,"406":0,"408":0,"409":0,"410":0,"413":0,"414":0,"425":0,"431":0,"433":0,"437":0,"438":0,"441":0,"442":0,"443":0,"446":0,"447":0,"450":0,"451":0,"452":0,"454":0,"455":0,"456":0,"458":0,"459":0,"460":0,"462":0,"463":0,"464":0,"465":0,"467":0,"468":0,"470":0,"473":0,"474":0,"475":0,"482":0,"483":0,"485":0,"486":0,"487":0,"488":0,"490":0,"491":0,"492":0,"494":0,"495":0,"496":0,"497":0,"498":0,"501":0,"502":0,"505":0,"508":0,"514":0,"518":0,"519":0,"521":0,"523":0,"524":0,"525":0,"526":0,"528":0,"529":0,"530":0,"531":0,"532":0,"536":0,"540":0,"541":0,"543":0,"544":0,"555":0,"556":0,"557":0,"558":0,"559":0,"562":0,"563":0,"564":0,"565":0,"566":0,"570":0,"572":0,"576":0,"577":0,"578":0,"579":0,"580":0,"581":0,"582":0,"583":0,"585":0,"591":0,"592":0,"595":0,"604":0,"606":0,"607":0,"608":0,"609":0,"611":0,"617":0,"618":0,"619":0,"620":0,"621":0,"622":0,"623":0,"625":0,"626":0,"629":0,"630":0,"632":0,"636":0,"637":0,"638":0,"650":0,"651":0,"654":0,"655":0,"656":0,"666":0,"667":0,"677":0,"678":0,"679":0,"680":0,"685":0,"693":0,"700":0,"701":0,"702":0,"703":0,"705":0,"706":0,"707":0,"716":0,"717":0,"718":0,"719":0,"720":0,"722":0,"727":1}},"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/VoiceDataStream.js":{"path":"/home/travis/build/npmtest/node-npmtest-eris/node_modules/eris/lib/voice/VoiceDataStream.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":16,"loc":{"start":{"line":16,"column":15},"end":{"line":16,"column":22}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":17}},"2":{"start":{"line":4,"column":0},"end":{"line":8,"column":1}},"3":{"start":{"line":5,"column":4},"end":{"line":5,"column":44}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":50}},"5":{"start":{"line":17,"column":8},"end":{"line":17,"column":16}},"6":{"start":{"line":18,"column":8},"end":{"line":18,"column":25}},"7":{"start":{"line":22,"column":0},"end":{"line":22,"column":33}}},"branchMap":{},"code":["\"use strict\";","","var EventEmitter;","try {","    EventEmitter = require(\"eventemitter3\");","} catch(err) {","    EventEmitter = require(\"events\").EventEmitter;","}","","/**","* Represents a voice data stream","* @extends EventEmitter","* @prop {String} type The targeted voice data type for the stream, either \"opus\" or \"pcm\"","*/","class VoiceDataStream extends EventEmitter {","    constructor(type) {","        super();","        this.type = type;","    }","}","","module.exports = VoiceDataStream;",""],"l":{"3":1,"4":1,"5":1,"7":1,"17":0,"18":0,"22":1}}}